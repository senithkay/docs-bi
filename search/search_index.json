{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Kola is a low-code integration solution built on Ballerina, enabling fast and efficient integration development with minimal coding. The Kola extension for Visual Studio Code (VS Code) provides a familiar, AI-assisted environment that streamlines tasks and enhances accuracy, accelerating digital transformation efforts.                      Quick Start Guide  <p>                         Get started with Kola by running a simple integration use case in your local environment.                         </p> Low-code integration development <p>                             Kola offers a user-friendly, streamlined environment for building integrations with minimal coding, accessible to both experienced developers and beginners. Here\u2019s how Kola\u2019s low-code features simplify integration development:                         </p> <ul> <li>Design visually: Kola\u2019s interface lets users design integrations visually, simplifying flow creation and management.</li> <li>Pre-built connectors: Kola offers connectors for easy integration with various systems and services.</li> <li>Reuse components: Create and share reusable components across integrations, saving time and effort.</li> <li>Automate testing: Automated testing helps identify and fix issues early.</li> <li>AI-assisted development: Kola\u2019s AI provides smart suggestions to boost coding efficiency and accuracy.</li> </ul> AI-assisted development <p>                             Kola leverages AI to streamline coding tasks, improve code quality, and reduce time on error-prone processes. Here\u2019s how Kola\u2019s AI capabilities make a difference:                         </p> <ul> <li>Code suggestions and autocompletion: Kola\u2019s AI provides context-aware suggestions, helping developers code faster with real-time prompts for methods, properties, and configurations.</li> <li>Error detection and fix recommendations: AI identifies errors and suggests fixes early, enhancing code quality and minimizing debugging needs.</li> <li>Pattern recognition and code optimization: Kola\u2019s AI detects code patterns and suggests optimizations, boosting performance and aiding code standardization.</li> <li>Natural language code search and commands: Developers can search for code snippets or methods using natural language, reducing documentation time and accelerating onboarding.</li> <li>Smart refactoring and code restructuring: Kola\u2019s AI suggests refactoring options, enabling a cleaner, more maintainable codebase.</li> </ul> Leverage the power of Ballerina <p>                             Kola uses Ballerina, a language designed for seamless integration development, making API-driven, cloud-native workflows simpler and more efficient. Ballerina offers:                         </p> <ul> <li>Integration-centric Syntax: Optimized syntax with constructs like services, data types, and data mappers for clear API orchestration.</li> <li>Cloud-native design: Supports HTTP, WebSocket, gRPC, and Kafka for API-first, microservices-ready development.</li> <li>Visual flow representation: Graphical views that show data flow and logic for complex workflows.</li> <li>Observability and resilience: Built-in tracing, metrics, and logging for efficient monitoring.</li> <li>Unified data handling: Simplifies data transformations for diverse integrations.</li> <li>Testing and deployment tools: Integrated tools for scalable, reliable cloud deployment.</li> </ul>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.</p>"},{"location":"build/docker/","title":"Build as a Docker image","text":"<p>This guide explains how to build an integration as a Docker image.</p> <ol> <li>Navigate to the Visualizer view by clicking on the Home icon (\ud83c\udfe0) on the sidebar.</li> <li>Click on the <code>Build</code> button in the top right corner of the Visualizer view.</li> <li> <p>Select <code>Docker Image</code> from the dropdown.      </p> </li> <li> <p>The integration will be built as a Docker image and the image will be available in the local Docker registry.</p> </li> </ol>"},{"location":"build/jar/","title":"Build an executable JAR","text":"<p>This guide explains how to build an integration as an executable JAR file.</p> <ol> <li>Navigate to the Visualizer view by clicking on the Home icon (\ud83c\udfe0) on the sidebar.</li> <li>Click on the <code>Build</code> button in the top right corner of the Visualizer view.</li> <li> <p>Select <code>Executable JAR</code> from the dropdown.      </p> </li> <li> <p>The integration will be built as an executable JAR and the JAR file will be available in the <code>target\\bin</code> directory of the project.</p> </li> </ol>"},{"location":"get-started/key-concepts/","title":"Key Concepts","text":"<p>Kola is an all-in-one integration solution that simplifies digital transformation by offering a powerful, configuration-driven approach. It enables developers to visually create integration solutions using an intuitive, low-code graphical interface, making the process faster and more accessible.</p>"},{"location":"get-started/key-concepts/#entrypoint","title":"Entrypoint","text":"<p>An entry point refers to the place in the code where the execution of a integration begins. It is the first function that is called when the program starts running.  In Kola, there are 3 types of entry points:</p> <ol> <li>Service: A service is a network-accessible API that is defined by a set of resources. </li> <li>Automation: Triggers integration with a task. Perfect for scheduled or one-time jobs.</li> <li>Trigger: Start your integration with a Trigger. Best for event-driven actions from external sources.</li> </ol>"},{"location":"get-started/key-concepts/#connections","title":"Connections","text":"<p>Connections are used to connect to external services. They are used to interact with external services, such as databases, APIs, and messaging systems.  Kola provides a wide range of connectors that can be used to connect to various systems and services.</p>"},{"location":"get-started/key-concepts/#functions","title":"Functions","text":"<p>Functions are reusable code blocks that can be called from different parts of the integration. They are used to perform specific tasks or calculations.</p>"},{"location":"get-started/key-concepts/#types","title":"Types","text":"<p>Types are used to define the structure of data in Kola. They are used to define the shape of the data that is passed between different components of the integration.</p>"},{"location":"get-started/key-concepts/#configurations","title":"Configurations","text":"<p>Configurations are used to define the settings and parameters of the integration. They are used to configure the behavior of the integration and its components.  Configurations can be used to set up connections, define global variables, and configure other aspects of the integration in different environments.</p>"},{"location":"get-started/quick-start-guide/","title":"Quick start guide","text":""},{"location":"get-started/quick-start-guide/#overview","title":"Overview","text":"<p>In this guide, you'll build a simple integration using the Kola plugin for Visual Studio Code. You'll create an HTTP service with a single resource named <code>greeting</code> that invokes the public Hello World API endpoint and returns the response.</p> <p></p>"},{"location":"get-started/quick-start-guide/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>Download and install the Visual Studio Code.</p>"},{"location":"get-started/quick-start-guide/#step-2-create-a-profile-in-visual-studio-code","title":"Step 2: Create a profile in Visual Studio Code","text":"<ol> <li>Open the Visual Studio Code.</li> <li>Navigate to Settings-&gt;Profiles.</li> <li>Click on New Profile and select Create Profile.</li> <li>Enter the profile name as <code>Kola</code> and click Create.</li> <li>Click on the \u2714\ufe0f sign in front of the <code>Kola</code> profile to select the profile.  </li> </ol> VS Code Profile<p>To learn more about profiles, see Visual Studio Code Profiles.</p>"},{"location":"get-started/quick-start-guide/#step-3-install-the-kola-extension","title":"Step 3: Install the Kola extension","text":"<ol> <li>Go to the Extensions view by clicking on the extension icon on the sidebar or pressing <code>Ctrl + Shift + X</code> on Windows and Linux, or <code>shift + \u2318 + X</code> on a Mac.</li> <li>Search for <code>Kola</code> in the Extensions view search box.</li> <li>Click on the <code>Install</code> button to install the <code>Kola</code> extension.    </li> <li>This will install the Kola and KolaB extensions on VS Code.</li> </ol>"},{"location":"get-started/quick-start-guide/#step-4-set-up-kola-for-the-first-time","title":"Step 4: Set up Kola for the first time","text":"<ol> <li>Click on the Kola icon on the sidebar.   </li> <li>Click on the <code>Set Up Kola</code> button.</li> <li>The setup wizard will install and configure the Ballerina distribution required for Kola.</li> <li>Click on the <code>Restart VS Code</code> button to complete the setup.    </li> </ol> Update Kola's Ballerina Distribution<p>The setup wizard will install the Ballerina distribution required for Kola in to <code>&lt;USER_HOME&gt;/.ballerina/ballerina-home</code> directory. Press <code>Ctrl + Shift + P</code> on Windows and Linux, or <code>shift + \u2318 + P</code> on a Mac and type <code>Ballerina: Update Kola</code> to update the installed Ballerina distribution.</p>"},{"location":"get-started/quick-start-guide/#step-5-create-a-new-integration-project","title":"Step 5: Create a new integration project","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create Integration</code> button.</li> <li>Enter the Integration Name as <code>HelloWorld</code>.</li> <li>Select Project Directory by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create Integration</code> button to create the integration project.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-6-create-an-integration-service","title":"Step 6: Create an integration service","text":"Generate with AI<p>The integration service can also be generated using the AI-assistant. Click on the <code>Generate with AI</code> button and enter the following prompt, then press <code>Add to Integration</code> to generate the integration service.</p> <p><code>create a http service that has base path as /hello, and 9090 as the port. Add GET resource on /greeting that invokes https://apis.wso2.com/zvdz/mi-qsg/v1.0 endpoint and forward the response to caller.</code></p> <ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the service type.</li> <li>Select <code>Design From Scratch</code> option. </li> <li>Specify the service name to be <code>HelloWorldService</code>, path as <code>/hello</code>, and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-7-design-the-integration","title":"Step 7: Design the integration","text":"<ol> <li>The generated service will have a default resource named <code>greeting</code> with the <code>GET</code> method.</li> <li>Click on the <code>greeting</code> resource to view the resource details. Let's modify the resource to invoke the <code>HelloWorld</code> API endpoint.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Add Connection</code> from the node panel. </li> <li>Search for <code>HTTP</code> in the search bar and select <code>HTTP</code> as the connection type.</li> <li>Change the variable name to <code>externalEP</code>.</li> <li> <p>Add the URL <code>https://apis.wso2.com</code> to the connection URL field and click <code>Save</code>.    </p> </li> <li> <p>Click the \u2795 button again and select <code>Connections</code> -&gt; <code>externalEP</code> -&gt; <code>get</code> from the node panel.</p> </li> <li> <p>Enter the path <code>/zvdz/mi-qsg/v1.0</code> in the <code>Resource Path</code> field and click <code>Save</code>.    </p> </li> <li> <p>Click on the \u2795 button again and select <code>Return</code> from the node panel.</p> </li> <li>Select the <code>value</code> variable from the dropdown and click <code>Save</code>. This step will return the response from the <code>HelloWorld</code> API endpoint.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-8-run-the-integration","title":"Step 8: Run the integration","text":"<ol> <li>Click on the <code>Run</code> button at top right corner to run the integration.</li> <li>The integration will be compiled and started in the embedded Ballerina runtime.</li> <li>Once the integration is started, you can access the service by navigating to <code>http://localhost:9090/hello/greeting</code> in your web browser.</li> </ol>"},{"location":"learn/data-mapping/","title":"Data Mapping","text":"<p>The following instructions demonstrate how to build an integration that transforms a JSON payload into a different JSON structure using Kola Data Mapper. An HTTP service with a single resource (<code>transform</code>) will be created to receive a JSON payload and return the transformed result.</p>"},{"location":"learn/data-mapping/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>Transformer</code>.</li> <li>Select project directory location by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project. </li> </ol>"},{"location":"learn/data-mapping/#step-2-define-input-and-output-types","title":"Step 2: Define input and output types","text":"<ol> <li>Click on the <code>Add Construct</code> button and select <code>Types</code>.</li> <li>Click on <code>Add Type</code> to add a new type</li> <li>Select <code>Import a JSON</code> from the Type dropdown.</li> <li>Generate record types corresponding to the input and output JSON payloads given below.</li> <li> <p>Click on the <code>Create Type</code> button to create the new type with the specified configurations.</p> </li> </ol>"},{"location":"learn/data-mapping/#input","title":"Input","text":"<pre><code>{\n\"user\": {\n\"firstName\": \"John\",\n\"lastName\": \"Doe\",\n\"email\": \"john.doe@example.com\",\n\"address\": {\n\"street\": \"123 Elm St\",\n\"city\": \"San Francisco\",\n\"state\": \"CA\",\n\"postalCode\": 94107\n},\n\"phoneNumbers\": [\"123-456-7890\", \"098-765-4321\"]\n},\n\"account\": {\n\"accountNumber\": \"A123456789\",\n\"balance\": 2500,\n\"lastTransaction\": \"2023-10-15T14:30:00Z\"\n}\n}\n</code></pre>"},{"location":"learn/data-mapping/#output","title":"Output","text":"<p><pre><code>{\n\"fullName\": \"John Doe\",\n\"contactDetails\": {\n\"email\": \"john.doe@example.com\",\n\"primaryPhone\": \"123-456-7890\"\n},\n\"location\": {\n\"city\": \"San Francisco\",\n\"state\": \"CA\",\n\"zipCode\": \"94107\"\n},\n\"accountInfo\": {\n\"accountNumber\": \"A123456789\",\n\"balance\": 2500\n},\n\"transactionDate\":  \"2023-10-15T14:30:00Z\"\n}\n</code></pre> </p>"},{"location":"learn/data-mapping/#step-3-create-a-http-service","title":"Step 3: Create a HTTP service.","text":"<ol> <li>Click on <code>Home</code> button to navigate back to the design view</li> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> and select <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>Transform</code>, path as <code>/</code>, and <code>8290</code> as the port.</li> <li>Click on the <code>Create Service</code> button.   </li> </ol>"},{"location":"learn/data-mapping/#step-4-update-the-resource-method","title":"Step 4: Update the resource method","text":"<ol> <li>Click on <code>Edit Resource</code> button</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>transform</code>.</li> <li>Add a payload parameter named <code>input</code> to the resource of type <code>Input</code>. </li> <li>Change the response status code to <code>201</code> and the return type to <code>Output</code>.</li> <li> <p>Click on the <code>Save</code> button to update the resource with the specified configurations. </p> <p></p> </li> </ol> <p>Resource Method</p> <p>To learn more about resources, see Ballerina Resources.</p>"},{"location":"learn/data-mapping/#step-5-add-data-mapper","title":"Step 5: Add Data Mapper","text":"<ol> <li>Click on the <code>transform</code> resource to navigate to the resource implementation designer view.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Data Mapper</code> from the node panel.</li> <li>Fill in the required fields with the values given below and <code>Create Mapping</code> button to start data mapping.</li> </ol> Field Value Variable Name <code>transformed</code> Function Name <code>tnf</code> Input <code>Input input</code> Output <code>Output</code>"},{"location":"learn/data-mapping/#step-6-create-mappings","title":"Step 6: Create Mappings","text":"<ol> <li>First click on the input field and then click on the desired output field to create a mapping</li> <li>When you are done click on the <code>Go Back</code> Button to return to the flow diagram</li> </ol>"},{"location":"learn/data-mapping/#create-simple-mapping","title":"Create Simple Mapping","text":""},{"location":"learn/data-mapping/#auto-mapping","title":"Auto Mapping","text":""},{"location":"learn/data-mapping/#many-to-one-mapping","title":"Many-to-One Mapping","text":""},{"location":"learn/data-mapping/#edit-mapping-expression","title":"Edit Mapping Expression","text":""},{"location":"learn/data-mapping/#resolving-errors","title":"Resolving Errors","text":""},{"location":"learn/data-mapping/#step-7-return-the-transformed-payload","title":"Step 7: Return the transformed payload","text":"<ol> <li>Hover to the arrow after the Data Mapper node in the flow diagram and click the \u2795 button</li> <li> <p>Select <code>Return</code> from the node panel. </p> <p></p> </li> <li> <p>Provide <code>transformed</code> as the return expression.</p> </li> <li>The final code will look like below. The source view can be accessed by clicking on the <code>&lt;/&gt;</code> button in the top right corner. </li> </ol> <pre><code>import ballerina/http;\nimport ballerina/log;\n\nservice / on new http:Listener(8290) {\n\n    function init() returns error? {\n    }\n\n    resource function post transform(@http:Payload Input input) returns Output|http:InternalServerError {\n        do {\n            Output transformed = tnf(input);\n            return transformed;\n        } on fail error e {\n            log:printError(\"Error: \", 'error = e);\n            return http:INTERNAL_SERVER_ERROR;\n        }\n    }\n}\n</code></pre>"},{"location":"learn/data-mapping/#step-6-run-the-integration","title":"Step 6: Run the integration","text":"<ol> <li>Click on the <code>Run</code> on the run button in the top right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:8290/transform</code>.</li> <li> <p>The service can be tested using a tool like Postman or curl by sending a POST request with a JSON payload to the service endpoint.  <pre><code>curl -X POST \"http://localhost:8290/transform\" -H \"Content-Type: application/json\" -d '{\n \"user\": {\n     \"firstName\": \"John\",\n     \"lastName\": \"Doe\",\n     \"email\": \"john.doe@example.com\",\n     \"address\": {\n         \"street\": \"123 Elm St\",\n         \"city\": \"San Francisco\",\n         \"state\": \"CA\",\n         \"postalCode\": 94107\n     },\n     \"phoneNumbers\": [\"123-456-7890\", \"098-765-4321\"]\n },\n \"account\": {\n     \"accountNumber\": \"A123456789\",\n     \"balance\": 2500,\n     \"lastTransaction\": \"2023-10-15T14:30:00Z\"\n } \n}'\n</code></pre></p> </li> <li> <p>The response will be the transformed JSON payload. <pre><code>{\n\"fullName\": \"John Doe\",\n\"contactDetails\": {\n\"email\": \"john.doe@example.com\",\n\"primaryPhone\": \"123-456-7890\"\n},\n\"location\": {\n\"city\": \"San Francisco\",\n\"state\": \"CA\",\n\"zipCode\": \"94107\"\n},\n\"accountInfo\": {\n\"accountNumber\": \"A123456789\",\n\"balance\": 2500\n},\n\"transactionDate\":  \"2023-10-15T14:30:00Z\"\n}\n</code></pre></p> </li> </ol>"},{"location":"learn/integration-ai/","title":"AI-assisted integration","text":"<p>In this tutorial, you\u2019ll create an HTTP service to add key-value pairs to a Redis database. The integrated AI-assistant will help you generate the integration flow.</p>"},{"location":"learn/integration-ai/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your machine.</li> </ul>"},{"location":"learn/integration-ai/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>RedisService</code>.</li> <li>Select project directory location by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.</li> </ol>"},{"location":"learn/integration-ai/#step-2-create-a-new-integration","title":"Step 2: Create a new integration","text":"<ol> <li>In the design view click on the <code>Generate with AI</code> button.</li> <li>Enter the following prompt and press <code>Enter</code>:    <pre><code> Create an integration service with a base path of /cache and a POST resource at /add that accepts key-value pairs and adds them to Redis.\n</code></pre> </li> <li>Click on <code>+ Add to Ingeration</code> button to add the generated integration to the project.</li> <li>The generated integration will look like below: </li> </ol>"},{"location":"learn/integration-ai/#step-3-add-a-resource-to-get-value","title":"Step 3:  Add a resource to get value","text":"<ol> <li>Add the following prompt and press <code>Enter</code>:    <pre><code> Add a resource to get the value of a key from Redis.\n</code></pre></li> <li>Click on <code>+ Add to Ingeration</code> button to add the generated integration to the project.</li> <li>The generated integration will look like below: </li> </ol>"},{"location":"learn/integration-ai/#step-4-start-the-redis-server","title":"Step 4: Start the Redis server","text":"<ol> <li>Start the Redis server by running the following command:    <pre><code>docker run --name some-redis -d -p 6379:6379 redis\n</code></pre></li> <li>The redis server will start on port <code>6379</code> without password protection.  </li> </ol>"},{"location":"learn/integration-ai/#step-6-configure-the-redis-client","title":"Step 6:  Configure the Redis client","text":"<ol> <li>In the <code>Integrator overview</code>, click on the <code>Configurations</code>.</li> <li>Set <code>redisHost</code> value to <code>localhost</code>.</li> <li>Set <code>redisPort</code> value to <code>6379</code>.  </li> </ol>"},{"location":"learn/integration-ai/#step-5-generate-the-curl-commands-to-test-the-integration","title":"Step 5: Generate the curl commands to test the integration","text":"<ol> <li>Add the following prompt and press <code>Enter</code> to generate the curl command to add key-value pairs to the Redis server.:    <pre><code> Generate a curl command to add key-value pairs to the Redis server.\n</code></pre> </li> <li>Add the following prompt and press <code>Enter</code> to generate the curl command to get the value of a key from the Redis server.:    <pre><code> Generate a curl command to get the value of a key from the Redis server.\n</code></pre></li> </ol>"},{"location":"learn/integration-ai/#step-6-test-the-integration","title":"Step 6: Test the integration","text":"<ol> <li>Click on the <code>Run</code> button to start the integration.</li> <li>Execute the generated <code>curl</code> commands to add a key-value pair.    <pre><code>   curl -X POST http://localhost:8080/cache/add \\\n-H \"Content-Type: application/json\" \\\n-d '{\"key\": \"Kola\", \"value\": \"Kola is an AI-assisted integration platform.\"}' </code></pre></li> <li>Execute the generated <code>curl</code> command to get the value of the key.    <pre><code>   curl http://localhost:8080/cache/get?key=Kola\n</code></pre></li> <li>The response will be the value of the key <code>Kola</code> stored in the Redis server.    <pre><code>Kola is an AI-assisted integration platform.%\n</code></pre></li> </ol>"},{"location":"learn/integration-ai/#step-7-stop-the-integration","title":"Step 7: Stop the integration","text":"<ol> <li>Click on the <code>Stop</code> button to stop the integration.</li> <li>Stop the Redis server by running the following command:    <pre><code>docker stop some-redis\n</code></pre></li> </ol>"},{"location":"learn/message-routing/","title":"Message routing","text":"<p>In this tutorial, you'll create a service that allows users to reserve appointments at various hospitals. Requests will be directed to the appropriate hospital based on the request payload's content. To accomplish this, you\u2019ll build a REST service with a single resource in Kola extension. The resource will handle user requests, identify the hospital endpoint based on the hospital ID, forward the request to the specified hospital service to make the reservation, and return the reservation details.</p> <p>Here\u2019s an overview of the process flow.</p> <p></p> <ol> <li>Receive a request with a JSON payload similar to the following.     ReservationRequest.json<pre><code>{\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"hospital_id\": \"grandoak\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre></li> <li> <p>Extract the <code>hospital_id</code> field and select the corresponding hospital service endpoint.</p> <ul> <li>grandoak -&gt; http://localhost:9090/grandoak/categories</li> <li>clemency -&gt; http://localhost:9090/clemency/categories</li> <li>pinevalley -&gt; http://localhost:9090/pinevalley/categories </li> </ul> </li> <li> <p>Forward the request to the selected hospital service and retrieve the response which will be similar to the following.     ReservationResponse.json<pre><code>{\n\"appointmentNumber\": 8,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patientName\": \"John Doe\",\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></p> </li> </ol>"},{"location":"learn/message-routing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your machine.</li> </ul>"},{"location":"learn/message-routing/#implementation","title":"Implementation","text":"<p>Follow the steps below to implement the message routing service.</p>"},{"location":"learn/message-routing/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>MessageRouting</code>.</li> <li>Select Project Directory and click on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.</li> </ol>"},{"location":"learn/message-routing/#step-2-create-an-http-service","title":"Step 2: Create an HTTP service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>HealthCare</code>, path as <code>/healthcare</code>, and <code>8290</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/message-routing/#step-3-define-types","title":"Step 3: Define types","text":"<ol> <li>Click on the <code>Add Construct</code> button and select <code>Types</code>.</li> <li>Click on <code>Add Type</code> to add a new type</li> <li>Select <code>Import a JSON</code> from the Type dropdown.   </li> <li>Add the <code>Record Name</code> as <code>ReservationRequest</code> and paste the following JSON payload. Select <code>Make Separate Record Definitions</code> and click on the <code>Save</code> button.    <pre><code> {\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"hospital_id\": \"grandoak\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre></li> <li>Repeat the above steps to add a new type named <code>ReservationResponse</code> with the following JSON payload.     <pre><code>{\n\"appointmentNumber\": 8,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patientName\": \"John Doe\",\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> <li>The final Type diagram will look like below.    </li> </ol>"},{"location":"learn/message-routing/#step-4-add-connectors","title":"Step 4: Add connectors","text":"<ol> <li>Navigate to design view and click on the <code>Add Connector</code> button.</li> <li>Search and select the <code>HTTP</code> connector.</li> <li>Enter the connector name as <code>grandOakEP</code>, URL as <code>http://localhost:9090/grandoak/categories</code>, and config as <code>{}</code>.</li> <li>Click on the <code>Create Connector</code> button to create the new connector with the specified configurations. </li> <li> <p>Repeat the above steps to add connectors for the <code>clemency</code> and <code>pinevalley</code> hospitals with the following configurations.</p> Connector Name URL Config grandOakEP http://localhost:9090/grandoak/categories <code>{}</code> clemencyEP http://localhost:9090/clemency/categories <code>{}</code> pineValleyEP http://localhost:9090/pinevalley/categories <code>{}</code> </li> <li> <p>The final connectors will look like below.    </p> </li> </ol> HTTP Connector<p>To learn more about HTTP client, see Ballerina HTTP Client. See supported client configurations in the HTTP Client Configurations.</p>"},{"location":"learn/message-routing/#step-5-add-a-resource-method","title":"Step 5: Add a resource method","text":"<ol> <li>The service will be generated with a default resource named <code>greeting</code>. Click on the service to view and update the resource details.</li> <li>Click on three dots appear in front of the <code>greeting</code> resource and select edit to view and update the resource details.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>categories/[string category]/reserve</code></li> <li>Add a payload parameter named <code>reservation</code> to the resource of type <code>ReservationRequest</code>.</li> <li>Change the 201 response return type to <code>ReservationResponse</code>.</li> <li>Add a new response of type <code>HttpNotFound</code> under the responses.</li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations.    </li> </ol>"},{"location":"learn/message-routing/#step-6-add-the-routing-logic","title":"Step 6: Add the routing logic","text":"<ol> <li>Click on the <code>categories/[string category]/reserve</code> resource to navigate to the resource implementation designer view.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Variable</code> from the node panel on the left. This variable will be used to store the request payload for the hospital service.</li> <li>Change the variable name to <code>hospitalRequset</code>, type as <code>json</code> and expression:     <pre><code>     {\n      patient: reservation.patient.toJson(),\n      doctor: reservation.doctor,\n      hospital: reservation.hospital,\n      appointment_date: reservation.appointment_date\n    }\n</code></pre></li> <li>Click on the <code>Save</code> button to add the variable.   </li> <li>Select <code>If</code> from the node panel on the left.</li> <li>Enter the conditions as <code>If</code> <code>Else If</code> blocks as below for each hospital id and press <code>Save</code>.  conditions:<ul> <li>grandOak -&gt; <code>reservation.hospital_id == \"grandoak\"</code></li> <li>clemency -&gt; <code>reservation.hospital_id == \"clemency\"</code></li> <li>pineValley -&gt; <code>reservation.hospital_id == \"pinevalley\"</code> </li> </ul> </li> <li>Select the <code>grandOakEP</code> condition true path \u2795 sign and select <code>grandOakEP</code> connector from the node panel. </li> <li> <p>Select <code>post</code> from the dropdown. Then, fill in the required fields with the values given below and click <code>Save</code>.</p> Field Value Variable Name <code>oakEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>/[category]/reserve</code> message <code>hospitalRequset</code> </li> <li> <p>Click on the \u2795 sign again and select <code>Return</code> from the node panel. Select the <code>epReponse</code> variable from the dropdown and click <code>Save</code>.</p> </li> <li> <p>Repeat the 7,8,9 steps for the <code>clemency</code> and <code>pinevalley</code> hospitals with the following configurations.</p> <p>clemency:</p> Field Value Variable Name <code>clemncyEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>/[category]/reserve</code> message <code>hospitalRequset</code> <p>pinevalley:</p> Field Value Variable Name <code>pineValleyEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>/[category]/reserve</code> message <code>hospitalRequset</code> </li> <li> <p>For the else condition, click on the <code>If</code> condition <code>Else</code> path \u2795 sign and add a <code>Return</code> from the node panel. Enter <code>http:NOT_FOUND</code> as the value and click <code>Save</code>.             </p> </li> <li>The final design will look like below.            </li> </ol>"},{"location":"learn/message-routing/#step-7-run-the-service","title":"Step 7: Run the service","text":"<ol> <li>Start the backend service by executing the following command in a terminal.     <pre><code>docker run --name hospital-backend -p 9090:9090 -d anuruddhal/kola-hospital-backend\n</code></pre></li> <li>Click on the <code>Run</code> on the run button in the top right corner to run the service.</li> <li>The service will start and the service will be available at <code>http://localhost:8290/healthcare/categories/[category]/reserve</code>.</li> <li>Use a tool like Postman to send a POST request to the service with the following payload.    <pre><code> curl -X POST \"http://localhost:8290/healthcare/categories/surgery/reserve\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n \"patient\": {\n \"name\": \"John Doe\",\n \"dob\": \"1940-03-19\",\n \"ssn\": \"234-23-525\",\n \"address\": \"California\",\n \"phone\": \"8770586755\",\n \"email\": \"johndoe@gmail.com\"\n },\n \"doctor\": \"thomas collins\",\n \"hospital_id\": \"grandoak\",\n \"hospital\": \"grand oak community hospital\",\n \"appointment_date\": \"2023-10-02\"\n }'\n</code></pre></li> <li>The response will be similar to the following.     <pre><code>{\n\"appointmentNumber\": 1,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> </ol>"},{"location":"learn/message-routing/#step-8-stop-the-integration","title":"Step 8: Stop the integration","text":"<ol> <li>Click on the <code>Stop</code> button to stop the integration.</li> <li>Stop the hospital backend server by running the following command:    <pre><code>docker stop hospital-backend\n</code></pre></li> </ol>"},{"location":"learn/message-transformation/","title":"Message transformation","text":""},{"location":"learn/message-transformation/#overview","title":"Overview","text":"<p>This guide explains how to create a simple integration to convert a JSON payload to an XML payload using Kola. An HTTP service with a single resource (<code>toXml</code>) will be created to accept a JSON payload and return the XML representation of the payload. </p>"},{"location":"learn/message-transformation/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create Integration</code> button.</li> <li>Enter the project name as <code>JsonToXml</code>.</li> <li>Select project directory location by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create Integration</code> button to create the integration project.    </li> </ol>"},{"location":"learn/message-transformation/#step-2-create-a-http-service","title":"Step 2: Create a HTTP service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>JsonToXml</code>, path as <code>/convert</code>, and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/message-transformation/#step-3-update-the-resource-method","title":"Step 3: Update the resource method","text":"<ol> <li>Click on three dots appear in front of the <code>greeting</code> resource and select edit to view and update the resource details.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>toXml</code>.</li> <li>Add a payload parameter named <code>input</code> to the resource of type <code>json</code>. </li> <li>Change the 201 response return type to <code>xml</code>.</li> <li>Add a new response of type <code>http:BadRequest</code> under the responses. </li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations.     </li> </ol> <p>Resource Method</p> <p>To learn more about resources, see Ballerina Resources.</p>"},{"location":"learn/message-transformation/#step-4-add-the-transformation-logic","title":"Step 4: Add the transformation logic","text":"<ol> <li>Click on the <code>toXml</code> resource to navigate to the resource implementation designer view.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Variable</code> from the node panel.</li> <li>Change the variable name to <code>xmlData</code>, type as <code>xml | ()</code> and expression to <code>check xmldata:fromJson(input)</code>.    </li> </ol> <p>JSON to XML Conversion</p> <p>To learn more about json to xml conversion, see Ballerina JSON to XML conversion.</p>"},{"location":"learn/message-transformation/#step-5-error-handling","title":"Step 5: Error handling","text":"<ol> <li>Click on the \u2795 button again and select <code>If</code> from the node panel.</li> <li>Enter the condition as <code>xmlData is xml</code> and press <code>Save</code>.    </li> <li>Click on the <code>If</code> condition true(<code>xmlData is xml</code>)  path \u2795 sign and add a <code>Return</code> from the node panel.</li> <li>Select the <code>xmlData</code> variable from the dropdown and click <code>Save</code>.    </li> <li>Click on the <code>If</code> condition <code>Else</code> path \u2795 sign and add another <code>Return</code> from the node panel.  </li> <li>Enter <code>http:BadRequest</code> as the value and click <code>Save</code>. </li> <li>The final design will look like below.            </li> <li>The final code will look like below. The source view can be accessed by clicking on the <code>&lt;/&gt;</code> button in the top right corner.    <pre><code>import ballerina/http;\nimport ballerina/xmldata;\n\nservice /convert on new http:Listener(9090) {\n\n    function init() returns error? {\n    }\n\n    resource function post toXml(@http:Payload json input) returns xml|http:InternalServerError|http:BadRequest {\n        do {\n\n            xml? xmlData = check xmldata:fromJson(input);\n            if xmlData is xml {\n                return xmlData;\n            } else {\n                return http:BAD_REQUEST;\n            }\n\n        } on fail error e {\n            return http:INTERNAL_SERVER_ERROR;\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"learn/message-transformation/#step-6-run-the-integration","title":"Step 6: Run the integration","text":"<ol> <li>Click on the <code>Run</code> on the run button in the top right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:9090/convert</code>.</li> <li>The service can be tested using a tool like Postman or curl by sending a POST request with a JSON payload to the service endpoint.    <pre><code>curl -X POST \"http://localhost:9090/convert/toXml\" -H \"Content-Type: application/json\" -d '{\"name\":\"John\", \"age\":30, \"car\":\"Honda\"}'\n</code></pre></li> <li>The response will be an XML representation of the JSON payload. <code>&lt;root&gt;         &lt;name&gt;John&lt;/name&gt;         &lt;age&gt;30&lt;/age&gt;         &lt;car&gt;Honda&lt;/car&gt;     &lt;/root&gt;</code></li> </ol>"},{"location":"learn/service-orchestration/","title":"Service orchestration","text":"<p>In this tutorial, you\u2019ll create a service to process appointment requests for hospitals. The service will call multiple backend services sequentially, using data from each call to inform the next. This approach integrates several services into one, known as service orchestration. To implement this, you\u2019ll build a REST service with a single resource in Kola extension and then run the service. The resource will receive user requests, make the necessary backend calls, and respond with the appointment details.</p> <p>The flow is as follows.</p> <ol> <li>The user sends an appointment request to the service.     <pre><code>  {\n\"patient\":{\n\"name\":\"John Doe\",\n\"dob\":\"1940-03-19\",\n\"ssn\":\"234-23-525\",\n\"address\":\"California\",\n\"phone\":\"8770586755\",\n\"email\":\"johndoe@gmail.com\",\n\"cardNo\":\"7844481124110331\"\n},\n\"doctor\":\"thomas collins\",\n\"hospital_id\":\"grandoaks\",\n\"hospital\":\"grand oak community hospital\",\n\"appointment_date\":\"2024-11-06\"\n}\n</code></pre></li> <li>Extract necessary details from the request (e.g., hospital, patient, doctor, etc.) and make a call to the hospital backend service to request an appointment. A response similar to the following will be returned from the hospital backend service on success.      <pre><code>  {\n\"appointmentNumber\": 1,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000\n},\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> <li>Use the hospital ID and the appointment number and call the hospital backend service to retrieve the fee for the appointment. The response will be similar to the following.     <pre><code>  {\n\"patientName\": \"John Doe\",\n\"doctorName\": \"thomas collins\",\n\"actualFee\": \"7000\"\n}\n</code></pre></li> <li>Finally, call the payment backend service to make the payment and retrieve the reservation status.    <pre><code>  {\n\"appointmentNo\": 2,\n\"doctorName\": \"thomas collins\",\n\"patient\": \"John Doe\",\n\"actualFee\": 7000,\n\"discount\": 20,\n\"discounted\": 5600.0,\n\"paymentID\": \"f130e2ed-a34e-4434-9b40-6a0a8054ee6b\",\n\"status\": \"settled\"\n}\n</code></pre></li> </ol>"},{"location":"learn/service-orchestration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on the machine.</li> </ul>"},{"location":"learn/service-orchestration/#implementation","title":"Implementation","text":"<p>Follow the steps below to implement the service orchestration.</p>"},{"location":"learn/service-orchestration/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>ServiceOrchestration</code>.</li> <li>Select project directory location by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.     </li> </ol>"},{"location":"learn/service-orchestration/#step-2-create-a-http-service","title":"Step 2: Create a HTTP service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>HealthCare</code>, path as <code>/healthcare</code>, and <code>8290</code> as the port.</li> <li>Click on the <code>Add Service</code> button.</li> </ol>"},{"location":"learn/service-orchestration/#step-3-define-types","title":"Step 3: Define types","text":"<ol> <li>Click on the <code>Add Construct</code> button and select <code>Type</code>.</li> <li>Select <code>Import a JSON</code> from the Type dropdown.</li> <li> <p>Generate record types corresponding to the response from the hospital backend service by providing a sample of the expected JSON payload. The values are given below.</p> Record Name Sample JSON value Make Separate Record Definition ReservationRequest <code>{\"patient\":{\"name\":\"John Doe\",\"dob\":\"1940-03-19\",\"ssn\":\"234-23-525\",\"address\":\"California\",\"phone\":\"8770586755\",\"email\":\"johndoe@gmail.com\",\"cardNo\":\"7844481124110331\"},\"doctor\":\"thomas collins\",\"hospital_id\":\"grandoaks\",\"hospital\":\"grand oak community hospital\",\"appointment_date\":\"2024-11-06\"}</code> \u2611\ufe0f ReservationStatus <code>{\"appointmentNo\":1, \"doctorName\":\"thomas collins\", \"patient\":\"John Doe\", \"actualFee\":7000.0, \"discount\":20, \"discounted\":5600.0, \"paymentID\":\"e560ea82-1c42-4972-a471-af5c1ad4995f\", \"status\":\"settled\"}%</code> \u2611\ufe0f Appointment <code>{\"appointmentNumber\":12345,\"doctor\":{\"name\":\"Dr. Alice Carter\",\"hospital\":\"Green Valley Hospital\",\"category\":\"Cardiology\",\"availability\":\"Mon-Fri, 9 AM - 5 PM\",\"fee\":200},\"patientName\":\"Emma Johnson\",\"hospital\":\"Green Valley Hospital\",\"confirmed\":true,\"appointmentDate\":\"2024-11-20T10:00:00\"}</code> \u2611\ufe0f Fee <code>{\"patientName\":\"Emma Johnson\",\"doctorName\":\"Dr. Alice Carter\",\"actualFee\":\"150.00\"}</code> </li> <li> <p>The final types will look like the following.   </p> </li> </ol>"},{"location":"learn/service-orchestration/#step-4-add-connections","title":"Step 4: Add connections","text":"<ol> <li>Navigate to design view and click on the <code>Add Connector</code> button.</li> <li>Search and select the <code>HTTP</code> connector.</li> <li>Enter the connector name as <code>hospitalServicesEP</code>, URL as <code>http://localhost:9090</code>, and config as <code>{}</code>. </li> <li>Add another connector for the payment backend service with the URL <code>http://localhost:9090/healthcare/payments</code> and the name <code>paymentEP</code>, and config as <code>{}</code>.   </li> </ol> HTTP Connector<p>To learn more about HTTP client, see Ballerina HTTP Client. See supported client configurations in the HTTP Client Configurations.</p>"},{"location":"learn/service-orchestration/#step-5-design-the-resource","title":"Step 5: Design the resource","text":"<ol> <li>The service will be generated with a default resource named <code>greeting</code>. Click on the service to view and update the resource details.</li> <li>Click on three dots that appear in front of the <code>greeting</code> resource and select edit to view and update the resource details.</li> <li>Define an HTTP resource that allows the <code>POST</code> operation on the resource path <code>categories/[string category]/reserve</code> and accepts the category path parameter (corresponding to the specialization). </li> <li>Add <code>ReservationRequest</code> as a parameter indicating that the resource expects a <code>JSON</code> object corresponding to <code>ReservationRequest</code> as the payload. </li> <li>Add <code>ReservationStatus</code>, <code>http:NotFound</code>, and <code>http:InternalServerError</code> as the response types.    </li> <li>Click on the <code>Save</code> button to save the resource.  </li> </ol>"},{"location":"learn/service-orchestration/#step-6-implement-the-orchestration-logic","title":"Step 6: Implement the orchestration logic","text":"<ol> <li>Click on the <code>categories/[string category]/reserve</code> resource to navigate to the resource implementation designer view.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Variable</code> from the node panel on the left. This variable will be used to store the request payload for the hospital service.</li> <li>Change the variable name to <code>hospitalRequset</code>, type as <code>json</code> and expression:     <pre><code>     {\n     patient:{\n         name: reservation.patient.name,\n         dob: reservation.patient.dob,\n         ssn: reservation.patient.ssn,\n         address: reservation.patient.address,\n         phone: reservation.patient.phone,\n         email: reservation.patient.email\n      }\n     doctor: reservation.doctor,\n     hospital: reservation.hospital,\n     appointment_date: reservation.appointment_date\n    }\n</code></pre></li> <li>Click on the <code>Save</code> button to add the variable.  </li> <li>Click \u2795 sign and select <code>hospitalServicesEP</code> connector from the node panel.</li> <li> <p>Select <code>post</code> from the dropdown. Then, fill in the required fields with the values given below and click <code>Save</code>.</p> Field Value Variable Name <code>appointment</code> Variable Type <code>Appointment</code> Resource Path <code>\"/[payload.hospital_id]/categories/\" + category + \"/reserve\"</code> message <code>hospitalRequset</code> </li> </ol> <p>  8. Click on the \u2795 sign and select <code>Variable</code> from the node panel. Add a variable named <code>appointmentNumber</code> with the type <code>int</code> and expression <code>appointment.appointmentNumber</code>.  9. Let's add another connector to get the fee for the appointment. Click on the \u2795 sign and select <code>hospitalServicesEP</code> connector from the node panel. 10. Select <code>get</code> from the dropdown. Then, fill in the required fields with the values given below and click <code>Save</code>.</p> Field Value Variable Name <code>fee</code> Variable Type <code>Fee</code> Resource Path <code>/[reservation.hospital_id]/categories/appointments/[appointmentNumber]/fee</code> <p> 11. Click on the \u2795 sign and select <code>Variable</code> from the node panel. Add a variable named <code>actualFee</code> with the type <code>decimal</code> and expression <code>decimal:fromString(fee.actualFee)</code>. 12. Create another new to prepare the payment request. Click on the \u2795 sign and select <code>Variable</code> from the node panel. Add a variable named <code>paymentRequest</code> with the type <code>json</code> and expression as follows.     <pre><code>{\n    appointmentNumber: appointmentNumber,\n    doctor: appointment.doctor.toJson(),\n    patient: appointment.patient.toJson(),\n    fee: actualFee,\n    confirmed: false,\n    card_number: reservation.patient.cardNo\n}\n</code></pre>  13. Let's add another connector action to make the payment. Click on the \u2795 sign and select <code>paymentEP</code> connector from the node panel.  14. Select <code>post</code> from the dropdown. Then, fill in the required fields with the values given below and click <code>Save</code>.</p> Field Value Variable Name <code>status</code> Variable Type <code>ReservationStatus</code> Resource Path <code>\"/\"</code> message <code>paymentRequest</code> <p> 15. Click on the \u2795 sign and select <code>Return</code> from the node panel. Add the <code>status</code> variable to the return node.</p>"},{"location":"learn/service-orchestration/#step-7-run-the-service","title":"Step 7: Run the service","text":"<ol> <li>Click on the <code>Run</code> button to start the service.</li> <li>Start the backend service by executing the following command in a terminal.     <pre><code>docker run --name hospital-backend -p 9090:9090 -d anuruddhal/kola-hospital-backend\n</code></pre></li> <li>Click on the <code>Run</code>  on the run button (\u25b6\ufe0f) in the top right corner to run the service.</li> <li>The service will start and the service will be available at <code>http://localhost:8290/healthcare/categories/[category]/reserve</code>.</li> <li>Use a tool like Postman to send a POST request to the service with the following payload.    <pre><code> curl -X POST \"http://localhost:8290/healthcare/categories/surgery/reserve\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n   \"patient\": {\n     \"name\": \"John Doe\",\n     \"dob\": \"1940-03-19\",\n     \"ssn\": \"234-23-525\",\n     \"address\": \"California\",\n     \"phone\": \"8770586755\",\n     \"email\": \"johndoe@gmail.com\",\n     \"cardNo\": \"7844481124110331\"\n   },\n   \"doctor\": \"thomas collins\",\n   \"hospital_id\": \"grandoak\",\n   \"hospital\": \"grand oak community hospital\",\n   \"appointment_date\": \"2023-10-02\"\n }'\n</code></pre></li> <li>The response will be similar to the following.    <pre><code> {\"appointmentNo\":1, \"doctorName\":\"thomas collins\", \"patient\":\"John Doe\", \"actualFee\":7000.0, \"discount\":20, \"discounted\":5600.0, \"paymentID\":\"e560ea82-1c42-4972-a471-af5c1ad4995f\", \"status\":\"settled\"}%\n</code></pre></li> </ol>"},{"location":"learn/service-orchestration/#step-8-stop-the-integration","title":"Step 8: Stop the integration","text":"<ol> <li>Click on the <code>Stop</code> button to stop the integration or press <code>shift</code> + <code>F5</code>.</li> <li>Stop the hospital backend server by running the following command:    <pre><code>docker stop hospital-backend\n</code></pre></li> </ol>"},{"location":"roadmap/language-support/","title":"Supported Ballerina language features","text":"<p>This document provides a high-level overview of the Ballerina language features that are supported in the Kola low code environment.  </p>"},{"location":"roadmap/language-support/#core-language-features","title":"Core language features","text":"Language Feature Availability Note Functions Yes A limited set of function signature syntax is supported. Service declaration Yes A limited set of service declaration syntax is supported. Types Yes A read-only entity relationship diagram is available. Editing capabilities will be available with M4. Configurables Yes Listeners Yes A limited set of listeners are supported. See Note 1. Global variables/Constants No Will be available with M5 Workers No Will be available with the M4. Note1<p>M3 Supports the following service types.</p> <ol> <li>HTTP service</li> <li>Messaging connectors (Kafka, RabbitMQ, NATS, MQTT, JMS, ASB)</li> <li>GitHub events trigger</li> <li>Salesforce events trigger</li> </ol>"},{"location":"roadmap/language-support/#supported-statements","title":"Supported statements","text":"Statement Availability Note Variable definition statement M3 Only simple type binding (single variable statements) is supported in M3. Assignment statement M3 Only simple type binding (single variable statements) is supported in M3. If statement M3 While statement M3 Foreach statement M3 Only simple type binding (single variable statements) is supported in M3. Break statement M3 Continue statement M3 Fail M3 Panic M3 Lock M4 Fork statements M4 Wait statements M4 Do-on-Fail (Error handling) M4 Transaction statement M4 Retry and Retry-transaction M4 Match statement M4 Worker interaction statements M5"},{"location":"roadmap/roadmap/","title":"Roadmap","text":"<p>This document provides a high-level overview of the Kola roadmap. The roadmap is subject to change and may not include all the features that are planned for future releases.</p>"},{"location":"roadmap/roadmap/#milestone-4-m4","title":"Milestone 4 (M4)","text":""},{"location":"roadmap/roadmap/#service-view-enhancements","title":"Service View Enhancements","text":"<ul> <li>GraphQL Service Designer \u2013 Enables the creation of GraphQL services within a low-code-friendly environment.</li> </ul>"},{"location":"roadmap/roadmap/#low-code-diagram-features","title":"Low-Code Diagram Features","text":"<ul> <li>Concurrency Nodes \u2013 Adds support for Fork, Wait, and Lock statements.</li> <li>Transactional Nodes \u2013 Includes Transaction and Retry statements for enhanced transaction handling.</li> </ul>"},{"location":"roadmap/roadmap/#expression-editor-enhancements","title":"Expression Editor Enhancements","text":"<ul> <li>Inline Data Mapper \u2013 Visualize expressions as data mappings.</li> </ul>"},{"location":"roadmap/roadmap/#ballerina-language-features","title":"Ballerina Language Features","text":"<ul> <li>Type Editing Support \u2013 Allows editing/updating for types such as Records and Enums.</li> </ul>"},{"location":"roadmap/roadmap/#testing-enhancements","title":"Testing Enhancements","text":"<ul> <li>Test Visualization \u2013 Visualizes test flows for better understanding.</li> <li>AI-Assisted Test Generation \u2013 Supports automated test creation with AI assistance.</li> </ul>"},{"location":"roadmap/roadmap/#connections","title":"Connections","text":"<ul> <li>OpenAPI Specification-Based Connections \u2013 Facilitates creating connections directly from OpenAPI specifications.</li> </ul>"},{"location":"roadmap/roadmap/#milestone-5-m5-alpha","title":"Milestone 5 (M5 - Alpha)","text":""},{"location":"roadmap/roadmap/#visual-debugging-capabilities","title":"Visual Debugging Capabilities","text":"<ul> <li>Flow Debugging with Visual Breakpoints \u2013 Debug integration flows with breakpoints and visualize intermediate values.</li> </ul>"},{"location":"roadmap/roadmap/#additional-graphical-features","title":"Additional Graphical Features","text":"<ul> <li>XSD-Based Type Creation \u2013 Allows type creation from XSD schemas.</li> </ul>"},{"location":"roadmap/roadmap/#testing-enhancements_1","title":"Testing Enhancements","text":"<ul> <li>Low-Code Tools for Mock Services and Connections \u2013 Provides tools tailored for creating mock services and connections.</li> </ul>"},{"location":"roadmap/roadmap/#other-features","title":"Other Features","text":"<ul> <li>ICP 2.0 Integration \u2013 Offers a comprehensive toolset for monitoring integration metrics, logs, and traces, as well as managing integration writing in Kola.</li> <li>Choreo Integration \u2013 Provides a robust toolset for deploying and hosting integrations on the Choreo platform and Cloud.</li> </ul>"}]}