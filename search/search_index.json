{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"WSO2 Integrator: BI is a low-code integration solution built on Ballerina, enabling fast and efficient integration development with minimal coding. The WSO2 Integrator: BI extension for Visual Studio Code (VS Code) provides a familiar, AI-assisted environment that streamlines tasks and enhances accuracy, accelerating digital transformation efforts.          Get Started \ud83d\ude80 <ul> <li> Introduction </li> <li> Key Concepts </li> <li> Quick Start Guide </li> </ul> Deployment Options \u2699\ufe0f <ul> <li> Deploy to Devant </li> <li> Deploy as a Docker Image </li> <li> Deploy on VM as an Executable JAR </li> </ul> Install &amp; Setup \u23ec <ul> <li> Install WSO2 Integrator: BI </li> <li> Install WSO2 Integrator: ICP </li> </ul> Community &amp; Support \u2753 <ul> <li> GitHub </li> <li> Discord </li> <li> Enterprise Support </li> </ul> Tutorials \ud83d\udcda <ul> <li> Introduction to Chat Agents </li> <li> Introduction to Inline Agents </li> <li> Integrating Agents with External Endpoints </li> <li> File Integration With Directory Service </li> <li> Build an HTTP Service With WSO2 Copilot </li> <li> Message Transformation </li> <li> Message Routing </li> <li> Service Orchestration </li> </ul> Samples \ud83d\udcd6 <ul> <li> Enterprise Integration Patterns </li> </ul>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.</p>"},{"location":"deploy/deploy-as-docker-image/","title":"Deploy as a Docker Image","text":"<p>This guide explains how to deploy an integration as a Docker image.</p> <ol> <li>Navigate to the Visualizer view by clicking on the BI icon on the sidebar.</li> <li>Click on the Deploy with Docker under the Deployment Options section in the right panel.</li> <li> <p>Click Create Docker Image button.      </p> </li> <li> <p>The integration will be built as a Docker image and the image will be available in the local Docker registry.</p> </li> </ol>"},{"location":"deploy/deploy-on-vm-as-executable-jar/","title":"Deploy on a VM as an Executable JAR","text":"<p>This guide explains how to deploy an integration as an executable JAR file.</p> <ol> <li>Navigate to the Visualizer view by clicking on the BI icon on the sidebar.</li> <li>Click on the Deploy on VM under the Deployment Options section in the right panel.</li> <li> <p>Click Create Executable button.      </p> </li> <li> <p>The integration will be built as an executable JAR and the JAR file will be available in the <code>target\\bin</code> directory of the project.</p> </li> </ol>"},{"location":"deploy/deploy-to-devant/","title":"Deploy to Devant","text":"<p>Devant is a powerful IPaaS with first-class AI support. Incorporate AI agents into the integrations you build in low-code and pro-code, and move away from siloed systems to intelligent digital experiences with Devant by WSO2\u2014the AI iPaaS that your AI Agents can call \u201chome\u201d. WSO2 Integrator: BI provides a seamless integration experience with Devant. You can deploy your integrations to Devant with just a few clicks.</p> <p>Refer to the Devant quick start guide to deploy your integration in Devant. This guide provides step-by-step instructions to help you set up, configure, and successfully execute your integration with minimal effort.</p> <p></p>"},{"location":"develop/create-a-project/","title":"Create a Project","text":"<p>Project is the foundational unit where you define and manage your integration artifacts. Follow the below steps to create an integration project using the WSO2 Integrator: BI.</p> <ol> <li> <p>Launch Visual Studio Code with the WSO2 Integrator: BI extension installed.</p> <p>Info</p> <p>Follow the Install WSO2 Integrator: BI documentation for a complete installation guide.</p> </li> <li> <p>Click on the BI icon on the Activity Bar of the VS Code editor.</p> <p></p> </li> <li> <p>Next, click on Create New Integration. </p> <p></p> <p>Then enter a suitable name for the integration project and provide a location for it.</p> </li> <li> <p>It will open the home page of BI.</p> <p></p> </li> </ol> <p>Now, you can start creating your integration by developing artifacts. See the WSO2 Integrator: BI Artifacts to learn about the integration artifacts.</p> <p>Additionally, you can enhance your experience by incorporating AI-powered assistance with WSO2 Copilot.</p>"},{"location":"develop/debug-the-integrations/","title":"Debug the Integration","text":""},{"location":"develop/test-the-integrations/","title":"Test the Integration","text":""},{"location":"develop/try-the-integration/","title":"Try the Integration","text":"<p>Once you have completed building your integration with the WSO2 Integrator: BI, you can quickly test it right from the design interface. This section walks you through how to run and try your integration project using the built-in tooling.</p>"},{"location":"develop/try-the-integration/#run-the-integration","title":"Run the integration","text":"<ol> <li> <p>Click Run on the top-right title bar of the editor.</p> <p></p> </li> <li> <p>If the required configuration values are missing, a prompt will appear as shown below, indicating that the <code>Config.toml</code> file is missing.</p> <p>You\u2019ll be given three options:</p> <ul> <li>Create Config.toml \u2013 Recommended to generate and populate the required configuration file.</li> <li>Run Anyway \u2013 Proceed without the config file (not recommended for integrations requiring config values).</li> <li>Cancel \u2013 Abort the run operation.</li> </ul> <p>Make sure to choose Create Config.toml and fill in the necessary values before continuing.</p> <p></p> </li> <li> <p>This will launch the integration terminal.</p> </li> </ol>"},{"location":"develop/try-the-integration/#try-the-services","title":"Try the services","text":"<p>The Try It window on the right side of the BI interface provides a built-in way to test your HTTP services without leaving the development environment. </p> <p></p>"},{"location":"develop/visual-view-of-the-integrations/","title":"Visual View of the Integrations","text":"<p>WSO2 Integrator: BI provides intuitive tools to design, analyze, and manage integration flows. Whether you're creating new integrations or reviewing existing ones, the visualizer offers a clear and structured view of system behavior to streamline development and maintenance.</p>"},{"location":"develop/visual-view-of-the-integrations/#design-view","title":"Design view","text":"<p>The Design View in BI provides an intuitive, visual interface for developing integration projects. It helps you model, understand, and manage integration flows without needing to write or view code directly.</p> <p>Design View helps you:</p> <ul> <li>Visually model complex integration logic.</li> <li>Quickly understand the structure and behavior of your integrations.</li> <li>Accelerate development with drag-and-drop simplicity and AI-powered assistance.</li> <li>Manage deployment and documentation from a unified interface.</li> </ul> <p></p> <p>Key areas of the design view are as follows. </p>"},{"location":"develop/visual-view-of-the-integrations/#project-explorer","title":"Project explorer","text":"<p>The left sidebar displays the structure of your integration project. It organizes key elements, including:</p> <ul> <li>Entry Points \u2013 Define how your integration is triggered (for example, HTTP services or events).</li> <li>Listeners \u2013 Define the underlying protocols or transports used to receive incoming requests or events.</li> <li>Connections \u2013 Represent external systems that the integration interacts with, such as APIs or databases.</li> <li>Types, Functions, and Data Mappers \u2013 Contain reusable definitions and logic for handling data.</li> <li>Configurations \u2013 Hold externalized values like API keys or secrets.</li> <li>Local Connectors \u2013 Include reusable custom components.</li> </ul>"},{"location":"develop/visual-view-of-the-integrations/#canvas","title":"Canvas","text":"<p>The central design panel provides a visual representation of the integration flow. Each element is represented as a node, showing how services, listeners, and connections interact with one another. You can view service endpoints and how data moves through the integration.</p>"},{"location":"develop/visual-view-of-the-integrations/#toolbar","title":"Toolbar","text":"<p>Located at the top of the canvas, the toolbar offers quick actions to:</p> <ul> <li>Generate parts of the integration using AI assistance.</li> <li>Add an Artifact to insert services, events, or other integration elements.</li> </ul>"},{"location":"develop/visual-view-of-the-integrations/#deployment-options","title":"Deployment options","text":"<p>The panel on the right shows available deployment methods and the status of current deployments. You can choose to:</p> <ul> <li>Deploy to WSO2 Devant.</li> <li>Deploy using Docker or on a virtual machine (VM).</li> <li>Enable the Integration Control Plane (ICP) to monitor and manage deployments.</li> </ul>"},{"location":"develop/visual-view-of-the-integrations/#readme-panel","title":"README panel","text":"<p>This panel provides contextual documentation about the integration. It\u2019s used to describe the integration\u2019s purpose, features, usage instructions, and external references such as GitHub repositories.</p>"},{"location":"develop/visual-view-of-the-integrations/#functionautomation-logic-view","title":"Function/Automation logic view","text":"<p>When working with Functions and Automations in BI, you can explore and edit the internal logic using two interactive visual modes\u2014Flow and Sequence. These modes provide complementary perspectives to help understand and manage the behavior of your logic components effectively.</p>"},{"location":"develop/visual-view-of-the-integrations/#flow-diagram","title":"Flow diagram","text":"<p>The Flow mode presents a high-level, graphical layout of the execution path. It emphasizes clarity by organizing actions vertically in the order in which they are executed.</p> <ul> <li>Shows each step, such as service calls, variable declarations, conditionals, and returns.</li> <li>Includes a visual Error Handler block for defining error management logic.</li> <li>Highlights the end-to-end logic in a simplified, linear format.</li> <li>Helps you quickly understand and edit the logic.</li> </ul> <p></p>"},{"location":"develop/visual-view-of-the-integrations/#editing-capabilities-in-the-flow-diagram","title":"Editing capabilities in the flow diagram","text":"<p>The Flow mode in BI provides an intuitive, interactive interface for visually editing integration logic. It allows you to design and refine integration flows by interacting directly with the diagram.</p> <p>Interaction Options on Hover</p> <p>When you hover over a connector line between two nodes, the following options become available:</p> <ul> <li>Use AI Assistance: Enter a prompt to generate the next set of nodes using AI assistance. This helps accelerate integration development with contextual suggestions.</li> <li>Add a Comment: Attach comments to document your flow design or explain decisions.</li> <li>Insert Artifacts: Add new artifacts (e.g., functions, conditions, connectors) from the artifact panel between connected nodes.</li> </ul> <p>Node-Level actions</p> <p>Each node in the flow diagram provides a menu with the following actions:</p> <ul> <li>Edit: Modify the operation or configuration of the node.</li> <li>Delete: Remove the node from the diagram.</li> <li>Add Breakpoint: Insert a breakpoint to pause execution at runtime for debugging.</li> <li>View Source: Open and inspect the corresponding source code of the node.</li> </ul> <p>These features make it easy to build, understand, and troubleshoot integrations in a highly visual way.</p> <p></p>"},{"location":"develop/visual-view-of-the-integrations/#sequence-mode","title":"Sequence mode","text":"<p>The Sequence mode offers a more structured, detailed view closer to traditional sequence diagrams and helps to understand integration behaviours. It emphasizes the sequence of message exchanges across different components in the system.</p> <ul> <li>Displays the flow of invocations between services, clients, and functions.</li> <li>Clearly represents input/output calls and the order of execution.</li> <li>Useful for analyzing integration logic from an operational or interaction standpoint.</li> </ul> <p></p>"},{"location":"develop/visual-view-of-the-integrations/#types-diagram","title":"Types diagram","text":"<p>The Types Diagram shows a clear visual of how types are defined and connected in the application, allowing for visually adding and editing types.. It makes it easier to design data models and understand nested structures by showing their relationships graphically. You can open the Types diagram by clicking on a type in the left panel. </p> <p></p>"},{"location":"develop/visual-view-of-the-integrations/#source-code-view","title":"Source code view","text":"<p>In addition to the visual views, BI provides a source code view for directly editing the underlying Ballerina code.</p> <p>You can switch to this view by clicking the <code>&lt;/&gt;</code> icon located in the top-right corner of the editor interface. This opens the full source code corresponding to your integration logic.</p> Generate with AI<p>The underlying code is generated in Ballerina, a cloud-native programming language designed for integration. This view is especially useful for users who prefer text-based editing or need fine-grained control over the implementation.</p> <p>Changes made in the Design View or the Source Code View stay in sync, allowing for a seamless switch between visual and code-based development.</p> <p></p>"},{"location":"develop/wso2-integrator-bi-artifacts/","title":"WSO2 Integrator: BI Artifacts","text":"<p>WSO2 Integrator: BI supports a range of artifact types that enable developers to build powerful, event-driven, API-based, and file-based integration solutions. Each artifact type defines how an integration is triggered and how it behaves in various runtime environments.</p> <p></p> <p>Below is an overview of the available artifact types in the BI.</p>"},{"location":"develop/wso2-integrator-bi-artifacts/#automation","title":"Automation","text":"<p>Create an automation that can be triggered manually or scheduled to run periodically. Automations are ideal for time-based or on-demand processes such as data synchronization, report generation, or cleanup jobs.</p>"},{"location":"develop/wso2-integrator-bi-artifacts/#ai-agent","title":"AI agent","text":"<p>Create an intelligent agent that can be accessed via chat or exposed as an API. AI Agents are useful when you want to embed LLM-backed reasoning or decision-making capabilities into your integration workflows.</p>"},{"location":"develop/wso2-integrator-bi-artifacts/#integration-as-api","title":"Integration as API","text":"<p>Create an integration that exposes services over various protocols such as HTTP, GraphQL, or TCP. This artifact type is used when building services that must interact with external systems through standard APIs.</p>"},{"location":"develop/wso2-integrator-bi-artifacts/#event-integration","title":"Event integration","text":"<p>Create an event-driven integration that is triggered by external events. These can include message brokers, third-party services, or cloud-based event sources.</p> <p>Supported event sources:</p> <ul> <li>Kafka</li> <li>RabbitMQ</li> <li>MQTT</li> <li>Azure Service Bus</li> <li>Salesforce</li> <li>GitHub</li> </ul>"},{"location":"develop/wso2-integrator-bi-artifacts/#file-integration","title":"File integration","text":"<p>Create a file-based integration that reacts to the availability or changes in files within a file system or over FTP. This artifact type is useful for legacy systems or industries that rely on batch file exchanges.</p> <p>Supported file triggers:</p> <ul> <li>FTP services</li> <li>Directory services (local or mounted volumes)</li> </ul> <p>Each artifact type is designed to simplify the creation of integrations suited for a specific kind of use case or trigger. You can combine multiple artifacts within a single solution to cover a wide range of integration needs.</p>"},{"location":"develop/ai-assisted-development/","title":"AI Assisted Development","text":""},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/","title":"Build an HTTP Service With WSO2 Copilot","text":"<p>In this tutorial, you\u2019ll create an HTTP service to add key-value pairs to a Redis database. The integrated AI-assistant will help you generate the integration flow.</p>"},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your machine.</li> </ul>"},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project","text":"<ol> <li>Click on the BI icon on the sidebar.</li> <li>Click on the Create New Integration button.</li> <li>Enter the project name as <code>RedisService</code>.</li> <li>Select project directory location by clicking on the Select Location button.</li> <li>Click on the Create New Integration button to create the integration project.</li> </ol>"},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/#step-2-create-a-new-integration","title":"Step 2: Create a new integration","text":"<ol> <li>In the design view click on the Generate with AI button.</li> <li> <p>Enter the following prompt and press <code>Enter</code>:    <pre><code> Create an integration service with a base path of /cache and a POST resource at /add that accepts key-value pairs and adds them to Redis.\n</code></pre></p> <p></p> </li> <li> <p>Click on + Add to Ingeration button to add the generated integration to the project.</p> </li> <li> <p>The generated integration will look like below:  </p> <p></p> </li> </ol>"},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/#step-3-add-a-resource-to-get-value","title":"Step 3:  Add a resource to get value","text":"<ol> <li>Add the following prompt and press <code>Enter</code>:    <pre><code> Add a resource to get the value of a key from Redis.\n</code></pre></li> <li>Click on + Add to Ingeration button to add the generated integration to the project.</li> <li> <p>The generated integration will look like below:  </p> <p></p> </li> </ol>"},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/#step-4-start-the-redis-server","title":"Step 4: Start the Redis server","text":"<ol> <li>Start the Redis server by running the following command:    <pre><code>docker run --name some-redis -d -p 6379:6379 redis\n</code></pre></li> <li> <p>The redis server will start on port <code>6379</code> without password protection. </p> <p></p> </li> </ol>"},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/#step-6-configure-the-redis-client","title":"Step 6:  Configure the Redis client","text":"<ol> <li>In the <code>Integrator overview</code>, click on the Configurations.</li> <li>Set <code>redisHost</code> value to <code>localhost</code>.</li> <li> <p>Set <code>redisPort</code> value to <code>6379</code>.   </p> <p></p> </li> </ol>"},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/#step-5-generate-the-curl-commands","title":"Step 5: Generate the curl commands","text":"<ol> <li> <p>Add the following prompt and press <code>Enter</code> to generate the curl command to add key-value pairs to the Redis server.:    <pre><code> Generate a curl command to add key-value pairs to the Redis server.\n</code></pre></p> <p></p> </li> <li> <p>Add the following prompt and press <code>Enter</code> to generate the curl command to get the value of a key from the Redis server.:    <pre><code> Generate a curl command to get the value of a key from the Redis server.\n</code></pre></p> </li> </ol>"},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/#step-6-test-the-integration","title":"Step 6: Test the integration","text":"<ol> <li>Click on the Run button to start the integration.</li> <li>Execute the generated <code>curl</code> commands to add a key-value pair.    <pre><code>   curl -X POST http://localhost:8080/cache/add \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"key\": \"BI\", \"value\": \"BI is an AI-assisted integration platform.\"}' \n</code></pre></li> <li>Execute the generated <code>curl</code> command to get the value of the key.    <pre><code>   curl http://localhost:8080/cache/get?key=BI\n</code></pre></li> <li>The response will be the value of the key <code>BI</code> stored in the Redis server.    <pre><code>BI is an AI-assisted integration platform.%\n</code></pre></li> </ol>"},{"location":"develop/ai-assisted-development/build-an-http-service-with-wso2-copilot/#step-7-stop-the-integration","title":"Step 7: Stop the integration","text":"<ol> <li>Click on the Stop button to stop the integration.</li> <li>Stop the Redis server by running the following command:    <pre><code>docker stop some-redis\n</code></pre></li> </ol>"},{"location":"get-started/introduction/","title":"Introduction","text":"<p>WSO2 Integrator: BI is a powerful low-code integration platform built on top of the Ballerina programming language. It\u2019s designed to help developers quickly build, deploy, and manage integration solutions with minimal boilerplate and maximum productivity. Whether you're working with APIs, messaging systems, databases, or SaaS platforms, BI offers first-class language support and built-in tooling to make integration seamless and efficient.</p> <p>Whether you\u2019re modernizing legacy systems or building cloud-native services, BI provides a productive and scalable path to integration, helping teams drive digital transformation with clarity, speed, and confidence.</p>"},{"location":"get-started/introduction/#low-code-integration-development","title":"Low-code integration development","text":"<p>BI offers a user-friendly, streamlined environment for building integrations with minimal coding, accessible to both experienced developers and beginners. Here\u2019s how BI\u2019s low-code features simplify integration development:</p> <ul> <li>Design visually: BI\u2019s interface lets users design integrations visually, simplifying flow creation and management.</li> <li>Pre-built connectors: BI offers connectors for easy integration with various systems and services.</li> <li>Low-code and pro-code support: BI allows seamless switching between low-code and pro-code, enabling visual design with optional custom coding.</li> <li> <p>Deploy anywhere: BI supports deployment to the cloud or on-premises environment, ensuring flexibility and scalability.</p> <p></p> </li> </ul>"},{"location":"get-started/introduction/#ai-assisted-development","title":"AI-assisted development","text":"<p>BI leverages AI to streamline coding tasks, improve code quality, and reduce time on error-prone processes. Here\u2019s how BI\u2019s AI capabilities make a difference:</p> <ul> <li>Code suggestions and autocompletion: BI\u2019s AI provides context-aware suggestions, helping developers code faster with real-time prompts for methods, properties, and configurations.</li> <li>Error detection and fix recommendations: AI identifies errors and suggests fixes early, enhancing code quality and minimizing debugging needs.</li> <li>Pattern recognition and code optimization: BI\u2019s AI detects code patterns and suggests optimizations, boosting performance and aiding code standardization.</li> <li>Natural language code search and commands: Developers can search for code snippets or methods using natural language, reducing documentation time and accelerating onboarding.</li> <li> <p>Smart refactoring and code restructuring: BI\u2019s AI suggests refactoring options, enabling a cleaner, more maintainable codebase.</p> <p></p> </li> </ul>"},{"location":"get-started/introduction/#leverage-the-power-of-ballerina","title":"Leverage the power of Ballerina","text":"<p>BI uses Ballerina, a language designed for seamless integration development, making API-driven, cloud-native workflows simpler and more efficient. Ballerina offers:</p> <ul> <li>Integration-centric syntax: Optimized syntax with constructs like services, data types, and data mappers for clear API orchestration.</li> <li>Cloud-native design: Supports HTTP, WebSocket, gRPC, and Kafka for API-first, microservices-ready development.</li> <li>Visual flow representation: Graphical views that show data flow and logic for complex workflows.</li> <li>Observability and resilience: Built-in tracing, metrics, and logging for efficient monitoring.</li> <li>Unified data handling: Simplifies data transformations for diverse integrations.</li> <li>Testing and deployment tools: Integrated tools for scalable, reliable cloud deployment.</li> </ul>"},{"location":"get-started/key-concepts/","title":"Key Concepts","text":"<p>WSO2 Integrator: BI is an all-in-one integration solution that simplifies digital transformation by offering a powerful, configuration-driven approach. It enables developers to visually create integration solutions using an intuitive, low-code graphical interface, making the process faster and more accessible.</p>"},{"location":"get-started/key-concepts/#entrypoint","title":"Entrypoint","text":"<p>An entry point refers to the place in the code where the execution of an integration begins. It is the first function that is called when the program starts running.  In BI, there are three types of entry points:</p> <ol> <li>Service: A service is a network-accessible API that is defined by a set of resources. </li> <li>Automation: Triggers integration with a task. Perfect for scheduled or one-time jobs.</li> <li>Trigger: Start your integration with a Trigger. Best for event-driven actions from external sources.</li> </ol>"},{"location":"get-started/key-concepts/#connections","title":"Connections","text":"<p>Connections are used to connect to external services. They are used to interact with external services, such as databases, APIs, and messaging systems. BI provides a wide range of connectors that can be used to connect to various systems and services.</p>"},{"location":"get-started/key-concepts/#functions","title":"Functions","text":"<p>Functions are reusable code blocks that can be called from different parts of the integration. They are used to perform specific tasks or calculations. Functions can take input parameters and return output values. </p> <p>Ballerina Functions</p> <p>Ballerina functions are first-class citizens, which can be passed as arguments to other functions, returned from functions, and assigned to variables. This allows for a high degree of flexibility and reusability in your code. To learn more, see Ballerina Functions.</p>"},{"location":"get-started/key-concepts/#types","title":"Types","text":"<p>Types are used to define the structure of data in BI. They are used to define the shape of the data passed between different components of the integration.</p> <p>Ballerina Type System</p> <p>Ballerina has a rich type system that allows you to define complex data structures.  It supports various types, including records, arrays, maps, unions, and more.  The type system is designed to be flexible and expressive, allowing you to model real-world data structures easily. To learn more, see Ballerina Type System.</p> <p></p>"},{"location":"get-started/key-concepts/#configurations","title":"Configurations","text":"<p>Configurations are used to define the settings and parameters of the integration. They are used to configure the behavior of the integration and its components.  Configurations can be used to set up connections, define global variables, and configure other aspects of the integration in different environments. Configurations are defined in the <code>Config.toml</code> file, which is located in the root directory of the integration project.</p> <p>Ballerina Configurations</p> <ol> <li>Environment Variables: Ballerina allows you to define environment variables that can be used to store sensitive information, such as API keys and passwords. </li> <li>Configuration Files: Ballerina supports configuration files that can be used to store configuration settings in a structured format.</li> <li>Config.toml: The <code>Config.toml</code> file is used to define the configurations for the integration. It is a standard TOML file that can be edited using any text editor.</li> </ol> <p>To learn more, see Ballerina Configurables.</p> <p></p>"},{"location":"get-started/key-concepts/#source-view","title":"Source View","text":"<p>The source view is a text-based representation of the integration that can be used to view and edit the code directly. It provides a way to see the underlying code that is generated by the graphical interface. Switching to the source view allows you to view and edit the code directly, providing more control and flexibility over the integration.  Clicking on the <code>&lt;/&gt;</code> button in the top right corner of the design view will switch to the source view.</p> <p></p>"},{"location":"get-started/quick-start-guide/","title":"Quick Start Guide","text":"<p>In this guide, you'll build a simple integration using the WSO2 Integrator: BI extension. You'll create an HTTP service with a single resource named <code>greeting</code> that invokes the public Hello World API endpoint and returns the response.</p> <p></p>"},{"location":"get-started/quick-start-guide/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>Download and install Visual Studio Code.</p>"},{"location":"get-started/quick-start-guide/#step-2-install-the-wso2-integrator-bi-extension","title":"Step 2: Install the WSO2 Integrator: BI extension","text":"<ol> <li>Go to the Extensions view by clicking the extension icon on the sidebar or pressing <code>Ctrl + Shift + X</code> on Windows and Linux, or <code>Shift + \u2318 + X</code> on a Mac.</li> <li>Search for <code>WSO2 Integrator: BI</code> in the extensions view search box.</li> <li> <p>Click on the Install button to install the <code>WSO2 Integrator: BI</code> extension.</p> <p></p> </li> <li> <p>This will install the WSO2 Integrator: BI and Ballerina extensions on VS Code.</p> </li> </ol>"},{"location":"get-started/quick-start-guide/#step-3-set-up-wso2-integrator-bi-for-the-first-time","title":"Step 3: Set up WSO2 Integrator: BI for the first time","text":"<ol> <li> <p>Click on the BI icon on the sidebar.    </p> <p></p> </li> <li> <p>Click on the Set up Ballerina distribution button.</p> </li> <li>The setup wizard will install and configure the Ballerina distribution required for WSO2 Integrator: BI.</li> <li> <p>Click on the Restart Now button to complete the setup.</p> <p></p> </li> </ol>"},{"location":"get-started/quick-start-guide/#step-4-create-a-new-integration-project","title":"Step 4: Create a new integration project","text":"<ol> <li>Click on the BI icon on the sidebar.</li> <li>Click on the Create New Integration button.</li> <li>Enter the Integration Name as <code>HelloWorld</code>.</li> <li>Select the project directory by clicking on the Select Path button.</li> <li> <p>Click on the Create Integration button to create the integration project.</p> <p></p> </li> </ol>"},{"location":"get-started/quick-start-guide/#step-5-create-an-integration-service","title":"Step 5: Create an integration service","text":"Generate with AI<p>The integration service can also be generated using the AI-assistant. Click on the Generate with AI button and enter the following prompt, then press Add to Integration to generate the integration service.</p> <p><code>Create an http service that has base path as /hello, and 9090 as the port. Add GET resource on /greeting that invokes https://apis.wso2.com/zvdz/mi-qsg/v1.0 endpoint and forward the response to the caller.</code></p> <ol> <li>In the design view, click on the Add Artifact button.</li> <li>Select HTTP Service under the Integration as API category.</li> <li>Select the Create and use the default HTTP listener option from the Listeners dropdown.</li> <li>Select the Design From Scratch option as the Service Contract.</li> <li>Specify the Service base path as <code>/hello</code>.</li> <li> <p>Click on the Create button to create the new service with the specified configurations.</p> <p></p> </li> </ol>"},{"location":"get-started/quick-start-guide/#step-6-design-the-integration","title":"Step 6: Design the integration","text":"<ol> <li>The generated service will have a default resource named <code>greeting</code> with the <code>GET</code> method.</li> <li>Click on the <code>greeting</code> resource to view the resource details. Let's modify the resource to invoke the <code>HelloWorld</code> API endpoint.</li> <li>Hover over the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select Add Connection from the node panel. </li> <li>Search for <code>HTTP</code> in the search bar and select HTTP as the connection type.</li> <li>Change the Connection Name to <code>externalEP</code>.</li> <li> <p>Add the URL <code>\"https://apis.wso2.com\"</code> to the connection URL field and click Save.</p> <p></p> </li> <li> <p>Click the \u2795 button again and select Connections -&gt; externalEP -&gt; get from the node panel.</p> </li> <li> <p>Fill in the request details as below and click Save.</p> Field Value Variable Name <code>epResponse</code> Variable Type <code>string</code> Connection <code>externalEp</code> Target Type <code>string</code> Path <code>\"/zvdz/mi-qsg/v1.0\"</code> </li> <li> <p>Click \u2795 button again and select Return from the node panel.  </p> </li> <li> <p>Select the <code>epResponse</code> variable as the Expression from the dropdown and click Save. This step will return the response from the <code>HelloWorld</code> API endpoint.      </p> <p></p> </li> </ol>"},{"location":"get-started/quick-start-guide/#step-7-run-the-integration","title":"Step 7: Run the integration","text":"<ol> <li>Click on the Run button in top right corner to run the integration.</li> <li>The integration will be compiled and started in the embedded Ballerina runtime.</li> <li>Once the integration is started, click on the Test button to open the embedded HTTP client.</li> <li> <p>Click on the Send button to invoke the <code>greeting</code> resource.</p> <p></p> </li> <li> <p>Additionally, you can test the integration using REST clients like Postman or curl.</p> <pre><code>curl http://localhost:9090/hello/greeting\n{\"message\":\"Hello World!!!\"}%\n</code></pre> </li> <li> <p>Click on the \u23f9\ufe0f button or press <code>Shift + F5</code> shortcut to stop the integration.</p> <p></p> </li> </ol>"},{"location":"install-and-setup/install-wso2-integrator-bi/","title":"Install WSO2 Integrator: BI","text":""},{"location":"install-and-setup/install-wso2-integrator-bi/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>Download and install Visual Studio Code.</p>"},{"location":"install-and-setup/install-wso2-integrator-bi/#step-2-install-the-wso2-integrator-bi-extension","title":"Step 2: Install the WSO2 Integrator: BI extension","text":"<ol> <li>Go to the Extensions view by clicking on the extension icon on the sidebar or pressing <code>Ctrl + Shift + X</code> on Windows and Linux, or <code>Shift + \u2318 + X</code> on a Mac.</li> <li>Search for <code>WSO2 Integrator: BI</code> in the extensions view search box.</li> <li> <p>Click on the Install button to install the <code>WSO2 Integrator: BI</code> extension.</p> <p></p> </li> <li> <p>This will install the WSO2 Integrator: BI and Ballerina extensions on VS Code.</p> </li> </ol>"},{"location":"install-and-setup/install-wso2-integrator-bi/#step-3-set-up-wso2-integrator-bi-for-the-first-time","title":"Step 3: Set up WSO2 Integrator: BI for the first time","text":"<ol> <li> <p>Click on the BI icon on the sidebar.  </p> <p></p> </li> <li> <p>Click on the Set up Ballerina distribution button.</p> </li> <li>The setup wizard will install and configure the Ballerina distribution required for WSO2 Integrator: BI.</li> <li> <p>Click on the Restart VS Code button to complete the setup.</p> <p></p> </li> </ol>"},{"location":"install-and-setup/install-wso2-integrator-icp/","title":"Install WSO2 Integrator: ICP","text":"<p>The WSO2 Integrator: ICP monitors the runtime artifacts in a deployment. It provides a graphical view of the integration artifacts that are deployed. In this guide, you will learn how to enable ICP for an integration developed using WSO2 Integrator: BI. </p>"},{"location":"install-and-setup/install-wso2-integrator-icp/#prerequisites","title":"Prerequisites","text":"<ol> <li>Java 11 or later versions should be installed on your machine.</li> <li>You must set your <code>JAVA_HOME</code> environment variable to point to the directory where the Java Development Kit (JDK) is installed on the computer.</li> </ol>"},{"location":"install-and-setup/install-wso2-integrator-icp/#step-1-download-and-start-icp-server","title":"Step 1: Download and start ICP server","text":"<ol> <li>Go to the WSO2 Integrator: ICP web page. </li> <li>Click Download. </li> <li>Provide the necessary details. </li> <li>Click Zip Archive to download the ICP as a ZIP file. </li> <li>Extract the archive file to a dedicated directory for the ICP, which will hereafter be referred to as <code>&lt;ICP_HOME&gt;</code>.</li> <li>Open a terminal and navigate to the <code>&lt;ICP_HOME&gt;/bin</code> folder.</li> <li>Execute one of the commands given below.</li> </ol> On MacOS/LinuxOn Windows <pre><code>./dashboard.sh\n</code></pre> <pre><code>dashboard.bat\n</code></pre>"},{"location":"install-and-setup/install-wso2-integrator-icp/#step-2-access-the-icp-dashboard","title":"Step 2: Access the ICP dashboard","text":"<ol> <li>Open a web browser and navigate to https://localhost:9743/dashboard.</li> <li> <p>Log in using the default credentials: </p> <ul> <li>Username: <code>admin</code></li> <li>Password: <code>admin</code></li> </ul> <p></p> </li> </ol>"},{"location":"install-and-setup/install-wso2-integrator-icp/#step-3-deploy-the-integration","title":"Step 3: Deploy the integration","text":"<ol> <li>Navigate to the Visualizer view by clicking on the BI icon on the sidebar.</li> <li> <p>Check Enable ICP under the Integration Control Plane section in the right panel.</p> <p></p> </li> <li> <p>Click on the Run button to start the integration. </p> </li> <li> <p>Click on the Create Config.toml on the prompt to create the <code>Config.toml</code> file.</p> <p></p> </li> <li> <p>Replace the <code>Config.toml</code> file content with the following configurations.   </p> <pre><code>  [ballerinax.wso2.controlplane.dashboard]\nurl = \"https://localhost:9743/dashboard/api\"\nheartbeatInterval = 10\ngroupId = \"cluster1\"\nmgtApiUrl =\"https://localhost:9264/management/\"\n</code></pre> </li> <li> <p>Click on the Run button to start the integration.  </p> <p></p> </li> <li> <p>A log message will be displayed in the console indicating that the integration is connected to the ICP dashboard.  </p> <pre><code>time=2025-03-17T15:14:59.970+05:30 level=INFO module=ballerinax/wso2.controlplane message=\"Connected to dashboard server https://localhost:9743/dashboard/api\"\n</code></pre> </li> </ol>"},{"location":"install-and-setup/install-wso2-integrator-icp/#step-4-view-the-integration-in-the-icp-dashboard","title":"Step 4: View the integration in the ICP dashboard","text":"<ol> <li>Go to the ICP dashboard and log in https://localhost:9743/dashboard.</li> <li>In the dashboard, you will see the integration details.</li> <li> <p>Click on the node to view the node details.   </p> <p></p> </li> <li> <p>Click on the Services to view the listener and resources of the service. </p> <p></p> </li> <li> <p>Click on the Listeners to view details of the listener.</p> <p></p> </li> </ol>"},{"location":"learn/enterprise-integrations-patterns/","title":"Enterprise Integrations Patterns","text":"<p>The WSO2 Integrator: BI supports the implementation of key Enterprise Integration Patterns (EIPs), enabling you to build robust and scalable integrations based on proven architectural best practices. These patterns\u2014originally defined in Enterprise Integration Patterns by Gregor Hohpe and Bobby Woolf\u2014provide reusable solutions for common messaging and system integration challenges. This guide demonstrates how to implement each core pattern using the low-code capabilities and visual tools of the WSO2 Integrator: BI, helping you design clear, maintainable, and standards-based integration flows.</p> Enterprise Integration Patterns with Ballerina<p>For a code-centric implementation of Enterprise Integration Patterns using the Ballerina language, refer to the Ballerina EIP guide.</p>"},{"location":"learn/enterprise-integrations-patterns/#messaging-systems","title":"Messaging systems","text":"Message How can two applications connected by a message channel exchange a piece of information Message Endpoint How an application connects to a messaging channel to send and receive messages Message Translator How systems using different data formats communicate with each other using messaging Message Router How to decouple individual processing steps so that messages can be passed to different filters depending on a set of conditions Pipes and Filters How to perform complex processing on a message while maintaining independence and flexibility"},{"location":"learn/enterprise-integrations-patterns/#messaging-channels","title":"Messaging channels","text":"Channel Adapter How can two applications connected by a message channel exchange a piece of information Messaging Bridge How an application connects to a messaging channel to send and receive messages Point to Point Channel How systems using different data formats communicate with each other using messaging"},{"location":"learn/enterprise-integrations-patterns/#message-construction","title":"Message construction","text":"Command Message How messaging can be used to invoke a procedure in another application Document Message How messaging can be used to transfer data between applications. Event Message How messaging can be used to transmit events from one application to another Format Indicator How a message\u2019s data format can be designed to allow for possible future changes Message Sequence How messaging can transmit an arbitrarily large amount of data"},{"location":"learn/enterprise-integrations-patterns/#message-routing","title":"Message routing","text":"Content-Based Router How to handle a situation where the implementation of a single logical function is spread across multiple physical systems Aggregator How to combine the results of individual, but related messages so that they can be processed as a whole Message Filter How a component avoids receiving uninteresting messages Process Manager How to route a message through multiple processing steps, when the required steps may not be known at design time and may not be sequential Routing Slip How to route a message consecutively through a series of steps when the sequence of the steps is not known at design time and may vary for each message Splitter How to process a message if it contains multiple elements, each of which may have to be processed in a different way"},{"location":"learn/enterprise-integrations-patterns/#message-transformation","title":"Message transformation","text":"Content Enricher How to communicate with another system if the message originator does not have all the required data items available Content Filter How to simplify dealing with a large message when you are interested only in a few data items Normalizer How to process messages that are semantically equivalent but arrive in a different format"},{"location":"learn/enterprise-integrations-patterns/#messaging-endpoints","title":"Messaging Endpoints","text":"Idempotent Receiver How can a message receiver deal with duplicate messages"},{"location":"learn/enterprise-integrations-patterns/#system-management","title":"System Management","text":"Message Store How to report against message information without disturbing the loosely coupled and transient nature of a messaging system"},{"location":"learn/ai/agents/","title":"Agents Overview","text":"<p>The Ballerina Integrator (BI) enables developers to easily create intelligent AI agents powered by large language models (LLMs) and integrated with external APIs and services. These AI agents can automate complex workflows, interact with users through natural language, and seamlessly connect with systems like Gmail, Google Calendar, and more. Designed for low-code development and rapid integration, BI makes it simple to embed AI-driven logic into your applications, services, and business processes.</p> <p>There are two main types of AI agents in BI:</p>"},{"location":"learn/ai/agents/#chat-agents","title":"Chat Agents","text":"<p>Chat agents are exposed through HTTP endpoints as REST APIs and are designed to interact with users or external systems. These agents are ideal when you need a chatbot-like experience, where users can type questions or commands and receive intelligent responses powered by an LLM.</p>"},{"location":"learn/ai/agents/#inline-agents","title":"Inline Agents","text":"<p>Inline agents are embedded within service logic (e.g., REST APIs, GraphQL resolvers) and invoked programmatically as part of a backend workflow. These agents are ideal for automation, enrichment, or dynamic processing tasks within your services or business logic.</p> <p>Both Chat and Inline agents can be extended with tools that connect to real-world systems via BI's built-in connectors. You can easily integrate agents with services like Gmail, Google Calendar, databases, or custom APIs\u2014allowing agents to perform actions beyond reasoning, such as reading emails, sending messages, creating events, or fetching records.</p> <p>To get started with agents, visit the following tutorial examples:</p> <ul> <li>Introduction to Chat Agents</li> <li>Introduction to Inline Agents</li> <li>Integrating Agents with External Endpoints</li> </ul>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/","title":"Integrating Agents with External Endpoints","text":"<p>In this tutorial, you\u2019ll create an AI-powered personal assistant agent that integrates with Gmail and Google Calendar to help you efficiently manage emails, tasks, and schedules. You'll use the prebuilt WSO2 Integrator: BI connectors for seamless integration by turning their actions into agent tools.</p>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#prerequisites","title":"Prerequisites","text":"<p>To get started, you\u2019ll need to configure Google API credentials:</p> <ol> <li>Go to the Google Cloud Console and sign in.</li> <li>Follow this guide to generate your Client ID, Client Secret, and Refresh Token.</li> <li>Make sure the necessary scopes and permissions are enabled for both the Gmail and Calendar APIs.</li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#create-the-agent","title":"Create the agent","text":"<p>Before adding tools, make sure you\u2019ve set up your agent by completing steps 1 to 5 in the Introduction to Chat Agents guide. For this tutorial, you may use the following role and instructions when configuring the agent's behavior.</p> <p>Role <pre><code>Personal AI Assistant\n</code></pre></p> <p>Instructions <pre><code>You are Nova, a smart AI assistant helping me stay organized and efficient.\n\nYour primary responsibilities include:\n- Calendar Management: Scheduling, updating, and retrieving events from the calendar as per the user's needs.\n- Email Assistance: Reading, summarizing, composing, and sending emails while ensuring clarity and professionalism.\n- Context Awareness: Maintaining a seamless understanding of ongoing tasks and conversations to \n  provide relevant responses.\n- Privacy &amp; Security: Handling user data responsibly, ensuring sensitive information is kept confidential,\n  and confirming actions before executing them.\n\nGuidelines:\n- Respond in a natural, friendly, and professional tone.\n- Always confirm before making changes to the user's calendar or sending emails.\n- Provide concise summaries when retrieving information unless the user requests details.\n- Prioritize clarity, efficiency, and user convenience in all tasks.\n</code></pre></p>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#use-connector-actions-as-agent-tools","title":"Use connector actions as agent tools","text":"<p>BI includes prebuilt connectors for many external services like Gmail and Google Calendar. You can directly use their actions as tools for your agent\u2014no need to write custom integration code. This significantly reduces the manual effort typically required when working with external APIs.</p>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#add-gmail-tools-to-the-agent","title":"Add Gmail tools to the agent","text":""},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#tool-1-list-unread-emails","title":"Tool 1: List unread emails","text":""},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-1-add-the-gmail-connector","title":"Step 1: Add the Gmail connector","text":"<ol> <li>In Agent Flow View, click the + button at the bottom-left of the <code>AI Agent</code> box.</li> <li>Click the + button next to Tools \u2192 Create New Tool.</li> <li>Click Add Connection under the Connections section.</li> <li> <p>Search for and select the Gmail connector.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-2-configure-the-gmail-connector","title":"Step 2: Configure the Gmail connector","text":"<ol> <li> <p>In the configuration panel:</p> <ul> <li>Click Config to open the Expression Helper.</li> <li>Under the Construct Record tab, select ConnectionConfig.</li> <li>Set the <code>auth</code> type to OAuth2RefreshTokenGrantType.</li> <li>Fill in your clientId, clientSecret, and refreshToken.</li> </ul> <p>Note</p> <p>Externalize credentials using configurable values to avoid exposing them in your version control system. See Configurations for more details.</p> </li> <li> <p>Save the configuration. You\u2019ll now see the Gmail connection listed under Connections.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-3-create-the-tool","title":"Step 3: Create the tool","text":"<ol> <li>Select the Gmail connection \u2192 choose the action List messages in user\u2019s mailbox.</li> <li> <p>Provide the required Tool Name input as <code>listUnreadEmails</code>, and optionally add a meaningful Description to help the LLM better understand the tool's purpose.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-4-customize-the-tool","title":"Step 4: Customize the tool","text":"<ol> <li>Click on the circular <code>listUnreadEmails</code> tool node.</li> <li>Click \u22ee &gt; View to open the tool function.</li> <li>Click the Gmail connector action node (the rectangle connected to the Gmail connection) to open the configuration panel for that specific connector action.</li> <li>Update these inputs:<ul> <li>Set userId to <code>me</code>. The value <code>\"me\"</code> represents the authenticated user.</li> <li>Under Advanced Configurations, set the q input to <code>\"is:unread\"</code> to filter unread emails only.</li> </ul> </li> <li> <p>Click Save.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-5-clean-up","title":"Step 5: Clean up","text":"<p>Remove the <code>userId</code> parameter from the function as it is no longer used in the tool:</p> <ul> <li>Click Edit in the top-right of the function panel.</li> <li>Click the Trash icon next to <code>userId</code>.</li> <li> <p>Click Save.</p> <p></p> </li> </ul> <p>You\u2019ve now created a tool that lists unread emails in the user\u2019s Gmail inbox.</p>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#tool-2-read-a-specific-email","title":"Tool 2: Read a specific email","text":""},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-1-create-the-tool","title":"Step 1: Create the tool","text":"<ol> <li>In Agent Flow View, click + under Tools \u2192 Create New Tool.</li> <li>Select the existing gmailClient connection.</li> <li>Choose the action Gets the specified message.</li> <li> <p>Name the tool as <code>readSpecificEmail</code> and optionally add a description.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-2-customize-the-tool","title":"Step 2: Customize the tool","text":"<ol> <li>Open the <code>readSpecificEmail</code> tool node \u2192 \u22ee &gt; View.</li> <li>Click the Gmail action node and update inputs:<ul> <li>Set userId to <code>\"me\"</code>. The value <code>\"me\"</code> represents the authenticated user.</li> <li>Under Advanced Configurations, set the format input to <code>full</code> to get the full email message data with the body content parsed.</li> </ul> </li> <li> <p>Click Save.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-3-clean-up","title":"Step 3: Clean up","text":"<p>Remove <code>userId</code> from parameters (as done previously) and save the tool.</p> <p></p>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#tool-3-send-an-email","title":"Tool 3: Send an email","text":""},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-1-create-the-tool_1","title":"Step 1: Create the tool","text":"<ol> <li>Use the existing gmailClient connection.</li> <li>Select the action Sends the specified message to the recipients.</li> <li> <p>Name the tool as <code>sendEmail</code> and optionally add a helpful description.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-2-customize-and-clean-up","title":"Step 2: Customize and clean up","text":"<ol> <li>Set <code>userId</code> to <code>\"me\"</code> in the connector action configuration (as done previously) .</li> <li>Remove <code>userId</code> from the parameters.</li> <li> <p>Save your tool.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#add-calendar-tools-to-the-agent","title":"Add calendar tools to the agent","text":""},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#tool-4-list-calendar-events","title":"Tool 4: List calendar events","text":""},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-1-add-the-google-calendar-connector","title":"Step 1: Add the google calendar connector","text":"<ol> <li>In Agent Flow View, click the + button at the bottom-left of the <code>AI Agent</code> box.</li> <li>Click the + button next to Tools \u2192 Create New Tool.</li> <li>Click + button of the Connections section.</li> <li> <p>Search for and select the Gcalendar connector.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-2-configure-the-google-calendar-connector","title":"Step 2: Configure the google calendar connector","text":"<ol> <li> <p>In the configuration panel:</p> <ul> <li>Click Config to open the Expression Helper.</li> <li>Under the Construct Record tab, select ConnectionConfig.</li> <li>Set the <code>auth</code> type to OAuth2RefreshTokenGrantType.</li> <li>Fill in your clientId, clientSecret, and refreshToken.</li> </ul> <p>Note</p> <p>Externalize credentials using configurable values to avoid exposing them in your version control system. See Configurations for more details.</p> <p></p> </li> <li> <p>Save the configuration. You\u2019ll now see the Google calendar connection listed under Connections.</p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-3-create-the-tool_1","title":"Step 3: Create the tool","text":"<ol> <li>Select the Google calendar connection \u2192 choose the action Returns events on the specified calendar..</li> <li> <p>Provide the required Tool Name input as <code>listCalendarEvents</code>, and optionally add a meaningful Description.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-4-customize-the-tool_1","title":"Step 4: Customize the tool","text":"<ol> <li>Click on the circular <code>listCalendarEvents</code> tool node.</li> <li>Click \u22ee &gt; View to open the tool function.</li> <li>Click the Google calendar connector action node (the rectangle connected to the Google calendar connection) to open the configuration panel for that specific connector action.</li> <li>Update the <code>calendarId</code> input to <code>\"primary\"</code>, which allows access to the primary calendar of the authenticated user.</li> <li> <p>Click Save.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-5-clean-up_1","title":"Step 5: Clean up","text":"<p>Remove the <code>calendarId</code> parameter from the function as it is no longer used in the tool:</p> <ul> <li>Click Edit in the top-right of the function panel.</li> <li>Click the Trash icon next to <code>calendarId</code>.</li> <li> <p>Click Save.</p> <p></p> </li> </ul>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#tool-5-create-calendar-event","title":"Tool 5: Create calendar event","text":""},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-1-create-the-tool_2","title":"Step 1: Create the tool","text":"<ol> <li>In Agent Flow View, click + under Tools \u2192 Create New Tool.</li> <li>Select the existing gcalendarClient connection.</li> <li>Choose the action Creates an event.</li> <li> <p>Name the tool as <code>createCalendarEvent</code> and optionally add a helpful description.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-2-customize-the-tool_1","title":"Step 2: Customize the tool","text":"<ol> <li>Click on the circular <code>createCalendarEvent</code> tool node.</li> <li>Click \u22ee &gt; View to open the tool function.</li> <li>Click the Google calendar connector action node to open the configuration panel for that specific connector action.</li> <li>Update the <code>calendarId</code> input to <code>\"primary\"</code>.</li> <li> <p>Click Save.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#step-3-clean-up_1","title":"Step 3: Clean up","text":"<p>Remove the <code>calendarId</code> parameter from the function as it is no longer used in the tool:</p> <ul> <li>Click Edit in the top-right of the function panel.</li> <li>Click the Trash icon next to <code>calendarId</code>.</li> <li> <p>Click Save.</p> <p></p> </li> </ul>"},{"location":"learn/ai/agents/integrating-agents-with-external-endpoints/#interact-with-the-agent","title":"Interact with the agent","text":"<p>After completing the above steps, your personal AI assistant agent is now ready to assist you with necessary tasks. WSO2 Integrator: BI provides a built-in chat interface to interact with the agent.</p> <p>To start chatting with the agent:</p> <ol> <li>Click the Chat button located at the top-left corner of the interface.</li> <li>You will be prompted to run the integration. Click Run Integration.</li> <li>If you have added any variables to the project, you\u2019ll be prompted to update their values in the Config.toml file. Configure them to continue with the execution of the agent.</li> <li> <p>Start chatting with your assistant.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/introduction-to-chat-agents/","title":"Introduction to Chat Agents","text":"<p>In this tutorial, you'll create an AI-powered math tutor assistant capable of handling a variety of mathematical queries. The agent will be equipped with tools to perform fundamental arithmetic operations and intelligently combine and execute these tools to address user questions. By the end of this tutorial, you'll have built an interactive math assistant that can help users solve problems and provide clear, step-by-step explanations.</p> <p>Note</p> <p>This math tutor agent can technically be implemented using just an LLM, without any agent capabilities. However, the purpose of this tutorial is to help you understand the essential concepts required to build an AI agent using WSO2 Integrator: BI. By following this guide, you'll gain hands-on experience with agent creation in WSO2 Integrator: BI, setting the foundation for developing more powerful and tailored AI agents in the future.</p>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#prerequisites","title":"Prerequisites","text":"<ul> <li>Sign up at OpenAI.</li> <li>Get an API key from the API section.</li> </ul>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project","text":"<ol> <li>Click on the BI icon in the sidebar.</li> <li>Click on the Create New Integration button.</li> <li>Enter the project name as <code>MathTutor</code>.</li> <li>Select the project directory location by clicking on the Select Location button.</li> <li> <p>Click the Create New Integration button to generate the integration project.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#step-2-create-an-agent","title":"Step 2: Create an agent","text":"<ol> <li>Click the + button on the BI side panel or navigate back to the design screen and click on Add Artifact.</li> <li>Select AI Chat Agent under the AI Agent artifacts.</li> <li>Provide a Name for the agent. It will take a moment to create an agent with the default configuration.</li> <li> <p>After creating the agent, you can configure it with a model provider, memory, tools, roles, and instructions.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#step-3-configure-the-agent-behavior","title":"Step 3: Configure the agent behavior","text":"<ol> <li>Click on the AI Agent box to open the agent configuration settings.</li> <li>Define the agent's Role and provide Instructions in natural language. These instructions will guide the agent\u2019s behavior and tasks.</li> <li> <p>Click Save to finalize and complete the agent behavior configuration.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#step-4-configure-the-agent-model","title":"Step 4: Configure the agent model","text":"<ol> <li>Locate the circle with OpenAI logo which is connected to the AI Agent box. This circle represents the LLM model used by the agent.</li> <li>Click on the circle to open the model configuration options.</li> <li>In the Select Model Provider dropdown, choose OpenAiProvider. By default, OpenAiProvider is selected.</li> <li> <p>Next, provide the OpenAI API key in the API Key input field.</p> <p>Note</p> <p>Since the API key is sensitive, it\u2019s recommended to externalize it by using a configurable value. This helps prevent accidentally committing it to your version control system and ensures it\u2019s kept secure without being exposed. To learn more, see Configurations.</p> <ul> <li>Click the API Key input field to open the Expression Helper window.  </li> <li>In the top bar, go to the Configurables tab (the third option).  </li> <li>Click + Create New Configurable Variable to define a new configurable.  </li> <li>Set the Name to <code>openAiApiKey</code> and the Type to <code>string</code>.  </li> <li>Click Save to create the configurable.</li> </ul> </li> <li> <p>In the Model Type dropdown, select <code>ai:GPT_40</code>.</p> </li> <li> <p>Click Save to complete the LLM model configuration.    </p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#step-5-configure-agent-memory","title":"Step 5: Configure agent memory","text":"<ol> <li>By default, the agent comes preconfigured with an in-memory implementation.</li> <li>For this tutorial, we will keep the default memory configuration and not make any changes.</li> <li>If you prefer to run the agent without memory (in a stateless fashion), follow these steps:<ul> <li>Click on the three vertical dots in the Memory box.</li> <li>Select the Delete option to remove the memory.</li> </ul> </li> </ol>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#step-6-add-tools-to-the-agent","title":"Step 6: Add tools to the agent","text":"<p>BI allows you to create tools using existing functions. It also supports automatically generating tools from connector actions or OpenAPI specifications by leveraging BI\u2019s capability to generate local connectors from an OpenAPI spec.</p> <p>However, in this tutorial, we will create simple functions to perform arithmetic operations and use them as tools.</p>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#create-a-function","title":"Create a function","text":"<ol> <li>Click the + button in the BI side panel under the Functions section.</li> <li>Provide the required details to create the function. For this example, use <code>sum</code> as the function name, and specify the parameters and return types.</li> <li>Implement the function logic in the flow node editor that opens.</li> </ol>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#add-the-created-function-as-a-tool","title":"Add the created function as a tool","text":"<ol> <li>Go to the agent flow view.</li> <li>Click the + button at the bottom-right corner of the <code>AI Agent</code> box.</li> <li>Click the + button under the Tools section.</li> <li>Select the created function from the Current Integration list \u2014 in this case, <code>sum</code>.</li> <li>Then provide the Tool Name and Description of the tool</li> </ol> <p>Follow steps 1 to 3 to create functions named subtract, multiply and divide to perform subtraction, multiplication, and division operations respectively. Define the appropriate parameters and return types, and implement the corresponding logic in the flow node editor. Then repeat steps 4 to 8 to add each of these functions as tools in the agent by selecting them from the Current Integration list and providing a relevant tool name and description for each.    </p> <p></p>"},{"location":"learn/ai/agents/introduction-to-chat-agents/#step-7-interact-with-the-agent","title":"Step 7: Interact with the agent","text":"<p>After completing the above steps, your math tutor assistant is now ready to answer questions. BI provides a built-in chat interface to interact with the agent.</p> <p>To start chatting with the agent:</p> <ol> <li>Click the Chat button located at the top-left corner of the interface.</li> <li>You will be prompted to run the integration. Click Run Integration.</li> <li>Since we have created a configurable variable for <code>openAiApiKey</code> in step 4, provide it in the <code>Config.toml</code> file.</li> </ol> <p>Note</p> <p>A temporary OpenAI API key is used in the GIF below to showcase the steps.  </p> <p></p>"},{"location":"learn/ai/agents/introduction-to-inline-agents/","title":"Introduction to Inline Agents","text":"<p>In this tutorial, you'll learn how to connect an AI agent to a GraphQL service, enabling the agent to be invoked directly within a GraphQL resolver. This demonstrates the use of an inline agent\u2014a powerful capability in the WSO2 Integrator: BI.</p> <p>Unlike chat agents, which are exposed as REST APIs for external interaction, inline agents are not tied to an API endpoint. Instead, they can be invoked programmatically from anywhere within your integration logic, just like a regular function call.</p> <p>In this example, we'll define a GraphQL schema with a query that invokes the inline agent to generate dynamic responses based on input parameters. The agent runs within the resolver logic and returns results directly as part of the GraphQL response.</p>"},{"location":"learn/ai/agents/introduction-to-inline-agents/#prerequisites","title":"Prerequisites","text":"<ul> <li>Sign up at OpenAI.</li> <li>Get an API key from the API section.</li> </ul>"},{"location":"learn/ai/agents/introduction-to-inline-agents/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project","text":"<ol> <li>Click on the BI icon in the sidebar.</li> <li>Click on the Create New Integration button.</li> <li>Enter the project name as <code>GraphqlService</code>.</li> <li>Select the project directory by clicking on the Select Location button.</li> <li> <p>Click the Create New Integration button to generate the integration project.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/introduction-to-inline-agents/#step-2-create-a-graphql-service","title":"Step 2: Create a GraphQL service","text":"<ol> <li>Click the + button on the WSO2 Integrator: BI side panel or navigate back to the design screen and click on Add Artifact.</li> <li>Select GraphQL Service under the Integration as API artifacts.</li> <li> <p>Keep the default Listener and Service base path configurations, and click Create.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/introduction-to-inline-agents/#step-3-create-a-graphql-resolver","title":"Step 3: Create a GraphQL resolver","text":"<ol> <li>Click the + Create Operations button in the GraphQL design view.</li> <li>In the side panel, click the + button in the Mutation section to add a mutation operation.</li> <li>Provide <code>task</code> as the value for the Field name.</li> <li>Click the Add Argument button to add a GraphQL input<ul> <li>Provide <code>query</code> for the Argument name.</li> <li>Provide <code>string</code> for the Argument type.</li> <li>Click Add to save the argument.</li> </ul> </li> <li> <p>Provide <code>string|error</code> for the Field type, as this will be used as the return type of the resolver.</p> <p></p> </li> </ol>"},{"location":"learn/ai/agents/introduction-to-inline-agents/#step-4-implement-the-resolving-logic-with-an-inline-agent","title":"Step 4: Implement the resolving logic with an inline agent","text":"<ol> <li>Click the created <code>task</code> operation in the side panel to navigate to the resolver editor view.</li> <li>Click the + button in the flow to open the side panel.</li> <li>Click Agent under Statement, which will navigate you to the agent creation panel.</li> <li>Update Variable Name to <code>response</code>. This is the variable where the agent's output will be stored.</li> <li>Update the Role and Instructions to configure the agent\u2019s behavior.</li> <li>Provide the query parameter as the input for Query. This will serve as the command that the agent will execute.</li> <li>Click Save.</li> <li>Next, configure the agent\u2019s memory, model, and tools. For guidance, refer to the Chat Agent configuration steps and the Personal Assistant setup guide to make the agent function as a personal assistant.</li> <li>After configuring the agent, click the + button on the flow and select Return under Control from the side panel.</li> <li> <p>For the Expression, provide the <code>response</code> variable as the input.</p> <p></p> </li> </ol> <p>At this point, we've created a GraphQL resolver that takes a user-provided <code>query</code> as input, passes it to an inline agent for processing, and returns the agent\u2019s <code>response</code> as the result of the resolver.</p> <p>Note</p> <p>You must implement a query operation to have a valid GraphQL service. Similar to creating the <code>task</code> operation in Step 3, add an operation named <code>greet</code> by pressing the + button in the Query section, without any input parameters. For the implementation, you can simply return a string literal saying <code>\"welcome\"</code>.</p>"},{"location":"learn/ai/agents/introduction-to-inline-agents/#step-5-run-the-integration-and-query-the-agent","title":"Step 5: Run the integration and query the agent","text":"<ol> <li>Click on the Run button in the top-right corner to run the integration.</li> <li> <p>Query the agent by sending the mutation request below.     <pre><code>curl -X POST http://localhost:8080/graphql \\\n-H \"Content-Type: application/json\" \\\n-d '{ \"query\": \"mutation Task { task(query: \\\"Summarize latest emails\\\") }\" }'\n</code></pre></p> <p></p> </li> </ol>"},{"location":"learn/ai/natural-functions/natural-functions/","title":"Natural Functions","text":"<p>In this tutorial, you will create and use a natural function using the WSO2 Integrator: BI. A natural function allows the logic of the function to be described in natural language and is executed at runtime with a call to a Large Language Model (LLM), with the natural language instructions as the prompt. The tutorial uses a natural function to analyze blog content to suggest a suitable category and rate it on a scale of 1 to 10 based on specified criteria.</p> Natural Programming<p>To learn more about natural programming and natural functions, see Natural Language is Code: A hybrid approach with Natural Programming.</p>"},{"location":"learn/ai/natural-functions/natural-functions/#implementation","title":"Implementation","text":"<p>Follow the steps below to implement the integration.</p>"},{"location":"learn/ai/natural-functions/natural-functions/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project","text":"<ol> <li>Click on the BI icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter <code>BlogReviewer</code> as the project name.</li> <li>Select Project Directory and click on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.</li> </ol>"},{"location":"learn/ai/natural-functions/natural-functions/#step-2-define-types","title":"Step 2: Define Types","text":"<ol> <li>Click on the <code>Add Artifacts</code> button and select <code>Type</code> in the <code>Other Artifacts</code> section.</li> <li>Click on <code>+ Add Type</code> to add a new type.</li> <li> <p>Use <code>Blog</code> as the <code>Name</code>. Then click on the <code>JSON</code> button and paste the following JSON payload. Tick <code>Is Closed</code> and click on the <code>Import</code> button. Then click the <code>Save</code> button.</p> <pre><code>{\n\"title\": \"Tips for Growing a Beautiful Garden\",\n\"content\": \"Spring is the perfect time to start your garden. Begin by preparing your soil with organic compost and ensure proper drainage. Choose plants suitable for your climate zone, and remember to water them regularly. Don't forget to mulch to retain moisture and prevent weeds.\"\n}\n</code></pre> </li> <li> <p>Add another type with <code>Review</code> as the <code>Name</code> and paste the following JSON payload. Select <code>Is Closed</code> and click on the <code>Import</code> button. Then click the <code>Save</code> button.</p> <pre><code>{\n\"suggestedCategory\": \"Gardening\",\n\"rating\": 5\n}\n</code></pre> </li> <li> <p>The types are now available in the project. <code>Blog</code> and <code>Review</code> are the types that represent the blog content and review respectively.</p> <p></p> </li> </ol>"},{"location":"learn/ai/natural-functions/natural-functions/#step-3-add-a-natural-function","title":"Step 3: Add a Natural Function","text":"<ol> <li>Click on the <code>Add Artifact</code> button and select <code>Natural Function</code> under the <code>Other Artifacts</code> category.</li> <li> <p>Use <code>reviewBlog</code> as the name of the function. Then click the <code>Add Parameter</code> button to add a parameter of type <code>Blog</code> named <code>blog</code>. Use <code>Review</code> as the return type and convert it to nilable type using type operators. Then click on the <code>Create</code> button.</p> <p></p> </li> <li> <p>Click on the <code>Edit</code> button to specify the requirement in natural language (i.e., the prompt).</p> </li> <li> <p>Use the following prompt and click on the <code>Save</code> button. Note how interpolations refer to the <code>blog</code> parameter.</p> <pre><code>You are an expert content reviewer for a blog site that \n    categorizes posts under the following categories: \"Gardening\", \"Sports\", \"Health\", \"Technology\", \"Travel\"\n\n    Your tasks are:\n    1. Suggest a suitable category for the blog from exactly the specified categories. \n       If there is no match, use null.\n\n    2. Rate the blog post on a scale of 1 to 10 based on the following criteria:\n    - **Relevance**: How well the content aligns with the chosen category.\n    - **Depth**: The level of detail and insight in the content.\n    - **Clarity**: How easy it is to read and understand.\n    - **Originality**: Whether the content introduces fresh perspectives or ideas.\n    - **Language Quality**: Grammar, spelling, and overall writing quality.\n\nHere is the blog post content:\n\n    Title: ${blog.title}\n    Content: ${blog.content}\n</code></pre> <p></p> </li> </ol>"},{"location":"learn/ai/natural-functions/natural-functions/#step-4-create-an-http-service","title":"Step 4: Create an HTTP service","text":"<ol> <li>In the design view, click on the <code>Add Artifact</code> button.</li> <li>Select <code>HTTP Service</code> under the <code>Integration as API</code> category.</li> <li>Select the <code>Create and use the default HTTP listener (port: 9090)</code> option from the <code>Listeners</code> dropdown.</li> <li>Select the <code>Design from Scratch</code> option as the <code>Service Contract</code> and use <code>/blogs</code> as the <code>Service base path</code>.</li> <li> <p>Click on the <code>Create</code> button to create the new service with the specified configurations.</p> <p></p> </li> <li> <p>The service will have a default resource named <code>greeting</code> with the <code>GET</code> method. Click on the three dots that appear in front of the <code>/blogs</code> service and select <code>Edit</code> from the menu.</p> </li> <li>Then click the <code>Edit</code> button in front of <code>/greeting</code> resource.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name to <code>review</code>.</li> <li>Click on <code>Add Payload</code> and specify <code>blog</code> as the name and <code>Blog</code> as the type.</li> <li>Change the 201 response return type to <code>Review</code>.</li> <li> <p>Click on the <code>Save</code> button to update the resource with the specified configurations.</p> <p></p> </li> </ol>"},{"location":"learn/ai/natural-functions/natural-functions/#step-5-implement-the-resource-logic","title":"Step 5: Implement the resource logic","text":"<ol> <li>Click on the <code>review</code> resource to navigate to the resource implementation designer view.</li> <li>Hover over the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Call Natural Function</code> from the node panel.</li> <li>Select the <code>reviewBlog</code> function from the suggestions.</li> <li> <p>For the <code>Blog</code> parameter, use <code>blog</code> as the argument and click on the <code>Save</code> button.</p> <p></p> </li> <li> <p>Add a new node after the <code>reviewBlog</code> function call and select <code>Return</code> from the node panel.</p> </li> <li> <p>Select the <code>review</code> variable from the dropdown and click <code>Save</code>.</p> <p></p> </li> <li> <p>The resource implementation is now complete. The function <code>reviewBlog</code> is called with the <code>blog</code> content as input, and the <code>review</code> is returned as the response.</p> </li> </ol>"},{"location":"learn/ai/natural-functions/natural-functions/#step-6-configure-model-for-natural-function","title":"Step 6: Configure model for natural function","text":"<ol> <li> <p>Press <code>Ctrl + Shift + P</code> on Windows and Linux, or <code>Shift + \u2318 + P</code> on a Mac, and type <code>&gt;Ballerina: Configure default model for natural functions (Experimental)</code> to configure the default model for natural functions. </p> <p></p> </li> </ol>"},{"location":"learn/ai/natural-functions/natural-functions/#step-7-run-the-integration","title":"Step 7: Run the integration","text":"<p>Response May Vary</p> <p>Since this integration involves an LLM (Large Language Model) call, the response values may not always be identical across different executions.</p> <ol> <li>Click on the <code>Run</code> button in the top-right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:9090/blogs</code>.</li> <li>Click on the <code>Try it</code> button to open the embedded HTTP client.</li> <li> <p>Enter the blog content in the request body and click on the \u25b6\ufe0f button to send the request.</p> <pre><code>{\n\"title\": \"The Healthy Maven\",\n\"content\": \"For those who want a 360-degree approach to self-care, with advice for betterment in the workplace, home, gym, and on the go, look no further. The Healthy Maven offers recipes for every type of meal under the sun (salads, sides, soups, and more), DIY tips (you\u2019ll learn how to make your own yoga mat spray), and quick workouts. If you like where all this is going, there\u2019s a supplementary podcast run by blogger Davida with guest wellness experts.\"\n}\n</code></pre> </li> <li> <p>The blog content is analyzed by the natural function to suggest a category and rate it based on predefined criteria.</p> <p></p> </li> </ol>"},{"location":"learn/ai/rag/","title":"RAG Overview","text":""},{"location":"learn/ai/rag/build-a-rag-application/","title":"Build a RAG Application","text":"<p>This tutorial guides you through creating a Retrieval-Augmented Generation (RAG) system using the Ballerina Integrator. While there are several ways to structure a RAG workflow, we\u2019ll focus on a typical two-phase approach: ingestion and retrieval.</p>"},{"location":"learn/ai/rag/build-a-rag-application/#rag-ingestion","title":"RAG ingestion","text":"<p>This step is managed through Devant and it focuses on preparing documents for efficient retrieval in the RAG system.</p> <ul> <li>Chunk the information into smaller, meaningful sections</li> <li>Convert each chunk into embeddings using an embedding model</li> <li>Store embeddings in the vector database for efficient retrieval</li> </ul> <p>We assume that you've already used Devant to process and ingest the documents. Devant handles the entire ingestion process independently of the main application flow. The following steps of the tutorial focus solely on RAG retrieval.</p>"},{"location":"learn/ai/rag/build-a-rag-application/#rag-retrieval","title":"RAG retrieval","text":"<p>This tutorial focuses on implementing the rag retrieval component of a Retrieval-Augmented Generation (RAG) system using the Ballerina Integrator.</p> <ul> <li>Convert the user's question into embeddings</li> <li>Perform a similarity search in the vector database</li> <li>Fetch the most relevant chunks</li> <li>Include only the relevant data in the prompt</li> <li>Generate a fact-grounded answer using the LLM</li> </ul> <p>By the end of this tutorial, you'll have a working RAG system that can retrieve relevant information and generate accurate, grounded responses using pre-ingested documents.</p>"},{"location":"learn/ai/rag/build-a-rag-application/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to Pinecone vector database (requires API key and service URL)</li> <li>Access to Azure OpenAI (requires API key and endpoint URL)</li> <li>Access to Devant</li> </ul>"},{"location":"learn/ai/rag/build-a-rag-application/#step-1-create-an-http-service","title":"Step 1: Create an HTTP service","text":"<ol> <li>In the design view, click on the Add Artifact button.</li> <li>Select HTTP Service under the Integration as API category.</li> <li>Select the Create and use the default HTTP listener (port:9090) option from the Listeners dropdown.</li> <li>Select the Design from Scratch option as the Service Contract and use <code>/personalAssitant</code> as the Service base path.</li> <li> <p>Click on the Create button to create the new service with the specified configurations.</p> <p></p> </li> <li> <p>The service will have a default resource named <code>greeting</code> with the GET method.</p> </li> <li>Click the Edit FunctionModel button in front of <code>/greeting</code> resource.</li> <li>Change the resource HTTP method to POST.</li> <li>Change the resource name to <code>chat</code>.</li> <li>Click on Add Parameter under the Parameters and specify the parameters you need. We used to select the Param Type as QUERY and specify <code>request</code> as the name and <code>ChatRequestMessage</code> as the type.</li> <li>Change the 200 response return type to <code>string</code>.</li> <li> <p>Click on the Save button to update the resource with the specified configurations.</p> <p></p> </li> </ol> <p>Note</p> <p>Here we use a modular approach for the resource logic for the <code>/chat</code> resource. You may use your own logic calling directly in the <code>/chat</code> service without creating functions separately.</p> <p>This approach allows for flexibility in implementation - you can either:</p> <ul> <li>Follow the modular pattern shown in this tutorial for better organization and maintainability</li> <li>Implement your logic directly within the <code>/chat</code> resource function based on your specific requirements</li> </ul>"},{"location":"learn/ai/rag/build-a-rag-application/#step-2-implementation-of-rag","title":"Step 2: Implementation of RAG","text":""},{"location":"learn/ai/rag/build-a-rag-application/#21-retrieve-embeddings-for-user-query","title":"2.1 Retrieve embeddings for user query","text":"<p>Follow these steps to create a function that retrieves embeddings using Azure OpenAI:</p>"},{"location":"learn/ai/rag/build-a-rag-application/#211-create-an-embeddings-function","title":"2.1.1 Create an embeddings function","text":"<ol> <li>Click the + button in the Integrator side panel under the Functions section.</li> <li> <p>Provide the required details to create the function. Use <code>getEmbeddings</code> as the function name and specify the parameters and return types.</p> <p></p> </li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#212-add-embeddings-connection","title":"2.1.2 Add embeddings connection","text":"<ol> <li>Click the + button and select the + Add Connection the side panel.</li> <li>Select the connector Embeddings - ballerinax/azure.openai.embeddings.</li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#213-configure-the-embeddings-connector","title":"2.1.3 Configure the embeddings connector","text":"<ol> <li>In the configuration of the connector, under the Config select the Add Expression to open the Expression Helper window.</li> <li>In the Expression Helper, navigate to Configurables, click the Create new configurable variable. Here we create <code>azure_api_key</code> and <code>azure_service_url</code>.</li> <li>Select the ConnectionConfig under the Construct Record in the Expression Helper window.</li> <li>Change the BearerTokenConfig to ApiKeysConfig in the auth.</li> <li>Select the Configurables and click the <code>azure_api_key</code>.</li> <li>Expand the Advanced Configurations section. Under the ServiceUrl select the Add Expression to open the Expression Helper window.</li> <li> <p>In the Expression Helper, navigate to Configurables, select on <code>azure_service_url</code> as the value for ServiceUrl and click Save button.</p> <p></p> </li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#214-implement-the-embeddings-function-logic","title":"2.1.4 Implement the embeddings function logic","text":"<ol> <li>Click the + button and select the Declare Variable under the Statement.</li> <li>Create variable name as <code>embeddingsBody</code> and specify its type and expression.</li> <li>Click the + button and select the <code>embeddingsClient</code>.</li> <li>Configure the client with the DeploymentId, payload and API version.</li> <li>Configure the function to convert the returned decimal embeddings to float values.</li> <li>Return the final float array.</li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#22-retrieve-relevant-chunks-from-vector-database","title":"2.2 Retrieve relevant chunks from vector database","text":"<p>Follow these steps to create a function that retrieves similar vectors from Pinecone using vector embeddings:</p>"},{"location":"learn/ai/rag/build-a-rag-application/#221-add-pinecone-vector-connection","title":"2.2.1 Add Pinecone vector connection","text":"<ol> <li>Click the + button in the Integrator side panel under the Connections section.</li> <li>Select the connector Vector - ballerinax/pinecone.vector.</li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#222-configure-the-connector","title":"2.2.2 Configure the connector","text":"<ol> <li>In the configuration of the connector, under the ApiKeyConfig select the Add Expression to open the Expression Helper window.</li> <li>Select the Configurables and click the Create new configurable variable. Here we create <code>pinecone_api_key</code> and <code>pinecone_url</code>.</li> <li>Select the ConnectionConfig under the Construct Record in the Expression Helper window.</li> <li>Click the ApiKeysConfig in the auth, select the Configurables and click the <code>pinecone_api_key</code>.</li> <li> <p>Enter the <code>pinecone_url</code> as ServiceUrl and save it.</p> <p></p> </li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#223-create-a-retriever-function","title":"2.2.3 Create a retriever function","text":"<ol> <li>Click the + button in the Integrator side panel under the Functions section.</li> <li> <p>Provide the required details to create the function. Use <code>retrieveData</code> as the function name and specify the parameters and return types.</p> <p></p> </li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#224-implement-the-retriever-function-logic","title":"2.2.4 Implement the retriever function logic","text":"<ol> <li>Click the + button and select the <code>vectorClient</code>.</li> <li>Select Query from the vectorClient dropdown.</li> <li>Configure the vector client and specify the payload. Here, we use <code>{ topK: 4}</code> for the record QueryRequest.</li> <li>Extract the matches array from the QueryResponse.</li> <li>Handle null response scenarios with appropriate error handling.</li> <li> <p>Return the relevant matching array from the client response.</p> <p></p> </li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#23-augment-queries-with-relevant-chunks","title":"2.3 Augment queries with relevant chunks","text":"<p>Follow these steps to create a function that augments queries with relevant text chunks from vector search results:</p>"},{"location":"learn/ai/rag/build-a-rag-application/#231-create-an-augment-function","title":"2.3.1 Create an augment function","text":"<ol> <li>Click the + button in the Integrator side panel under the Functions section.</li> <li>Create the function with <code>augment</code> as the function name and specify the parameter type and return type.</li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#232-implement-the-augment-function-logic","title":"2.3.2 Implement the augment function logic","text":"<ol> <li>Create an empty string variable named <code>context</code>.</li> <li>Add a foreach loop to process each match in the input array.</li> <li>Extract metadata from each match and convert to the appropriate type.</li> <li>Concatenate the text from metadata to the context string.</li> <li> <p>Return the aggregated context string with all relevant text chunks.</p> <p></p> </li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#24-generate-response-using-the-context","title":"2.4 Generate response Using the context","text":""},{"location":"learn/ai/rag/build-a-rag-application/#241-add-chat-client-connection","title":"2.4.1 Add chat client connection","text":"<ol> <li>Click the + button in the Integrator side panel under the Connections section.</li> <li>Select the connector Chat - ballerinax/azure.openai.chat.</li> <li>In the configuration of the connector, under the Config select the ConnectionConfig under the Construct Record in the Expression Helper window.</li> <li>Change the BearerTokenConfig to ApiKeysConfig in the auth.</li> <li>Select the Configurables and click the <code>azure_api_key</code>.</li> <li> <p>Expand the Advanced Configurations and Enter the <code>azure_service_url</code> as ServiceUrl and save it.</p> <p></p> </li> </ol> Model Flexibility<p>While this tutorial demonstrates Azure OpenAI integration, the same principles apply to other AI providers. You can adapt this implementation to work with:</p> <ul> <li>OpenAI API </li> <li>Anthropic's Claude API</li> <li>Google's PaLM API</li> <li>Local models (via APIs like Ollama)</li> <li>Other cloud AI services</li> </ul> <p>Simply replace the connector and adjust the API configuration parameters according to your chosen provider's requirements.</p>"},{"location":"learn/ai/rag/build-a-rag-application/#242-create-a-generate-function","title":"2.4.2 Create a generate function","text":"<ol> <li>Click the + button in the Integrator side panel under the Functions section.</li> <li>Create the function with <code>generateText</code> as the function name and specify the parameters and return types.</li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#243-implement-the-generate-function-logic","title":"2.4.3 Implement the generate function logic","text":"<ol> <li>Create variables such as <code>systemPrompt</code> and <code>chatRequest</code>.</li> <li>Click the + button and select the <code>chatClient</code>.</li> <li>Select Creates a completion for the chat message from the chatClient dropdown.</li> <li>Configure the client and specify the DeploymentId, API version, and payload.</li> <li>Return the chat response from the client.</li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#step-3-create-the-combined-llm-function","title":"Step 3: Create the combined LLM function","text":""},{"location":"learn/ai/rag/build-a-rag-application/#31-create-the-llm-function","title":"3.1 Create the LLM function","text":"<ol> <li>Click the + button in the Integrator side panel under the Functions section.</li> <li> <p>Create the function with <code>llmChat</code> as the function name and specify the parameters and return types.</p> <p></p> </li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#32-implement-the-function-logic","title":"3.2 Implement the function logic","text":"<p>This function orchestrates the entire RAG (Retrieval-Augmented Generation):</p> <ol> <li>Get Embeddings: Call the <code>getEmbeddings</code> function with the user query to convert it into vector embeddings.</li> <li>Retrieve Data: Use the embeddings to query the vector database through the <code>retrieveData</code> function to get relevant document chunks.</li> <li>Augment Context: Process the retrieved chunks using the <code>augment</code> function to create a consolidated context string.</li> <li>Generate Response: Call the <code>generateText</code> function with both the original query and the augmented context to generate the final response.</li> <li> <p>Return Result: Return the generated response string.</p> <p></p> </li> </ol> <p>This completes the end-to-end RAG where user queries are processed through embeddings, vector search, context augmentation, and LLM generation before returning intelligent responses through the HTTP API.</p>"},{"location":"learn/ai/rag/build-a-rag-application/#step-4-integrate-with-http-service","title":"Step 4: Integrate with HTTP service","text":""},{"location":"learn/ai/rag/build-a-rag-application/#41-update-the-chat-resource","title":"4.1 Update the chat resource","text":"<p>Go back to the HTTP service created in Step 1. In the <code>/chat</code> resource implementation:</p> <ol> <li>Call the <code>llmChat</code> function with the user's query.</li> <li> <p>Return the chat response.</p> <p></p> </li> </ol>"},{"location":"learn/ai/rag/build-a-rag-application/#step-5-run-the-integration-and-query-the-rag","title":"Step 5: Run the integration and query the RAG","text":"<ol> <li>Click on the Run button in the top-right corner to run the integration.</li> <li>If you have added any variables to the project, you\u2019ll be prompted to update their values in the <code>Config.toml</code> file. Configure them to continue with the execution of the request.</li> <li> <p>Query the rag by sending the curl request below.</p> <pre><code>curl --location 'http://localhost:9090/personalAssistant/chat' \\\n--header 'Content-Type: application/json' \\\n--data '{\"message\": \"What is the process for reporting safety concerns?\"}'\n</code></pre> <p></p> </li> </ol> <p>Response May Vary</p> <p>Since this integration involves an LLM (Large Language Model) call, the response values may not always be identical across different executions.</p> <p>Your RAG system is now ready to answer questions using retrieved context from your vector database!</p>"},{"location":"learn/automation/","title":"Automation","text":""},{"location":"learn/automation/build-your-first-automation/","title":"Build Your First Automation","text":""},{"location":"learn/event-integration/","title":"Event Integration Overview","text":""},{"location":"learn/file-integration/file-integration-with-directory-service/","title":"File Integration With Directory Service","text":"<p>In this section, we will learn how to create a file integration using the WSO2 Integrator: BI. The integration will listen to events in a directory and will be triggered when an file related event occurs.</p>"},{"location":"learn/file-integration/file-integration-with-directory-service/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project","text":"<ol> <li>Click on the BI icon on the sidebar.</li> <li>Click on the Create New Integration button.</li> <li>Enter the project name as <code>FileIntegration</code>.</li> <li>Select Project Directory and click on the Select Location button.</li> <li>Click on the Create New Integration button to create the integration project.</li> </ol>"},{"location":"learn/file-integration/file-integration-with-directory-service/#step-2-create-an-directory-service","title":"Step 2: Create an Directory service","text":"<ol> <li>In the design view, click on the Add Artifact button.</li> <li>Select Directory Service under the File Integration category.</li> <li>Enter the listener name as <code>directoryListener</code>.</li> <li>Enter the path to the directory you want to monitor. For example, <code>\"/home/user/Downloads\"</code>.</li> <li>Click on the Next button to create the directory service.</li> <li> <p>Keep the default listener in the Listener Configuration window and click on the Create button to create the directory service.</p> <p></p> </li> </ol>"},{"location":"learn/file-integration/file-integration-with-directory-service/#step-3-configure-file-event-resources","title":"Step 3: Configure file event resources","text":"<ol> <li>Navigate to the <code>directoryListener</code> service  under the Entry Points section and click on the +Function  button.</li> <li>Select onCreate from Available Functions dropdown and click on the Save button.</li> <li>Click on the onCreate function to navigate to the function implementation designer view.</li> <li>Click on + and select Log Info from the node panel under Logging category.</li> <li>Add the log message as <code>\"File created \"+ event.name</code> in the Msg field.</li> <li> <p>Click on the Save button to add the log action to the function.</p> <p></p> </li> <li> <p>Repeat the above steps to add the onDelete and onModify functions to the service.</p> </li> <li>Add the log message as <code>\"File deleted \"+ event.name</code> in the Msg field for the onDelete function.</li> <li>Add the log message as <code>\"File modified \"+ event.name</code> in the Msg field for the onModify function.</li> <li> <p>The final service will look like this:      </p> <p></p> </li> </ol>"},{"location":"learn/file-integration/file-integration-with-directory-service/#step-4-run-the-integration","title":"Step 4: Run the integration","text":"<ol> <li>Click on the Run button in the top-right corner to run the integration.</li> <li>The integration will start listening to the events in the directory specified in step 2. </li> <li>Create a new file in the directory to trigger the onCreate event.</li> <li>Modify the file to trigger the onModify event.</li> <li>Delete the file to trigger the onDelete event.</li> <li> <p>The log messages will be displayed in the console.   </p> <p></p> </li> </ol>"},{"location":"learn/file-integration/file-integration-with-ftp-service/","title":"File Integration With FTP Service","text":""},{"location":"learn/integration-as-api/http-service/","title":"GraphQL Service","text":""},{"location":"learn/references/configure-the-integration/","title":"Configure the Integration","text":""},{"location":"learn/references/data-mapping/","title":"Data Mapping","text":"<p>The following instructions demonstrate how to build an integration that transforms a JSON payload into a different JSON structure using WSO2 Integrator: BI Data Mapper. An HTTP service with a single resource (<code>transform</code>) will be created to receive a JSON payload and return the transformed result.</p>"},{"location":"learn/references/data-mapping/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project","text":"<ol> <li>Click on the BI icon on the sidebar.</li> <li>Click on the Create New Integration button.</li> <li>Enter the project name as <code>Transformer</code>.</li> <li>Select project directory location by clicking on the Select Location button.</li> <li> <p>Click on the Create New Integration button to create the integration project.  </p> <p></p> </li> </ol>"},{"location":"learn/references/data-mapping/#step-2-define-input-and-output-types","title":"Step 2: Define input and output types","text":"<ol> <li>Click on the Add Artifacts button and select Type in the Other Artifacts section.</li> <li> <p>Click on + Add Type to add a new type.  </p> <p></p> </li> <li> <p>Generate record types corresponding to the input and output JSON payloads given below.</p> </li> <li> <p>Select Is Separate Record Definitions and click on the Import button.</p> <p>Input <pre><code>{\n\"user\": {\n\"firstName\": \"John\",\n\"lastName\": \"Doe\",\n\"email\": \"john.doe@example.com\",\n\"address\": {\n\"street\": \"123 Elm St\",\n\"city\": \"San Francisco\",\n\"state\": \"CA\",\n\"postalCode\": 94107\n},\n\"phoneNumbers\": [\"123-456-7890\", \"098-765-4321\"]\n},\n\"account\": {\n\"accountNumber\": \"A123456789\",\n\"balance\": 2500,\n\"lastTransaction\": \"2023-10-15T14:30:00Z\"\n}\n}\n</code></pre></p> <p>Output <pre><code>{\n\"fullName\": \"John Doe\",\n\"contactDetails\": {\n\"email\": \"john.doe@example.com\",\n\"primaryPhone\": \"123-456-7890\"\n},\n\"location\": {\n\"city\": \"San Francisco\",\n\"state\": \"CA\",\n\"zipCode\": \"94107\"\n},\n\"accountInfo\": {\n\"accountNumber\": \"A123456789\",\n\"balance\": 2500\n},\n\"transactionDate\":  \"2023-10-15T14:30:00Z\"\n}\n</code></pre> 5. The final types will look like below. The source view can be accessed by clicking on the <code>&lt;/&gt;</code> button in the top right corner.</p> <p></p> </li> </ol>"},{"location":"learn/references/data-mapping/#step-3-create-a-http-service","title":"Step 3: Create a HTTP service","text":"<ol> <li>Click on <code>Home</code> button to navigate back to the design view</li> <li>In the design view, click on the Add Artifact button.</li> <li>Select HTTP Service under the Integration as API category.</li> <li>Select the + Listeners option from the Listeners dropdown to add a new listener.</li> <li>Enter the listener name as <code>transformListener</code>, <code>8290</code> as the port and click on the Save button.</li> <li>Add the service base path as <code>/</code> and select the Design from Scratch option as the The contract of the service.</li> <li> <p>Click on the Create button to create the new service with the specified configurations.</p> <p></p> </li> </ol>"},{"location":"learn/references/data-mapping/#step-4-update-the-resource-method","title":"Step 4: Update the resource method","text":"<ol> <li>Click on <code>Edit Resource</code> button</li> <li>Change the resource HTTP method to POST.</li> <li>Change the resource name as <code>transform</code>.</li> <li>Add a payload parameter named <code>input</code> to the resource of type <code>Input</code>. </li> <li>Change the response status code to <code>201</code> and the return type to <code>Output</code>.</li> <li> <p>Click on the Save button to update the resource with the specified configurations. </p> <p></p> </li> </ol> <p>Resource Method</p> <p>To learn more about resources, see Ballerina Resources.</p>"},{"location":"learn/references/data-mapping/#step-5-add-data-mapper","title":"Step 5: Add data mapper","text":"<ol> <li>Click on the <code>transform</code> resource to navigate to the resource implementation designer view.</li> <li>Delete the existing Return node in the flow diagram.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select Map Data from the node panel and click on Create Data Mapper button. </li> <li> <p>Fill in the required fields with the values given below and <code>Create Mapping</code> button to start data mapping.</p> Field Value Data Mapper Name <code>transformed</code> Input <code>Input input</code> Output <code>Output</code> <p></p> <p> </p> </li> </ol>"},{"location":"learn/references/data-mapping/#step-6-create-mappings","title":"Step 6: Create mappings","text":"<ol> <li>First click on the input field and then click on the desired output field to create a mapping.</li> <li>When you are done click on the Go Back Button to return to the flow diagram.</li> </ol>"},{"location":"learn/references/data-mapping/#create-simple-mapping","title":"Create simple mapping","text":""},{"location":"learn/references/data-mapping/#auto-mapping","title":"Auto mapping","text":""},{"location":"learn/references/data-mapping/#many-to-one-mapping","title":"Many-to-one mapping","text":""},{"location":"learn/references/data-mapping/#edit-mapping-expression","title":"Edit mapping expression","text":""},{"location":"learn/references/data-mapping/#resolving-errors","title":"Resolving errors","text":""},{"location":"learn/references/data-mapping/#step-7-return-the-transformed-payload","title":"Step 7: Return the transformed payload","text":"<ol> <li>Hover to the arrow after the Data Mapper node in the flow diagram and click the \u2795 button.</li> <li> <p>Select Return from the node panel. </p> <p></p> </li> <li> <p>Provide <code>output</code> as the return expression.</p> </li> <li> <p>The final code will look like below. The source view can be accessed by clicking on the <code>&lt;/&gt;</code> button in the top right corner. </p> <pre><code>import ballerina/http;\n\nlistener http:Listener transformListner = new (port = 8290);\n\nservice / on transformListner {\n    resource function post transform(@http:Payload Input input) returns http:InternalServerError|Output|error {\n        do {\n            Output output = transform(input);\n            return output;\n\n        } on fail error err {\n            // handle error\n            return error(\"Not implemented\", err);\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"learn/references/data-mapping/#step-8-run-the-integration","title":"Step 8: Run the integration","text":"<ol> <li>Click on the Run button in the top-right corner to run the integration.</li> <li>The integration will start and the service will be available at http://localhost:8290/transform.</li> <li> <p>The service can be tested using a tool like Postman or cURL by sending a POST request with a JSON payload to the service endpoint.</p> <pre><code>curl -X POST \"http://localhost:8290/transform\" -H \"Content-Type: application/json\" -d '{\n    \"user\": {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"address\": {\n            \"street\": \"123 Elm St\",\n            \"city\": \"San Francisco\",\n            \"state\": \"CA\",\n            \"postalCode\": 94107\n        },\n        \"phoneNumbers\": [\"123-456-7890\", \"098-765-4321\"]\n    },\n    \"account\": {\n        \"accountNumber\": \"A123456789\",\n        \"balance\": 2500,\n        \"lastTransaction\": \"2023-10-15T14:30:00Z\"\n    } \n}'\n</code></pre> </li> <li> <p>The response will be the transformed JSON payload. <pre><code>{\n\"fullName\": \"John Doe\",\n\"contactDetails\": {\n\"email\": \"john.doe@example.com\",\n\"primaryPhone\": \"123-456-7890\"\n},\n\"location\": {\n\"city\": \"San Francisco\",\n\"state\": \"CA\",\n\"zipCode\": \"94107\"\n},\n\"accountInfo\": {\n\"accountNumber\": \"A123456789\",\n\"balance\": 2500\n},\n\"transactionDate\":  \"2023-10-15T14:30:00Z\"\n}\n</code></pre></p> </li> </ol>"},{"location":"learn/samples/message-routing/","title":"Content-Based Message Routing","text":""},{"location":"learn/samples/message-routing/#overview","title":"Overview","text":"<p>In this tutorial, you'll create a service that allows users to reserve appointments at various hospitals. Requests will be directed to the appropriate hospital based on the request payload's content. To accomplish this, you\u2019ll build a REST service with a single resource in WSO2 Integrator: BI extension. The resource will handle user requests, identify the hospital endpoint based on the hospital ID, forward the request to the specified hospital service to make the reservation, and return the reservation details.</p> <p>Here\u2019s an overview of the process flow.</p> <p></p> <ol> <li> <p>Receive a request with a JSON payload similar to the following.</p> <p>ReservationRequest.json<pre><code>{\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"hospital_id\": \"grandoak\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre> 2. Extract the <code>hospital_id</code> field and select the corresponding hospital service endpoint.</p> <ul> <li>grandoak -&gt; <code>http://localhost:9090/grandoak/categories</code></li> <li>clemency -&gt; <code>http://localhost:9090/clemency/categories</code></li> <li>pinevalley -&gt; <code>http://localhost:9090/pinevalley/categories</code> </li> </ul> </li> <li> <p>Forward the request to the selected hospital service and retrieve the response which will be similar to the following.</p> ReservationResponse.json<pre><code>{\n\"appointmentNumber\": 8,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patientName\": \"John Doe\",\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre> </li> </ol>"},{"location":"learn/samples/message-routing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your machine.</li> </ul>"},{"location":"learn/samples/message-routing/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project","text":"<ol> <li>Click on the BI icon on the sidebar.</li> <li>Click on the Create New Integration button.</li> <li>Enter the project name as <code>MessageRouting</code>.</li> <li>Select Project Directory and click on the Select Location button.</li> <li>Click on the Create New Integration button to create the integration project.</li> </ol>"},{"location":"learn/samples/message-routing/#step-2-create-an-http-service","title":"Step 2: Create an HTTP service","text":"<ol> <li>In the design view, click on the Add Artifact button.</li> <li>Select HTTP Service under the Integration as API category.</li> <li>Select the + Listeners option from the Listeners dropdown to add a new listener.</li> <li>Enter the listener name as <code>healthListener</code>, <code>8290</code> as the port and click on the Save button. </li> <li>Add the service base path as <code>/healthcare</code> and select the Design from Scratch option as the The contract of the service.</li> <li>Click on the Create button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/samples/message-routing/#step-3-define-types","title":"Step 3: Define types","text":"<ol> <li>Click on the Add Artifacts button and select Type in the Other Artifacts section.</li> <li>Click on + Add Type to add a new type</li> <li>Add the Record Name as <code>ReservationRequest</code> and paste the following JSON payload. Select Make Separate Record Definitions and click on the Import button.    <pre><code> {\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"hospital_id\": \"grandoak\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre></li> <li>Repeat the above steps to add a new type named <code>ReservationResponse</code> with the following JSON payload.     <pre><code>{\n\"appointmentNumber\": 8,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patientName\": \"John Doe\",\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> <li> <p>The final Type diagram will look like below.     </p> <p></p> </li> </ol>"},{"location":"learn/samples/message-routing/#step-4-add-connectors","title":"Step 4: Add connectors","text":"<ol> <li>Navigate to design view and click on the Add Artifacts button and select Connection in the Other Artifacts section.</li> <li>Search and select the HTTP Client connector.</li> <li>Enter the connector name as <code>grandOakEp</code>, URL as <code>\"http://localhost:9090/grandoak/categories\"</code>.</li> <li> <p>Click on the Save button to create the new connector with the specified configurations.</p> <p> 5. Repeat the above steps to add connectors for the <code>clemency</code> and <code>pinevalley</code> hospitals with the following configurations.</p> Connector Name URL clemencyEp <code>\"http://localhost:9090/clemency/categories\"</code> pineValleyEp <code>\"http://localhost:9090/pinevalley/categories\"</code> </li> <li> <p>The final connectors will look like below.     </p> <p></p> </li> </ol> HTTP Connector<p>To learn more about HTTP client, see Ballerina HTTP Client. See supported advanced client configurations in the HTTP Client Configurations.</p>"},{"location":"learn/samples/message-routing/#step-5-add-a-resource-method","title":"Step 5: Add a resource method","text":"<ol> <li>The service will have a default resource named <code>greeting</code> with the GET method. Click on three dots appear in front of the <code>/healthCare</code> service resource and select Edit from menu.</li> <li>Then click the edit button in front of <code>/greeting</code> resource to edit the resource.</li> <li>Change the resource HTTP method to POST.</li> <li>Change the resource name as <code>categories/[string category]/reserve</code>.</li> <li>Add a payload parameter named <code>reservation</code> to the resource of type <code>ReservationRequest</code>.</li> <li>Change the 201 response return type to <code>ReservationResponse</code>.</li> <li>Add a new response of type HttpNotFound under the responses.</li> <li> <p>Click on the Save button to update the resource with the specified configurations.</p> <p></p> </li> </ol>"},{"location":"learn/samples/message-routing/#step-6-add-the-routing-logic","title":"Step 6: Add the routing logic","text":"<ol> <li>Click on the <code>categories/[string category]/reserve</code> resource to navigate to the resource implementation designer view.</li> <li>Delete the default <code>Return</code> action from the resource.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select Declare Variable from the node panel on the left. This variable will be used to store the request payload for the hospital service.</li> <li>Change the variable name to <code>hospitalRequset</code>, type as <code>json</code> and expression as below and click Save.     <pre><code>{\n    patient: reservation.patient.toJson(),\n    doctor: reservation.doctor,\n    hospital: reservation.hospital,\n    appointment_date: reservation.appointment_date\n}\n</code></pre></li> <li> <p>Add If from the node panel after <code>hospitalRequest</code> variable. Enter the conditions as If Else If blocks as below for each hospital.</p> <ul> <li>grandOak -&gt; <code>reservation.hospital_id == \"grandoak\"</code></li> <li>clemency -&gt; <code>reservation.hospital_id == \"clemency\"</code></li> <li>pineValley -&gt; <code>reservation.hospital_id == \"pinevalley\"</code> </li> </ul> <p></p> </li> <li> <p>Select the <code>grandOakEP</code> condition true path \u2795 sign and select grandOakEP connector from the node panel.</p> <p></p> </li> <li> <p>Select post from the dropdown. Then, fill in the required fields with the values given below and click Save.</p> Field Value Variable Name <code>oakEPResponse</code> Variable Type <code>ReservationResponse</code> Resource Path <code>string `/${category}/reserve`</code> message <code>hospitalRequset</code> </li> <li> <p>Click on the \u2795 sign again and select Return from the node panel. Select the <code>oakEPResponse</code> variable from the dropdown and click Save.</p> <p></p> </li> <li> <p>The steps above will add the routing logic for the <code>grandoak</code> hospital. A variable named <code>oakEPResponse</code> will store the response from the <code>grandoak</code> hospital service. The response will be returned to the client.</p> </li> <li> <p>Repeat the 7,8,9 steps for the <code>clemency</code> and <code>pinevalley</code> hospitals with the following configurations.</p> <p>clemency:</p> Field Value Variable Name <code>clemencyEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>string `/${category}/reserve`</code> message <code>hospitalRequset</code> <p>pinevalley:</p> Field Value Variable Name <code>pineValleyEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>string `/${category}/reserve`</code> message <code>hospitalRequset</code> </li> <li> <p>For the else condition, click on the <code>If</code> condition <code>Else</code> path \u2795 sign and add a Return from the node panel. Enter <code>http:NOT_FOUND</code> as the value and click Save.             </p> </li> <li> <p>The final design will look like below.             </p> <p></p> </li> </ol>"},{"location":"learn/samples/message-routing/#step-7-run-the-service","title":"Step 7: Run the service","text":"<ol> <li>Start the backend service by executing the following command in a terminal.     <pre><code>docker run --name hospital-backend -p 9090:9090 -d anuruddhal/kola-hospital-backend\n</code></pre></li> <li>Click on the Run on the run button in the top right corner to run the service.</li> <li>The service will start and the service will be available at <code>http://localhost:8290/healthcare/categories/[category]/reserve</code>.</li> <li>Click on the Try it button to open the embedded HTTP client.</li> <li> <p>Replace the {category} with <code>surgery</code> in the resource path and enter the following JSON payload in the request body and click on the \u25b6\ufe0f button to send the request.     <pre><code>{\n\"patient\":{\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital_id\": \"grandoak\",\n\"hospital\": \"grand oak community hospital\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre> </p> </li> <li> <p>The response will be similar to the following.    <pre><code>{\n\"appointmentNumber\": 1,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></p> </li> <li>Optionally, you can test the service using curl command as below.    <pre><code> curl -X POST \"http://localhost:8290/healthcare/categories/surgery/reserve\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n \"patient\": {\n \"name\": \"John Doe\",\n \"dob\": \"1940-03-19\",\n \"ssn\": \"234-23-525\",\n \"address\": \"California\",\n \"phone\": \"8770586755\",\n \"email\": \"johndoe@gmail.com\"\n },\n \"doctor\": \"thomas collins\",\n \"hospital_id\": \"grandoak\",\n \"hospital\": \"grand oak community hospital\",\n \"appointment_date\": \"2023-10-02\"\n }'\n</code></pre></li> </ol>"},{"location":"learn/samples/message-routing/#step-8-stop-the-integration","title":"Step 8: Stop the integration","text":"<ol> <li>Click on the Stop button to stop the integration.</li> <li>Stop the hospital backend server by running the following command:    <pre><code>docker stop hospital-backend\n</code></pre></li> </ol>"},{"location":"learn/samples/message-transformation/","title":"Message Transformation","text":""},{"location":"learn/samples/message-transformation/#overview","title":"Overview","text":"<p>This guide explains how to create a simple integration to convert a JSON payload to an XML payload using WSO2 Integrator: BI. An HTTP service with a single resource (<code>toXml</code>) will be created to accept a JSON payload and return the XML representation of the payload.</p> <p></p>"},{"location":"learn/samples/message-transformation/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project","text":"<ol> <li>Click on the BI icon on the sidebar.</li> <li>Click on the Create Integration button.</li> <li>Enter the project name as <code>JsonToXml</code>.</li> <li>Select project directory location by clicking on the Select Location button.</li> <li> <p>Click on the Create Integration button to create the integration project.</p> <p></p> </li> </ol>"},{"location":"learn/samples/message-transformation/#step-2-create-a-http-service","title":"Step 2: Create a HTTP service","text":"<ol> <li>In the design view, click on the Add Artifact button.</li> <li>Select HTTP Service under the Integration as API category.</li> <li>Select the Create and use the default HTTP listener option from the Listener dropdown.</li> <li>Select Design from Scratch option as the The contract of the service.</li> <li>Specify the Service base path as <code>/convert</code>.</li> <li>Click on the Create button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/samples/message-transformation/#step-3-update-the-resource-method","title":"Step 3: Update the resource method","text":"<ol> <li>The service will have a default resource named <code>greeting</code> with the GET method. Click on three dots appear in front of the <code>/convert</code> service resource and select Edit from menu.</li> <li> <p>Then click the edit button in front of <code>/greeting</code> resource.  </p> <p></p> </li> <li> <p>Change the resource HTTP method to POST.</p> </li> <li>Change the resource name as <code>toXml</code>.</li> <li>Add a payload parameter named <code>input</code> to the resource of type <code>json</code>. </li> <li>Change the 201 response return type to <code>xml</code>.</li> <li> <p>Click on the Save button to update the resource with the specified configurations.</p> <p></p> </li> </ol> <p>Resource Method</p> <p>To learn more about resources, see Ballerina Resources.</p>"},{"location":"learn/samples/message-transformation/#step-4-add-the-transformation-logic","title":"Step 4: Add the transformation logic","text":"<ol> <li>Click on the <code>toXml</code> resource to navigate to the resource implementation designer view.</li> <li>Delete the default <code>Return</code> action from the resource.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select Function Call from the node panel.</li> <li>Search for <code>json to xml</code> and select the fromJson function from the suggestions.</li> <li>Change the Variable Name to <code>xmlResult</code>, Variable Type as <code>xml</code> and JsonValue to <code>input</code>.</li> <li> <p>Click on the Save button to add the function call to the resource.</p> <p></p> </li> <li> <p>Add a new node after the <code>fromJson</code> function call and select Return from the node panel.</p> </li> <li> <p>Select the <code>xmlResult</code> variable from the dropdown and click Save.</p> <p></p> </li> </ol> <p>JSON to XML Conversion</p> <p>To learn more about json to xml conversion, see Ballerina JSON to XML conversion.</p>"},{"location":"learn/samples/message-transformation/#step-5-run-the-integration","title":"Step 5: Run the integration","text":"<ol> <li>Click on the Run button in the top-right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:9090/convert</code>.</li> <li>Click on the Try it button to open the embedded HTTP client.</li> <li>Enter the JSON payload in the request body and click on the \u25b6\ufe0f button to send the request.     <pre><code>{\n\"name\": \"John\",\n\"age\": 30,\n\"car\": \"Honda\"\n}\n</code></pre></li> <li> <p>The response will be an XML representation of the JSON payload. <code>&lt;root&gt;         &lt;name&gt;John&lt;/name&gt;         &lt;age&gt;30&lt;/age&gt;         &lt;car&gt;Honda&lt;/car&gt;     &lt;/root&gt;</code> </p> </li> <li> <p>Additionally, the service can be tested using tools like Postman or curl by sending a POST request with a JSON payload to the service endpoint.    <pre><code>curl -X POST \"http://localhost:9090/convert/toXml\" -H \"Content-Type: application/json\" -d '{\"name\":\"John\", \"age\":30, \"car\":\"Honda\"}'\n</code></pre></p> </li> </ol>"},{"location":"learn/samples/service-orchestration/","title":"Service Orchestration","text":""},{"location":"learn/samples/service-orchestration/#overview","title":"Overview","text":"<p>In this tutorial, you\u2019ll create a service to process appointment requests for hospitals. The service will call multiple backend services sequentially, using data from each call to inform the next. This approach integrates several services into one, known as service orchestration. To implement this, you\u2019ll build a REST service with a single resource in WSO2 Integrator: BI extension and then run the service. The resource will receive user requests, make the necessary backend calls, and respond with the appointment details.</p> <p>The flow is as follows.</p> <ol> <li>The user sends an appointment request to the service.     <pre><code>  {\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\",\n\"cardNo\": \"7844481124110331\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital_id\": \"grandoaks\",\n\"hospital\": \"grand oak community hospital\",\n\"appointment_date\": \"2024-11-06\"\n}\n</code></pre></li> <li>Extract necessary details from the request (e.g., hospital, patient, doctor, etc.) and make a call to the hospital backend service to request an appointment. A response similar to the following will be returned from the hospital backend service on success.      <pre><code>  {\n\"appointmentNumber\": 1,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000\n},\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> <li>Use the hospital ID and the appointment number and call the hospital backend service to retrieve the fee for the appointment. The response will be similar to the following.     <pre><code>  {\n\"patientName\": \"John Doe\",\n\"doctorName\": \"thomas collins\",\n\"actualFee\": \"7000\"\n}\n</code></pre></li> <li>Finally, call the payment backend service to make the payment and retrieve the reservation status.    <pre><code>  {\n\"appointmentNo\": 2,\n\"doctorName\": \"thomas collins\",\n\"patient\": \"John Doe\",\n\"actualFee\": 7000,\n\"discount\": 20,\n\"discounted\": 5600.0,\n\"paymentID\": \"f130e2ed-a34e-4434-9b40-6a0a8054ee6b\",\n\"status\": \"settled\"\n}\n</code></pre></li> </ol>"},{"location":"learn/samples/service-orchestration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on the machine.</li> </ul>"},{"location":"learn/samples/service-orchestration/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project","text":"<ol> <li>Click on the BI icon on the sidebar.</li> <li>Click on the Create New Integration button.</li> <li>Enter the project name as <code>ServiceOrchestration</code>.</li> <li>Select project directory location by clicking on the Select Location button.</li> <li>Click on the Create New Integration button to create the integration project.</li> </ol>"},{"location":"learn/samples/service-orchestration/#step-2-create-an-http-service","title":"Step 2: Create an HTTP service","text":"<ol> <li>In the design view, click on the Add Artifact button.</li> <li>Select HTTP Service under the Integration as API category.</li> <li>Select the + Listeners option from the Listeners dropdown to add a new listener.</li> <li>Enter the listener name as <code>healthListener</code>, <code>8290</code> as the port and click on the Save button.</li> <li>Add the service base path as <code>/healthcare</code> and select the Design from Scratch option as the The contract of the service.</li> <li> <p>Click on the Create button to create the new service with the specified configurations.</p> <p></p> </li> </ol>"},{"location":"learn/samples/service-orchestration/#step-3-define-types","title":"Step 3: Define types","text":"<ol> <li> <p>Click on the Add Artifacts button and select Type in the Other Artifacts section.</p> <p></p> </li> <li> <p>Click on + Add Type to add a new type  Generate record types corresponding to the response from the hospital backend service by providing a sample of the expected JSON payload. The values are given below.</p> Type Name Sample JSON value Make Separate Record Definition Record ReservationRequest <code>{\"patient\":{\"name\":\"John Doe\",\"dob\":\"1940-03-19\",\"ssn\":\"234-23-525\",\"address\":\"California\",\"phone\":\"8770586755\",\"email\":\"johndoe@gmail.com\",\"cardNo\":\"7844481124110331\"},\"doctor\":\"thomas collins\",\"hospital_id\":\"grandoaks\",\"hospital\":\"grand oak community hospital\",\"appointment_date\":\"2024-11-06\"}</code> \u2611\ufe0f Record ReservationStatus <code>{\"appointmentNo\":1, \"doctorName\":\"thomas collins\", \"patient\":\"John Doe\", \"actualFee\":7000.0, \"discount\":20, \"discounted\":5600.0, \"paymentID\":\"e560ea82-1c42-4972-a471-af5c1ad4995f\", \"status\":\"settled\"}</code> \u2611\ufe0f Record Appointment <code>{\"appointmentNumber\":12345,\"doctor\":{\"name\":\"Dr. Alice Carter\",\"hospital\":\"Green Valley Hospital\",\"category\":\"Cardiology\",\"availability\":\"Mon-Fri, 9 AM - 5 PM\",\"fee\":200},\"patientName\":\"Emma Johnson\",\"hospital\":\"Green Valley Hospital\",\"confirmed\":true,\"appointmentDate\":\"2024-11-20T10:00:00\"}</code> \u2611\ufe0f Record Fee <code>{\"patientName\":\"Emma Johnson\",\"doctorName\":\"Dr. Alice Carter\",\"actualFee\":\"150.00\"}</code> </li> <li> <p>The final types will look like the following.   </p> <p></p> </li> </ol>"},{"location":"learn/samples/service-orchestration/#step-4-add-connections","title":"Step 4: Add connections","text":"<ol> <li>Navigate to design view and click on the Add Artifacts button and select Connection in the Other Artifacts section.</li> <li>Search and select the HTTP Client connector.</li> <li> <p>Enter the connector name as <code>hospitalEp</code>, URL as <code>http://localhost:9090</code> and click on the Save button.</p> <p></p> </li> <li> <p>Add another connector for the payment backend service with the URL <code>http://localhost:9090/healthcare/payments</code> and the name <code>paymentEp</code>.    </p> <p></p> </li> </ol> HTTP Connector<p>To learn more about HTTP client, see Ballerina HTTP Client. See supported client configurations in the HTTP Client Configurations.</p>"},{"location":"learn/samples/service-orchestration/#step-5-design-the-resource","title":"Step 5: Design the resource","text":"<ol> <li>The service will have a default resource named <code>greeting</code> with the GET method. Click on three dots appear in front of the <code>/healthCare</code> service resource and select Edit from menu.</li> <li>Change the resource HTTP method to POST.</li> <li>Change the resource name as <code>categories/[string category]/reserve</code>.</li> <li>Add a payload parameter named <code>reservation</code> to the resource of type <code>ReservationRequest</code>.</li> <li>Change the 201 response return type to <code>ReservationStatus</code>.</li> <li> <p>Add a new response of type HttpNotFound under the responses.   </p> <p></p> </li> <li> <p>Click on the Save button to save the resource.   </p> <p></p> </li> </ol>"},{"location":"learn/samples/service-orchestration/#step-6-make-the-appointment-request","title":"Step 6: Make the appointment request","text":"<ol> <li>Click on the <code>categories/[string category]/reserve</code> resource to navigate to the resource implementation designer view.</li> <li>Delete the default <code>Return</code> action from the resource.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select Declare Variable from the node panel on the left. This variable will be used to store the request payload for the hospital service.</li> <li>Change the variable name to <code>hospitalRequest</code>, type as <code>json</code> and expression as below.     <pre><code>     {\n     patient:{\n         name: reservation.patient.name,\n         dob: reservation.patient.dob,\n         ssn: reservation.patient.ssn,\n         address: reservation.patient.address,\n         phone: reservation.patient.phone,\n         email: reservation.patient.email\n      },\n     doctor: reservation.doctor,\n     hospital: reservation.hospital,\n     appointment_date: reservation.appointment_date\n    }\n</code></pre></li> <li> <p>Click on the Save button to add the variable.   </p> <p></p> </li> <li> <p>Click \u2795 sign and select hospitalServicesEp connector from the node panel and select post from the dropdown. Then, fill in the required fields with the values given below and click Save.</p> Field Value Variable Name <code>appointment</code> Variable Type <code>Appointment</code> Resource Path <code>string `/${reservation.hospital_id}/categories/${category}/reserve`</code> message <code>hospitalRequest</code> </li> <li> <p>The connector action will look like the following.   </p> <p> </p> </li> </ol>"},{"location":"learn/samples/service-orchestration/#step-7-get-the-fee","title":"Step 7: Get the fee","text":"<ol> <li> <p>Declare an int  variable named <code>appointmentNumber</code> with expression <code>appointment.appointmentNumber</code> after the hospital service request.  </p> <p> </p> </li> <li> <p>Let's add another connector invocation to get the fee for the appointment. Click on the \u2795 sign and select hospitalServicesEp connector from the node panel.  </p> </li> <li> <p>Select get from the dropdown. Then, fill in the required fields with the values given below and click Save.</p> Field Value Variable Name <code>fee</code> Variable Type <code>Fee</code> Resource Path <code>string `/${reservation.hospital_id}/categories/appointments/${appointmentNumber}/fee`</code> <p></p> </li> </ol>"},{"location":"learn/samples/service-orchestration/#step-8-make-the-payment","title":"Step 8: Make the payment","text":"<ol> <li>Declare a decimal type variable named <code>actualFee</code> with expression <code>check decimal:fromString(fee.actualFee)</code> after the fee request. </li> <li> <p>Create another new to prepare the payment request. Click on the \u2795 sign and select Declare Variable from the node panel. Add a variable named <code>paymentRequest</code> with the type json and expression as below.    <pre><code>{\n  appointmentNumber: appointmentNumber,\n  doctor: appointment.doctor.toJson(),\n  patient: check hospitalRequest.patient,\n  fee: actualFee,\n  confirmed: false,\n  card_number: reservation.patient.cardNo\n }\n</code></pre> </p> </li> <li> <p>Let's add another connector action to make the payment. Click on the \u2795 sign and select paymentEP connector from the node panel. Select post from the dropdown.   </p> <p></p> </li> <li> <p>Then, fill in the required fields with the values given below and click Save.</p> Field Value Variable Name <code>status</code> Variable Type <code>ReservationStatus</code> Resource Path <code>\"/\"</code> message <code>paymentRequest</code> </li> <li> <p>Click on the \u2795 sign and select Return from the node panel. Add the <code>status</code> variable to the return node.</p> </li> <li> <p>The final integration will look like the following.   </p> <p></p> </li> </ol>"},{"location":"learn/samples/service-orchestration/#step-9-run-the-service","title":"Step 9: Run the service","text":"<ol> <li>Click on the Run button to start the service.</li> <li>Start the backend service by executing the following command in a terminal.     <pre><code>docker run --name hospital-backend -p 9090:9090 -d anuruddhal/kola-hospital-backend\n</code></pre></li> <li>Click on the Run  on the run button (\u25b6\ufe0f) in the top right corner to run the service.</li> <li>The service will start and the service will be available at <code>http://localhost:8290/healthcare/categories/[category]/reserve</code>.</li> <li>Click on the Try it button to open the embedded HTTP client.</li> <li>Replace the {category} with <code>surgery</code> in the resource path and enter the following JSON payload in the request body and click on the \u25b6\ufe0f button to send the request.     <pre><code>    {\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\",\n\"cardNo\": \"7844481124110331\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital_id\": \"grandoak\",\n\"hospital\": \"grand oak community hospital\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre></li> <li> <p>The response will be similar to the following.    <pre><code> {\n\"appointmentNo\": 1,\n\"doctorName\": \"thomas collins\",\n\"patient\": \"John Doe\",\n\"actualFee\": 7000,\n\"discount\": 20,\n\"discounted\": 5600,\n\"paymentID\": \"b219c4ad-5365-4a22-ae35-048bb8e570e7\",\n\"status\": \"settled\"\n}\n</code></pre></p> <p> </p> </li> <li> <p>You can also test the service using the curl command.    <pre><code> curl -X POST \"http://localhost:8290/healthcare/categories/surgery/reserve\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n   \"patient\": {\n     \"name\": \"John Doe\",\n     \"dob\": \"1940-03-19\",\n     \"ssn\": \"234-23-525\",\n     \"address\": \"California\",\n     \"phone\": \"8770586755\",\n     \"email\": \"johndoe@gmail.com\",\n     \"cardNo\": \"7844481124110331\"\n   },\n   \"doctor\": \"thomas collins\",\n   \"hospital_id\": \"grandoak\",\n   \"hospital\": \"grand oak community hospital\",\n   \"appointment_date\": \"2023-10-02\"\n }'\n</code></pre></p> </li> </ol>"},{"location":"learn/samples/service-orchestration/#step-10-stop-the-integration","title":"Step 10: Stop the integration","text":"<ol> <li>Click on the Stop button to stop the integration or press <code>Shift</code> + <code>F5</code>.</li> <li>Stop the hospital backend server by running the following command:    <pre><code>docker stop hospital-backend\n</code></pre></li> </ol>"},{"location":"learn/tools/mulesoft-migration-tool/","title":"MuleSoft Migration Tool","text":"<p>This guide explains how to use the migrate-mule tool to convert  MuleSoft applications into Ballerina packages compatible with the WSO2 Integrator: BI.</p>"},{"location":"learn/tools/mulesoft-migration-tool/#tool-overview","title":"Tool overview","text":"<p>The tool accepts either a MuleSoft project directory or a standalone Mule <code>.xml</code> configuration file as input and generates an equivalent Ballerina package that can be opened in WSO2 Integrator: BI.</p>"},{"location":"learn/tools/mulesoft-migration-tool/#installation","title":"Installation","text":"<p>To install the <code>migrate-mule</code> tool from Ballerina Central, run the following command: <pre><code>$ bal tool pull migrate-mule\n</code></pre></p>"},{"location":"learn/tools/mulesoft-migration-tool/#implementation","title":"Implementation","text":"<p>Follow the steps below to migrate your MuleSoft application.</p>"},{"location":"learn/tools/mulesoft-migration-tool/#step-1-prepare-your-input","title":"Step 1: Prepare your input","text":"<p>You can migrate either a complete MuleSoft project or a standalone Mule <code>.xml</code> configuration file:</p> <ul> <li>For MuleSoft projects: Ensure your project follows the standard structure with configuration XML files located under <code>muleProjectPath/src/main/app</code></li> <li>For standalone XML files: You can directly use any valid Mule XML configuration file.</li> </ul>"},{"location":"learn/tools/mulesoft-migration-tool/#step-2-run-the-migration-tool","title":"Step 2: Run the migration tool","text":"<p>Use one of the following commands based on your needs:</p> <ol> <li> <p>To convert a MuleSoft project with default output location:</p> <pre><code>$ bal migrate-mule /path/to/mule-project\n</code></pre> <p>This will create a Ballerina package inside <code>/path/to/mule-project</code> directory.</p> </li> <li> <p>To convert a MuleSoft project with a custom output location:</p> <p><pre><code>$ bal migrate-mule /path/to/mule-project --out /path/to/output-dir\n</code></pre> This will create a Ballerina package at <code>/path/to/output-dir</code>.</p> </li> <li> <p>To convert a standalone Mule XML file:</p> <p><pre><code>$ bal migrate-mule /path/to/mule-flow.xml\n</code></pre> This will create a Ballerina package in the same directory as the input XML file.</p> </li> <li> <p>To convert a standalone XML file with a custom output location:</p> <p><pre><code>$ bal migrate-mule /path/to/mule-flow.xml --out /path/to/output-dir\n</code></pre> This will create a Ballerina package at <code>/path/to/output-dir</code>.</p> </li> </ol>"},{"location":"learn/tools/mulesoft-migration-tool/#step-3-review-migration-output","title":"Step 3: Review migration output","text":"<ol> <li> <p>For a MuleSoft project directory input:</p> <ul> <li>A new Ballerina package is created with the same name as the input project directory, appended with a   <code>-ballerina</code> suffix.</li> <li>Each <code>.xml</code> file within <code>src/main/app</code> is converted to a corresponding <code>.bal</code> file with the same name.</li> <li>Directory structure within <code>src/main/app</code> is reflected in the corresponding <code>.bal</code> file name.</li> </ul> </li> <li> <p>For a standalone XML file input:</p> <ul> <li>A new Ballerina package is created with the same name as the XML file, appended with a <code>-ballerina</code> suffix.</li> <li>A new <code>.bal</code> file is created with the same name as the input file but with a <code>.bal</code> extension.</li> </ul> </li> </ol>"},{"location":"learn/tools/mulesoft-migration-tool/#step-4-review-the-migration-summary","title":"Step 4: Review the migration summary","text":"<p>The tool displays the migration progress in command line in two stages:</p> <ol> <li>DataWeave Conversion Percentage \u2013 Indicates the conversion success rate of all DataWeave scripts.</li> <li>Overall Project Conversion Percentage \u2013 Represents the combined conversion rate based on both component-level     and DataWeave conversions.</li> </ol> <p>A detailed report is generated as <code>migration_summary.html</code> in the root of the newly created Ballerina package.</p>"},{"location":"learn/tools/mulesoft-migration-tool/#step-5-address-the-todo-items","title":"Step 5: Address the TODO items","text":"<p>During conversion, if there are any unsupported Mule XML tags, they are included in the generated Ballerina code as  TODO comments. You may need to do the conversion for them manually.</p> <pre><code>public function endpoint(Context ctx) returns http:Response|error {\n\n    // TODO: UNSUPPORTED MULE BLOCK ENCOUNTERED. MANUAL CONVERSION REQUIRED.\n    // ------------------------------------------------------------------------\n    // &lt;db:select-unsupported config-ref=\"MySQL_Configuration\" xmlns:doc=\"http://www.mulesoft.org/schema/mule/documentation\" doc:name=\"Database\" xmlns:db=\"http://www.mulesoft.org/schema/mule/db\"&gt;\n    //             &lt;db:parameterized-query&gt;&lt;![CDATA[SELECT * from users;]]&gt;&lt;/db:parameterized-query&gt;\n    //         &lt;/db:select-unsupported&gt;\n    // ------------------------------------------------------------------------\n\n    log:printInfo(string `Users details: ${ctx.payload.toString()}`);\n\n    ctx.inboundProperties.response.setPayload(ctx.payload);\n    return ctx.inboundProperties.response;\n}\n</code></pre>"},{"location":"learn/tools/mulesoft-migration-tool/#example-converting-a-standalone-mule-xml-file","title":"Example: Converting a standalone Mule XML file","text":"<p>Let's walk through an example of migrating a MuleSoft standalone sample <code>.xml</code> configuration to Ballerina.</p> <p>Here's a sample MuleSoft XML file (<code>users-database-query.xml</code>) that gets invoked via an HTTP listener and performs a database operation:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;mule xmlns:db=\"http://www.mulesoft.org/schema/mule/db\" xmlns:json=\"http://www.mulesoft.org/schema/mule/json\" xmlns:tracking=\"http://www.mulesoft.org/schema/mule/ee/tracking\" xmlns:http=\"http://www.mulesoft.org/schema/mule/http\" xmlns=\"http://www.mulesoft.org/schema/mule/core\" xmlns:doc=\"http://www.mulesoft.org/schema/mule/documentation\"\nxmlns:spring=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd\nhttp://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd\nhttp://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd\nhttp://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd\nhttp://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd\nhttp://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd\"&gt;\n&lt;http:listener-config name=\"config\" host=\"0.0.0.0\" port=\"8081\"  doc:name=\"HTTP Listener Configuration\" basePath=\"demo\"/&gt;\n&lt;db:mysql-config name=\"MySQL_Configuration\" host=\"localhost\" port=\"3306\" user=\"root\" password=\"admin123\" database=\"test_db\" doc:name=\"MySQL Configuration\"/&gt;\n&lt;flow name=\"demoFlow\"&gt;\n&lt;http:listener config-ref=\"config\" path=\"/users\" allowedMethods=\"GET\" doc:name=\"HTTP\"/&gt;\n&lt;db:select config-ref=\"MySQL_Configuration\" doc:name=\"Database\"&gt;\n&lt;db:parameterized-query&gt;&lt;![CDATA[SELECT * FROM users;]]&gt;&lt;/db:parameterized-query&gt;\n&lt;/db:select&gt;\n&lt;/flow&gt;\n&lt;/mule&gt;\n</code></pre>"},{"location":"learn/tools/mulesoft-migration-tool/#run-the-migration-tool","title":"Run the Migration Tool","text":"<p>To convert the Mule XML file using the <code>migrate-mule</code> tool execute the following command:</p> <pre><code>$ bal migrate-mule /path/to/users-database-query.xml\n</code></pre>"},{"location":"learn/tools/mulesoft-migration-tool/#examine-the-generated-ballerina-code","title":"Examine the Generated Ballerina Code","text":"<p>The tool generates a Ballerina package named <code>users-database-query-ballerina</code> inside <code>/path/to</code> with the following  structure:</p> <pre><code>users-database-query-ballerina/\n\u251c\u2500\u2500 Ballerina.toml\n\u251c\u2500\u2500 internal-types.bal\n\u251c\u2500\u2500 main.bal\n\u251c\u2500\u2500 users-database-query.bal\n\u2514\u2500\u2500 migration_summary.html\n</code></pre> <p>The <code>users-database-query.bal</code> file contains the Ballerina translation of the original MuleSoft XML configuration. It sets up an HTTP service that listens on port 8081 and responds to <code>GET</code> <code>/users</code> requests by querying the MySQL database and returning the results as the response payload.</p> <p><code>users-database-query.bal</code> will look like this.</p> <pre><code>import ballerina/http;\nimport ballerina/sql;\nimport ballerinax/mysql;\nimport ballerinax/mysql.driver as _;\n\npublic type Record record {\n};\n\nmysql:Client MySQL_Configuration = check new (\"localhost\", \"root\", \"admin123\", \"test_db\", 3306);\npublic listener http:Listener config = new (8081);\n\nservice /demo on config {\n    Context ctx;\n\n    function init() {\n        self.ctx = {payload: (), inboundProperties: {response: new, request: new, uriParams: {}}};\n    }\n\n    resource function get users(http:Request request) returns http:Response|error {\n        self.ctx.inboundProperties.request = request;\n        return invokeEndPoint0(self.ctx);\n    }\n}\n\npublic function invokeEndPoint0(Context ctx) returns http:Response|error {\n\n    // database operation\n    sql:ParameterizedQuery dbQuery0 = `SELECT * FROM users;`;\n    stream&lt;Record, sql:Error?&gt; dbStream0 = MySQL_Configuration-&gt;query(dbQuery0);\n    Record[] dbSelect0 = check from Record _iterator_ in dbStream0\n        select _iterator_;\n    ctx.payload = dbSelect0;\n\n    ctx.inboundProperties.response.setPayload(ctx.payload);\n    return ctx.inboundProperties.response;\n}\n</code></pre> <p>You can check out the <code>migration_summary.html</code> for overview of the migration.</p> <p>This example demonstrates how to migrate a MuleSoft application that performs database operations to Ballerina using the migration tool. The migration tool automatically converts the database configuration and SQL query to the equivalent Ballerina code using the <code>ballerinax/mysql</code> module.</p>"},{"location":"learn/tools/mulesoft-migration-tool/#supported-mulesoft-features","title":"Supported MuleSoft features","text":""},{"location":"learn/tools/mulesoft-migration-tool/#mulesoft-components","title":"MuleSoft components:","text":"<p>The migration tool currently supports converting the following MuleSoft components:</p> <ul> <li>Async</li> <li>Catch Exception Strategy</li> <li>Choice</li> <li>Choice Exception Strategy</li> <li>Database Connector</li> <li>Expression Component</li> <li>Flow</li> <li>Http Listener</li> <li>Http Request</li> <li>Logger</li> <li>Message Enricher</li> <li>Object To Json</li> <li>Object To String</li> <li>Reference Exception Strategy</li> <li>Session Variable</li> <li>Set Payload</li> <li>Sub Flow</li> <li>Transform Message</li> <li>Variable</li> <li>Vm Connector</li> </ul>"},{"location":"learn/tools/mulesoft-migration-tool/#dataweave-expressions","title":"DataWeave expressions:","text":"<p>The migration tool currently supports the following DataWeave expressions:</p> <ul> <li>Concat Array Expression</li> <li>Concat Object Expression</li> <li>Concat String Expression</li> <li>Date Type Expression</li> <li>Filter Value Identifier Expression</li> <li>Lower Expression</li> <li>Map Combination Expression</li> <li>Map Index Identifier Expression</li> <li>Map Index Identifier Only Expression</li> <li>Map Value Identifier Expression</li> <li>Map With Parameters Expression</li> <li>Replace With Expression</li> <li>Single Selector Expression</li> <li>Sizeof Expression</li> <li>String Return Expression</li> <li>Type Coercion Date To Number Expression</li> <li>Type Coercion Format Expression</li> <li>Type Coercion Number Expression</li> <li>Type Coercion String Expression</li> <li>Type Coercion To Date Expression</li> <li>Upper Expression</li> <li>When Otherwise Expression</li> <li>When Otherwise Nested Expression</li> </ul>"},{"location":"learn/tools/mulesoft-migration-tool/#limitations","title":"Limitations","text":"<ul> <li>Currently supports Mule 3.x only. Support for Mule 4.x is planned for future releases.</li> <li>Some moderate to advanced MuleSoft features may require manual adjustments after migration.</li> </ul> Disclaimer<p>MuleSoft: \"MuleSoft\", Mulesoft's \"Anypoint Platform\", and \"DataWeave\" are trademarks of MuleSoft LLC, a Salesforce company. All product, company names and marks mentioned herein are the property of their respective owners and are mentioned for identification purposes only.</p>"},{"location":"learn/tools/tibco-businessworks-migration-tool/","title":"TIBCO BusinessWorks Migration Tool","text":"<p>This guide explains how to use the migrate-tibco tool to convert TIBCO BusinessWorks integrations into Ballerina packages compatible with the WSO2 Integrator: BI.</p>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#tool-overview","title":"Tool overview","text":"<p>The tool accepts either a BusinessWorks project directory or a standalone process file as input and generates an equivalent Ballerina package that can be opened in the BI.</p>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#installation","title":"Installation","text":"<p>Execute the command below to pull the <code>migrate-tibco</code> tool from Ballerina Central <pre><code>$ bal tool pull migrate-tibco\n</code></pre></p>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#usage","title":"Usage","text":""},{"location":"learn/tools/tibco-businessworks-migration-tool/#command-syntax","title":"Command syntax","text":"<pre><code>$ bal migrate-tibco &lt;source-project-directory-or-file&gt; [-o|--out &lt;output-directory&gt;]\n</code></pre>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#parameters","title":"Parameters","text":"<ul> <li>source-project-directory-or-file - Required. The TIBCO BusinessWorks project directory or process file needs to be migrated.</li> <li>-o or --out - Optional. The directory where the new Ballerina package will be created. If the directory does not exist, the tool will create it for you. If not provided,</li> <li>If source-project-directory-or-file is a directory it will create new directory named <code>${source-project-directory-or-file}_converted</code> in the root of source-project-directory-or-file.</li> <li>if source-project-directory-or-file is a file, it will create a new directory named <code>${root}_converted</code> in the parent of the root directory where root is the directory containing the given file.</li> </ul>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#example","title":"Example","text":""},{"location":"learn/tools/tibco-businessworks-migration-tool/#step-1-pull-the-migration-tool","title":"Step 1: Pull the migration tool","text":"<ol> <li> <p>Pull <code>migrate-tibco</code> tool for Ballerina Central using the following command.</p> <pre><code>$ bal tool pull migrate-tibco\n</code></pre> </li> </ol>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#step-2-run-the-migration-tool","title":"Step 2: Run the migration tool","text":"<ol> <li> <p>Create new directory named <code>tibco-hello-world</code> with following two files.</p> helloworld.process<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;pd:ProcessDefinition xmlns:pd=\"http://xmlns.tibco.com/bw/process/2003\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ns=\"http://www.tibco.com/pe/EngineTypes\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n&lt;pd:name&gt;Processes/simpleResponse&lt;/pd:name&gt;\n&lt;pd:startName&gt;HTTP Receiver&lt;/pd:startName&gt;\n&lt;pd:starter name=\"HTTP Receiver\"&gt;\n&lt;pd:type&gt;com.tibco.plugin.http.HTTPEventSource&lt;/pd:type&gt;\n&lt;pd:resourceType&gt;httppalette.httpEventSource&lt;/pd:resourceType&gt;\n&lt;config&gt;\n&lt;outputMode&gt;String&lt;/outputMode&gt;\n&lt;inputOutputVersion&gt;5.3.0&lt;/inputOutputVersion&gt;\n&lt;sharedChannel&gt;GeneralConnection.sharedhttp&lt;/sharedChannel&gt;\n&lt;parsePostData&gt;true&lt;/parsePostData&gt;\n&lt;Headers/&gt;\n&lt;/config&gt;\n&lt;pd:inputBindings/&gt;\n&lt;/pd:starter&gt;\n&lt;pd:endName&gt;End&lt;/pd:endName&gt;\n&lt;pd:errorSchemas/&gt;\n&lt;pd:processVariables/&gt;\n&lt;pd:targetNamespace&gt;http://xmlns.example.com/simpleResponse&lt;/pd:targetNamespace&gt;\n&lt;pd:activity name=\"HTTP Response\"&gt;\n&lt;pd:type&gt;com.tibco.plugin.http.HTTPResponseActivity&lt;/pd:type&gt;\n&lt;pd:resourceType&gt;httppalette.httpResponseActivity&lt;/pd:resourceType&gt;\n&lt;config&gt;\n&lt;responseHeader&gt;\n&lt;header name=\"Content-Type\"&gt;text/xml; charset=UTF-8&lt;/header&gt;\n&lt;/responseHeader&gt;\n&lt;httpResponseCode&gt;200&lt;/httpResponseCode&gt;\n&lt;/config&gt;\n&lt;pd:inputBindings&gt;\n&lt;ResponseActivityInput&gt;\n&lt;asciiContent&gt;\n&lt;response&gt;hello world&lt;/response&gt;\n&lt;/asciiContent&gt;\n&lt;/ResponseActivityInput&gt;\n&lt;/pd:inputBindings&gt;\n&lt;/pd:activity&gt;\n\n&lt;pd:transition&gt;\n&lt;pd:from&gt;HTTP Receiver&lt;/pd:from&gt;\n&lt;pd:to&gt;HTTP Response&lt;/pd:to&gt;\n&lt;pd:lineType&gt;Default&lt;/pd:lineType&gt;\n&lt;/pd:transition&gt;\n\n&lt;pd:transition&gt;\n&lt;pd:from&gt;HTTP Response&lt;/pd:from&gt;\n&lt;pd:to&gt;End&lt;/pd:to&gt;\n&lt;pd:lineType&gt;Default&lt;/pd:lineType&gt;\n&lt;/pd:transition&gt;\n&lt;/pd:ProcessDefinition&gt;\n</code></pre> GeneralConnection.sharedhttp<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ns0:httpSharedResource xmlns:ns0=\"www.tibco.com/shared/HTTPConnection\"&gt;\n&lt;config&gt;\n&lt;Host&gt;localhost&lt;/Host&gt;\n&lt;Port&gt;9090&lt;/Port&gt;\n&lt;/config&gt;\n&lt;/ns0:httpSharedResource&gt;\n</code></pre> </li> <li> <p>Execute the following command. This will create the <code>converted</code> directory and create a Ballerina package inside it.</p> <pre><code>bal migrate-tibco &lt;tibco-hello-world&gt; -o converted\n</code></pre> </li> </ol>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#step-3-open-in-bi","title":"Step 3: Open in BI","text":"<ol> <li>Open VS Code inside the <code>converted</code> directory     <pre><code>$ code ./converted\n</code></pre></li> <li>Click the BI icon on the left side bar to open the Ballerina package in BI.</li> </ol>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#output","title":"Output","text":""},{"location":"learn/tools/tibco-businessworks-migration-tool/#migration-summary","title":"Migration summary","text":"<ul> <li>When you run the tool, it will log the number of activities it detected for each process along with the number of activities it failed to convert, if any.</li> </ul>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#unhandled-activities","title":"Unhandled activities","text":"<ul> <li> <p>If the tool encounters any activity which it does not know how to convert it will generate a placeholder \"unhandled\" function with a comment containing the relevant part of the process file.</p> <pre><code>function unhandled(map&lt;xml&gt; context) returns xml|error {\n    //FIXME: [ParseError] : Unknown activity\n    //&lt;bpws:empty name=\"OnMessageStart\" xmlns:tibex=\"http://www.tibco.com/bpel/2007/extensions\" tibex:constructor=\"onMessageStart\" tibex:xpdlId=\"c266c167-7a80-40cc-9db2-60739386deeb\" xmlns:bpws=\"http://docs.oasis-open.org/wsbpel/2.0/process/executable\"/&gt;\n\n    //&lt;bpws:empty name=\"OnMessageStart\" xmlns:tibex=\"http://www.tibco.com/bpel/2007/extensions\" tibex:constructor=\"onMessageStart\" tibex:xpdlId=\"c266c167-7a80-40cc-9db2-60739386deeb\" xmlns:bpws=\"http://docs.oasis-open.org/wsbpel/2.0/process/executable\"/&gt;\n    return xml `&lt;root&gt;&lt;/root&gt;`;\n}\n</code></pre> </li> </ul>"},{"location":"learn/tools/tibco-businessworks-migration-tool/#supported-tibco-businessworks-activities","title":"Supported TIBCO BusinessWorks activities","text":"<ul> <li><code>invoke</code></li> <li><code>pick</code></li> <li><code>empty</code></li> <li><code>reply</code></li> <li><code>throw</code></li> <li><code>assign</code></li> <li><code>forEach</code></li> <li><code>extensionActivity</code></li> <li><code>receiveEvent</code></li> <li><code>activityExtension</code><ul> <li><code>bw.internal.end</code></li> <li><code>bw.http.sendHTTPRequest</code></li> <li><code>bw.restjson.JsonRender</code></li> <li><code>bw.restjson.JsonParser</code></li> <li><code>bw.http.sendHTTPResponse</code></li> <li><code>bw.file.write</code></li> <li><code>bw.generalactivities.log</code></li> <li><code>bw.xml.renderxml</code></li> <li><code>bw.generalactivities.mapper</code></li> <li><code>bw.internal.accumulateend</code></li> </ul> </li> <li><code>extActivity</code></li> </ul> Disclaimer<p>TIBCO: \"TIBCO\", \u201cTIBCO BusinessWorks\u201d, and \u201cTIBCO Flogo\u201d are trademarks, or registered trademarks, of TIBCO Software Inc. a business unit of Cloud Software Group. All product, company names and marks mentioned herein are the property of their respective owners and are mentioned for identification purposes only.</p>"}]}