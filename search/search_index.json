{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Ballerina Integrator is a low-code integration solution built on Ballerina, enabling fast and efficient integration development with minimal coding. The Ballerina Integrator extension for Visual Studio Code (VS Code) provides a familiar, AI-assisted environment that streamlines tasks and enhances accuracy, accelerating digital transformation efforts.                      Quick Start Guide  <p>                         Get started with Ballerina Integrator by running a simple integration use case in your local environment.                         </p> Low-code integration development <p>                             Ballerina Integrator offers a user-friendly, streamlined environment for building integrations with minimal coding, accessible to both experienced developers and beginners. Here\u2019s how Ballerina Integrator\u2019s low-code features simplify integration development:                         </p> <ul> <li>Design visually: Ballerina Integrator\u2019s interface lets users design integrations visually, simplifying flow creation and management.</li> <li>Pre-built connectors: Ballerina Integrator offers connectors for easy integration with various systems and services.</li> <li>Low-code and pro-code support: Ballerina Integrator allows seamless switching between low-code and pro-code, enabling visual design with optional custom coding. </li> <li>Deploy anywhere: Ballerina Integrator supports deployment to cloud or on-premises environment, ensuring flexibility and scalability.</li> </ul> AI-assisted development <p>                             Ballerina Integrator leverages AI to streamline coding tasks, improve code quality, and reduce time on error-prone processes. Here\u2019s how Ballerina Integrator\u2019s AI capabilities make a difference:                         </p> <ul> <li>Code suggestions and autocompletion: Ballerina Integrator\u2019s AI provides context-aware suggestions, helping developers code faster with real-time prompts for methods, properties, and configurations.</li> <li>Error detection and fix recommendations: AI identifies errors and suggests fixes early, enhancing code quality and minimizing debugging needs.</li> <li>Pattern recognition and code optimization: Ballerina Integrator\u2019s AI detects code patterns and suggests optimizations, boosting performance and aiding code standardization.</li> <li>Natural language code search and commands: Developers can search for code snippets or methods using natural language, reducing documentation time and accelerating onboarding.</li> <li>Smart refactoring and code restructuring: Ballerina Integrator\u2019s AI suggests refactoring options, enabling a cleaner, more maintainable codebase.</li> </ul> Leverage the power of Ballerina <p>                             Ballerina Integrator uses Ballerina, a language designed for seamless integration development, making API-driven, cloud-native workflows simpler and more efficient. Ballerina offers:                         </p> <ul> <li>Integration-centric syntax: Optimized syntax with constructs like services, data types, and data mappers for clear API orchestration.</li> <li>Cloud-native design: Supports HTTP, WebSocket, gRPC, and Kafka for API-first, microservices-ready development.</li> <li>Visual flow representation: Graphical views that show data flow and logic for complex workflows.</li> <li>Observability and resilience: Built-in tracing, metrics, and logging for efficient monitoring.</li> <li>Unified data handling: Simplifies data transformations for diverse integrations.</li> <li>Testing and deployment tools: Integrated tools for scalable, reliable cloud deployment.</li> </ul>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.</p>"},{"location":"deploy/devant/","title":"Deploy to Devant","text":"<p>Devant is a powerful IPaaS with first-class AI support. Incorporate AI agents into the integrations you build in low-code and pro-code, and move away from siloed systems to intelligent digital experiences with Devant by WSO2\u2014the AI iPaaS that your AI Agents can call \u201chome\u201d. Ballerina Integrator provides a seamless integration experience with Devant. You can deploy your integrations to Devant with just a few clicks.</p> <p>Refer to the Devant quick start guide to deploy your integration in Devant. This guide provides step-by-step instructions to help you set up, configure, and successfully execute your integration with minimal effort.</p> <p></p>"},{"location":"deploy/docker/","title":"Deploy as a Docker image","text":"<p>This guide explains how to deploy an integration as a Docker image.</p> <ol> <li>Navigate to the Visualizer view by clicking on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Deploy with Docker</code> under the <code>Deployment Options</code> section in the right panel.</li> <li> <p>Click <code>Create Docker Image</code> button.      </p> </li> <li> <p>The integration will be built as a Docker image and the image will be available in the local Docker registry.</p> </li> </ol>"},{"location":"deploy/icp/","title":"Deploy with Integration Control Plane","text":"<p>The WSO2 Integration Control Plane (ICP) monitors the Ballerina runtime artifacts in a deployment. It provides a graphical view of the integration artifacts that are deployed. In this guide, you will learn how to enable Integration Control Plane (ICP) for a Ballerina integration. </p>"},{"location":"deploy/icp/#prerequisites","title":"Prerequisites","text":"<ol> <li>Java 11 or later versions should be installed on your machine.</li> <li>You must set your <code>JAVA_HOME</code> environment variable to point to the directory where the Java Development Kit (JDK) is installed on the computer.</li> </ol>"},{"location":"deploy/icp/#step-1-download-and-start-icp-server","title":"Step 1: Download and start ICP server","text":"<ol> <li>Go to the WSO2 Integration Control Plane web page. </li> <li>Click Download. </li> <li>Provide the necessary details. </li> <li>Click Zip Archive to download the Integration Control Plane as a ZIP file. </li> <li>Extract the archive file to a dedicated directory for the Integration Control Plane, which will hereafter be referred to as . <li>Open a terminal and navigate to the <code>&lt;ICP_HOME&gt;/bin</code> folder.</li> <li>Execute one of the commands given below.</li> On MacOS/LinuxOn Windows <pre><code>./dashboard.sh\n</code></pre> <pre><code>dashboard.bat\n</code></pre>"},{"location":"deploy/icp/#step-2-access-the-icp-dashboard","title":"Step 2: Access the ICP dashboard","text":"<ol> <li>Open a web browser and navigate to <code>https://localhost:9743/dashboard</code>.</li> <li>Log in using the default credentials: <ul> <li>Username: <code>admin</code></li> <li>Password: <code>admin</code></li> </ul> </li> </ol>"},{"location":"deploy/icp/#step-3-deploy-the-ballerina-integration","title":"Step 3: Deploy the Ballerina integration","text":"<ol> <li>Navigate to the Visualizer view by clicking on the Ballerina Integrator icon on the sidebar.</li> <li>Check <code>Enable ICP</code> under the <code>Integration Control Plane</code> section in the right panel. </li> <li>Click on the <code>Run</code> button to start the integration. </li> <li>Click on the <code>Create Config.toml</code> on the prompt to create the <code>Config.toml</code> file. </li> <li>Replace the <code>Config.toml</code> file content with the following configurations.  <pre><code>  [ballerinax.wso2.controlplane.dashboard]\nurl = \"https://localhost:9743/dashboard/api\"\nheartbeatInterval = 10\ngroupId = \"cluster1\"\nmgtApiUrl =\"https://localhost:9264/management/\"\n</code></pre></li> <li>Click on the <code>Run</code> button to start the integration. </li> <li>A log message will be displayed in the console indicating that the integration is connected to the ICP dashboard. <code>time=2025-03-17T15:14:59.970+05:30 level=INFO module=ballerinax/wso2.controlplane message=\"Connected to dashboard server https://localhost:9743/dashboard/api\"</code></li> </ol>"},{"location":"deploy/icp/#step-4-view-the-integration-in-the-icp-dashboard","title":"Step 4: View the integration in the ICP dashboard","text":"<ol> <li>Go to the ICP dashboard and log in <code>https://localhost:9743/dashboard</code>.</li> <li>In the dashboard, you will see the integration details.</li> <li>Click on the node to view the node details.  </li> <li>Click on the <code>Services</code> to view the listener and resources of the service.  </li> <li>Click on the <code>Listeners</code> to view details of the listener. </li> </ol>"},{"location":"deploy/jar/","title":"Deploy on a VM as an executable JAR","text":"<p>This guide explains how to deploy an integration as an executable JAR file.</p> <ol> <li>Navigate to the Visualizer view by clicking on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Deploy on VM</code> under the <code>Deployment Options</code> section in the right panel.</li> <li> <p>Click <code>Create Executable</code> button.      </p> </li> <li> <p>The integration will be built as an executable JAR and the JAR file will be available in the <code>target\\bin</code> directory of the project.</p> </li> </ol>"},{"location":"get-started/key-concepts/","title":"Key Concepts","text":"<p>Ballerina Integrator is an all-in-one integration solution that simplifies digital transformation by offering a powerful, configuration-driven approach. It enables developers to visually create integration solutions using an intuitive, low-code graphical interface, making the process faster and more accessible.</p>"},{"location":"get-started/key-concepts/#entrypoint","title":"Entrypoint","text":"<p>An entry point refers to the place in the code where the execution of a integration begins. It is the first function that is called when the program starts running.  In Ballerina Integrator, there are 3 types of entry points:</p> <ol> <li>Service: A service is a network-accessible API that is defined by a set of resources. </li> <li>Automation: Triggers integration with a task. Perfect for scheduled or one-time jobs.</li> <li>Trigger: Start your integration with a Trigger. Best for event-driven actions from external sources.</li> </ol>"},{"location":"get-started/key-concepts/#connections","title":"Connections","text":"<p>Connections are used to connect to external services. They are used to interact with external services, such as databases, APIs, and messaging systems. Ballerina Integrator provides a wide range of connectors that can be used to connect to various systems and services.</p>"},{"location":"get-started/key-concepts/#functions","title":"Functions","text":"<p>Functions are reusable code blocks that can be called from different parts of the integration. They are used to perform specific tasks or calculations. Functions can take input parameters and return output values. </p> <p>Ballerina Functions</p> <p>Ballerina functions are first-class citizens, meaning they can be passed as arguments to other functions, returned from functions, and assigned to variables.  This allows for a high degree of flexibility and reusability in your code. To learn more, see Ballerina Functions.</p>"},{"location":"get-started/key-concepts/#types","title":"Types","text":"<p>Types are used to define the structure of data in Ballerina Integrator. They are used to define the shape of the data that is passed between different components of the integration.</p> <p>Ballerina Type System</p> <p>Ballerina has a rich type system that allows you to define complex data structures.  It supports various types, including records, arrays, maps, unions, and more.  The type system is designed to be flexible and expressive, allowing you to model real-world data structures easily. To learn more, see Ballerina Type System.</p> <p></p>"},{"location":"get-started/key-concepts/#configurations","title":"Configurations","text":"<p>Configurations are used to define the settings and parameters of the integration. They are used to configure the behavior of the integration and its components.  Configurations can be used to set up connections, define global variables, and configure other aspects of the integration in different environments. Configurations are defined in the <code>Config.toml</code> file, which is located in the root directory of the integration project.</p> <p>Ballerina Configurations</p> <ol> <li>Environment Variables: Ballerina allows you to define environment variables that can be used to store sensitive information, such as API keys and passwords. </li> <li>Configuration Files: Ballerina supports configuration files that can be used to store configuration settings in a structured format.</li> <li>Config.toml: The <code>Config.toml</code> file is used to define the configurations for the integration. It is a standard TOML file that can be edited using any text editor. To learn more, see Ballerina Configurables.</li> </ol> <p></p>"},{"location":"get-started/key-concepts/#source-view","title":"Source View","text":"<p>The source view is a text-based representation of the integration that can be used to view and edit the code directly. It provides a way to see the underlying code that is generated by the graphical interface. Switching to the source view allows you to view and edit the code directly, providing more control and flexibility over the integration.  Clicking on the <code>&lt;/&gt;</code> button in the top right corner of the design view will switch to the source view.</p> <p></p>"},{"location":"get-started/quick-start-guide/","title":"Quick start guide","text":""},{"location":"get-started/quick-start-guide/#overview","title":"Overview","text":"<p>In this guide, you'll build a simple integration using the Ballerina Integrator plugin for Visual Studio Code. You'll create an HTTP service with a single resource named <code>greeting</code> that invokes the public Hello World API endpoint and returns the response.</p> <p></p>"},{"location":"get-started/quick-start-guide/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>Download and install the Visual Studio Code.</p>"},{"location":"get-started/quick-start-guide/#step-2-install-the-wso2-ballerina-integrator-extension","title":"Step 2: Install the WSO2 Ballerina Integrator extension","text":"<ol> <li>Go to the Extensions view by clicking on the extension icon on the sidebar or pressing <code>Ctrl + Shift + X</code> on Windows and Linux, or <code>shift + \u2318 + X</code> on a Mac.</li> <li>Search for <code>Ballerina Integrator</code> in the Extensions view search box.</li> <li>Click on the <code>Install</code> button to install the <code>Ballerina Integrator</code> extension.    </li> <li>This will install the Ballerina Integrator and Ballerina extensions on VS Code.</li> </ol>"},{"location":"get-started/quick-start-guide/#step-3-set-up-ballerina-integrator-for-the-first-time","title":"Step 3: Set up Ballerina Integrator for the first time","text":"<ol> <li>Click on the Ballerina Integrator icon on the sidebar.   </li> <li>Click on the <code>Set Up Ballerina Integrator</code> button.</li> <li>The setup wizard will install and configure the Ballerina distribution required for Ballerina Integrator.</li> <li>Click on the <code>Restart Now</code> button to complete the setup.    </li> </ol> Update Ballerina Integrator's Ballerina Distribution<p>The setup wizard will install the Ballerina distribution required for Ballerina Integrator in to <code>&lt;USER_HOME&gt;/.ballerina/ballerina-home</code> directory. Press <code>Ctrl + Shift + P</code> on Windows and Linux, or <code>shift + \u2318 + P</code> on a Mac and type <code>Ballerina: Update Ballerina Dev Pack</code> to update the installed Ballerina distribution.</p>"},{"location":"get-started/quick-start-guide/#step-4-create-a-new-integration-project","title":"Step 4: Create a new integration project","text":"<ol> <li>Click on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Create Integration</code> button.</li> <li>Enter the Integration Name as <code>HelloWorld</code>.</li> <li>Select Project Directory by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create Integration</code> button to create the integration project.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-5-create-an-integration-service","title":"Step 5: Create an integration service","text":"Generate with AI<p>The integration service can also be generated using the AI-assistant. Click on the <code>Generate with AI</code> button and enter the following prompt, then press <code>Add to Integration</code> to generate the integration service.</p> <p><code>create a http service that has base path as /hello, and 9090 as the port. Add GET resource on /greeting that invokes https://apis.wso2.com/zvdz/mi-qsg/v1.0 endpoint and forward the response to caller.</code></p> <ol> <li>In the design view, click on the <code>Add Artifact</code> button.</li> <li>Select <code>HTTP Service</code> under the <code>Integration as API</code> category.</li> <li>Select the <code>Create and use the default HTTP listener</code> option from the <code>Listener</code> dropdown.</li> <li>Select <code>Design from Scratch</code> option as the <code>The contract of the service</code>.</li> <li>Specify the <code>Service base path</code> as <code>/hello</code>.</li> <li>Click on the <code>Create</code> button to create the new service with the specified configurations.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-6-design-the-integration","title":"Step 6: Design the integration","text":"<ol> <li>The generated service will have a default resource named <code>greeting</code> with the <code>GET</code> method.</li> <li>Click on the <code>greeting</code> resource to view the resource details. Let's modify the resource to invoke the <code>HelloWorld</code> API endpoint.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Add Connection</code> from the node panel. </li> <li>Search for <code>HTTP</code> in the search bar and select <code>HTTP Client</code> as the connection type.</li> <li>Change the variable name to <code>externalEP</code>.</li> <li> <p>Add the URL <code>\"https://apis.wso2.com\"</code> to the connection URL field and click <code>Save</code>.    </p> </li> <li> <p>Click the \u2795 button again and select <code>Connections</code> -&gt; <code>externalEP</code> -&gt; <code>get</code> from the node panel.</p> </li> <li>Fill the request details as below and click <code>Save</code>.</li> </ol> Field Value <code>Variable Name</code> <code>epResponse</code> <code>Variable Type</code> <code>string</code> <code>Connection</code> <code>externalEp</code> <code>Target Type</code> <code>string</code> <code>Path</code> <code>\"/zvdz/mi-qsg/v1.0\"</code> <p>  10. Click on the <code>Return</code> node from the design view. 11. Select the <code>epResponse</code> variable as the <code>Expression</code> from the dropdown and click <code>Save</code>. This step will return the response from the <code>HelloWorld</code> API endpoint.       </p>"},{"location":"get-started/quick-start-guide/#step-7-run-the-integration","title":"Step 7: Run the integration","text":"<ol> <li>Click on the <code>Run</code> button at top right corner to run the integration.</li> <li>The integration will be compiled and started in the embedded Ballerina runtime.</li> <li>Once the integration is started, click on the <code>Test</code> button to open the embedded HTTP client.</li> <li>Click on the <code>Send</code> button to invoke the <code>greeting</code> resource.    </li> <li>Additionally, you can test the integration using REST clients like Postman or curl.    <pre><code> curl http://localhost:9090/hello/greeting\n{\"message\":\"Hello World!!!\"}%\n</code></pre></li> <li>Click on the \u23f9\ufe0f button or press <code>Shift + F5</code> shortcut to stop the integration.    </li> </ol>"},{"location":"learn/data-mapping/","title":"Data Mapping","text":"<p>The following instructions demonstrate how to build an integration that transforms a JSON payload into a different JSON structure using Ballerina Integrator Data Mapper. An HTTP service with a single resource (<code>transform</code>) will be created to receive a JSON payload and return the transformed result.</p>"},{"location":"learn/data-mapping/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>Transformer</code>.</li> <li>Select project directory location by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project. </li> </ol>"},{"location":"learn/data-mapping/#step-2-define-input-and-output-types","title":"Step 2: Define input and output types","text":"<ol> <li>Click on the <code>Add Artifacts</code> button and select <code>Type</code> in the <code>Other Artifacts</code> section.</li> <li>Click on <code>+ Add Type</code> to add a new type. </li> <li>Generate record types corresponding to the input and output JSON payloads given below.</li> <li> <p>Select <code>Make Separate Record Definitions</code> and click on the <code>Import</code> button.</p> </li> </ol>"},{"location":"learn/data-mapping/#input","title":"Input","text":"<pre><code>{\n\"user\": {\n\"firstName\": \"John\",\n\"lastName\": \"Doe\",\n\"email\": \"john.doe@example.com\",\n\"address\": {\n\"street\": \"123 Elm St\",\n\"city\": \"San Francisco\",\n\"state\": \"CA\",\n\"postalCode\": 94107\n},\n\"phoneNumbers\": [\"123-456-7890\", \"098-765-4321\"]\n},\n\"account\": {\n\"accountNumber\": \"A123456789\",\n\"balance\": 2500,\n\"lastTransaction\": \"2023-10-15T14:30:00Z\"\n}\n}\n</code></pre>"},{"location":"learn/data-mapping/#output","title":"Output","text":"<p><pre><code>{\n\"fullName\": \"John Doe\",\n\"contactDetails\": {\n\"email\": \"john.doe@example.com\",\n\"primaryPhone\": \"123-456-7890\"\n},\n\"location\": {\n\"city\": \"San Francisco\",\n\"state\": \"CA\",\n\"zipCode\": \"94107\"\n},\n\"accountInfo\": {\n\"accountNumber\": \"A123456789\",\n\"balance\": 2500\n},\n\"transactionDate\":  \"2023-10-15T14:30:00Z\"\n}\n</code></pre> 5. The final types will look like below. The source view can be accessed by clicking on the <code>&lt;/&gt;</code> button in the top right corner. </p>"},{"location":"learn/data-mapping/#step-3-create-a-http-service","title":"Step 3: Create a HTTP service.","text":"<ol> <li>Click on <code>Home</code> button to navigate back to the design view</li> <li>In the design view, click on the <code>Add Artifact</code> button.</li> <li>Select <code>HTTP Service</code> under the <code>Integration as API</code> category.</li> <li>Select the <code>+ Listeners</code> option from the <code>Listeners</code> dropdown to add a new listener.</li> <li>Enter the listener name as <code>transformListener</code>, <code>8290</code> as the port and click on the <code>Save</code> button.</li> <li>Add the service base path as <code>/</code> and select the <code>Design from Scratch</code> option as the <code>The contract of the service</code>.</li> <li>Click on the <code>Create</code> button to create the new service with the specified configurations.     </li> </ol>"},{"location":"learn/data-mapping/#step-4-update-the-resource-method","title":"Step 4: Update the resource method","text":"<ol> <li>Click on <code>Edit Resource</code> button</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>transform</code>.</li> <li>Add a payload parameter named <code>input</code> to the resource of type <code>Input</code>. </li> <li>Change the response status code to <code>201</code> and the return type to <code>Output</code>.</li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations.  </li> </ol> <p>Resource Method</p> <p>To learn more about resources, see Ballerina Resources.</p>"},{"location":"learn/data-mapping/#step-5-add-data-mapper","title":"Step 5: Add Data Mapper","text":"<ol> <li>Click on the <code>transform</code> resource to navigate to the resource implementation designer view.</li> <li>Delete the existing <code>Return</code> node in the flow diagram.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Map Data</code> from the node panel and click on <code>Create Data Mapper</code> button. </li> <li> <p>Fill in the required fields with the values given below and <code>Create Mapping</code> button to start data mapping.</p> Field Value Data Mapper Name <code>transformed</code> Input <code>Input input</code> Output <code>Output</code> </li> </ol> <p></p> <p> </p>"},{"location":"learn/data-mapping/#step-6-create-mappings","title":"Step 6: Create Mappings","text":"<ol> <li>First click on the input field and then click on the desired output field to create a mapping</li> <li>When you are done click on the <code>Go Back</code> Button to return to the flow diagram</li> </ol>"},{"location":"learn/data-mapping/#create-simple-mapping","title":"Create Simple Mapping","text":""},{"location":"learn/data-mapping/#auto-mapping","title":"Auto Mapping","text":""},{"location":"learn/data-mapping/#many-to-one-mapping","title":"Many-to-One Mapping","text":""},{"location":"learn/data-mapping/#edit-mapping-expression","title":"Edit Mapping Expression","text":""},{"location":"learn/data-mapping/#resolving-errors","title":"Resolving Errors","text":""},{"location":"learn/data-mapping/#step-7-return-the-transformed-payload","title":"Step 7: Return the transformed payload","text":"<ol> <li>Hover to the arrow after the Data Mapper node in the flow diagram and click the \u2795 button</li> <li> <p>Select <code>Return</code> from the node panel. </p> <p></p> </li> <li> <p>Provide <code>output</code> as the return expression.</p> </li> <li>The final code will look like below. The source view can be accessed by clicking on the <code>&lt;/&gt;</code> button in the top right corner. </li> </ol> <pre><code>import ballerina/http;\n\nlistener http:Listener transformListner = new (port = 8290);\n\nservice / on transformListner {\n    resource function post transform(@http:Payload Input input) returns http:InternalServerError|Output|error {\n        do {\n            Output output = transform(input);\n            return output;\n\n        } on fail error err {\n            // handle error\n            return error(\"Not implemented\", err);\n        }\n    }\n}\n</code></pre>"},{"location":"learn/data-mapping/#step-6-run-the-integration","title":"Step 6: Run the integration","text":"<ol> <li>Click on the <code>Run</code> button in the top-right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:8290/transform</code>.</li> <li> <p>The service can be tested using a tool like Postman or curl by sending a POST request with a JSON payload to the service endpoint.  <pre><code>curl -X POST \"http://localhost:8290/transform\" -H \"Content-Type: application/json\" -d '{\n \"user\": {\n     \"firstName\": \"John\",\n     \"lastName\": \"Doe\",\n     \"email\": \"john.doe@example.com\",\n     \"address\": {\n         \"street\": \"123 Elm St\",\n         \"city\": \"San Francisco\",\n         \"state\": \"CA\",\n         \"postalCode\": 94107\n     },\n     \"phoneNumbers\": [\"123-456-7890\", \"098-765-4321\"]\n },\n \"account\": {\n     \"accountNumber\": \"A123456789\",\n     \"balance\": 2500,\n     \"lastTransaction\": \"2023-10-15T14:30:00Z\"\n } \n}'\n</code></pre></p> </li> <li> <p>The response will be the transformed JSON payload. <pre><code>{\n\"fullName\": \"John Doe\",\n\"contactDetails\": {\n\"email\": \"john.doe@example.com\",\n\"primaryPhone\": \"123-456-7890\"\n},\n\"location\": {\n\"city\": \"San Francisco\",\n\"state\": \"CA\",\n\"zipCode\": \"94107\"\n},\n\"accountInfo\": {\n\"accountNumber\": \"A123456789\",\n\"balance\": 2500\n},\n\"transactionDate\":  \"2023-10-15T14:30:00Z\"\n}\n</code></pre></p> </li> </ol>"},{"location":"learn/file-integration/","title":"File integration","text":"<p>In this section, we will learn how to create a file integration using the Ballerina Integrator. The integration will listen to events in a directory and will be triggered when an file related event occurs.</p>"},{"location":"learn/file-integration/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>FileIntegration</code>.</li> <li>Select Project Directory and click on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.</li> </ol>"},{"location":"learn/file-integration/#step-2-create-an-directory-service","title":"Step 2: Create an Directory service.","text":"<ol> <li>In the design view, click on the <code>Add Artifact</code> button.</li> <li>Select <code>Directory Service</code> under the <code>File Integration</code> category.</li> <li>Enter the listener name as <code>directoryListener</code>.</li> <li>Enter the path to the directory you want to monitor. For example, <code>\"/home/user/Downloads\"</code>.</li> <li>Click on the <code>Next</code> button to create the directory service.</li> <li>Keep the default listener in the <code>Listener Configuration</code> window and click on the <code>Create</code> button to create the directory service. </li> </ol>"},{"location":"learn/file-integration/#step-3-configure-file-event-resources","title":"Step 3: Configure file event resources","text":"<ol> <li>Navigate to the <code>directoryListener</code> service  under the <code>Entry Points</code> section and click on the <code>+Function</code>  button.</li> <li>Select <code>onCreate</code> from <code>Available Functions</code> dropdown and click on the <code>Save</code> button.</li> <li>Click on the <code>onCreate</code> function to navigate to the function implementation designer view.</li> <li>Click on <code>+</code> and select <code>Log Info</code> from the node panel under <code>Logging</code> category.</li> <li>Add the log message as <code>\"File created \"+ event.name</code> in the <code>Msg</code> field.</li> <li>Click on the <code>Save</code> button to add the log action to the function. </li> <li>Repeat the above steps to add the <code>onDelete</code> and <code>onModify</code> functions to the service.</li> <li>Add the log message as <code>\"File deleted \"+ event.name</code> in the <code>Msg</code> field for the <code>onDelete</code> function.</li> <li>Add the log message as <code>\"File modified \"+ event.name</code> in the <code>Msg</code> field for the <code>onModify</code> function.</li> <li>The final service will look like this:     </li> </ol>"},{"location":"learn/file-integration/#step-4-run-the-integration","title":"Step 4: Run the integration","text":"<ol> <li>Click on the <code>Run</code> button in the top-right corner to run the integration.</li> <li>The integration will start listening to the events in the directory specified in step 2. </li> <li>Create a new file in the directory to trigger the <code>onCreate</code> event.</li> <li>Modify the file to trigger the <code>onModify</code> event.</li> <li>Delete the file to trigger the <code>onDelete</code> event.</li> <li>The log messages will be displayed in the console.  </li> </ol>"},{"location":"learn/integration-ai/","title":"AI-assisted integration","text":"<p>In this tutorial, you\u2019ll create an HTTP service to add key-value pairs to a Redis database. The integrated AI-assistant will help you generate the integration flow.</p>"},{"location":"learn/integration-ai/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your machine.</li> </ul>"},{"location":"learn/integration-ai/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>RedisService</code>.</li> <li>Select project directory location by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.</li> </ol>"},{"location":"learn/integration-ai/#step-2-create-a-new-integration","title":"Step 2: Create a new integration","text":"<ol> <li>In the design view click on the <code>Generate with AI</code> button.</li> <li>Enter the following prompt and press <code>Enter</code>:    <pre><code> Create an integration service with a base path of /cache and a POST resource at /add that accepts key-value pairs and adds them to Redis.\n</code></pre> </li> <li>Click on <code>+ Add to Ingeration</code> button to add the generated integration to the project.</li> <li>The generated integration will look like below: </li> </ol>"},{"location":"learn/integration-ai/#step-3-add-a-resource-to-get-value","title":"Step 3:  Add a resource to get value","text":"<ol> <li>Add the following prompt and press <code>Enter</code>:    <pre><code> Add a resource to get the value of a key from Redis.\n</code></pre></li> <li>Click on <code>+ Add to Ingeration</code> button to add the generated integration to the project.</li> <li>The generated integration will look like below: </li> </ol>"},{"location":"learn/integration-ai/#step-4-start-the-redis-server","title":"Step 4: Start the Redis server","text":"<ol> <li>Start the Redis server by running the following command:    <pre><code>docker run --name some-redis -d -p 6379:6379 redis\n</code></pre></li> <li>The redis server will start on port <code>6379</code> without password protection.  </li> </ol>"},{"location":"learn/integration-ai/#step-6-configure-the-redis-client","title":"Step 6:  Configure the Redis client","text":"<ol> <li>In the <code>Integrator overview</code>, click on the <code>Configurations</code>.</li> <li>Set <code>redisHost</code> value to <code>localhost</code>.</li> <li>Set <code>redisPort</code> value to <code>6379</code>.  </li> </ol>"},{"location":"learn/integration-ai/#step-5-generate-the-curl-commands-to-test-the-integration","title":"Step 5: Generate the curl commands to test the integration","text":"<ol> <li>Add the following prompt and press <code>Enter</code> to generate the curl command to add key-value pairs to the Redis server.:    <pre><code> Generate a curl command to add key-value pairs to the Redis server.\n</code></pre> </li> <li>Add the following prompt and press <code>Enter</code> to generate the curl command to get the value of a key from the Redis server.:    <pre><code> Generate a curl command to get the value of a key from the Redis server.\n</code></pre></li> </ol>"},{"location":"learn/integration-ai/#step-6-test-the-integration","title":"Step 6: Test the integration","text":"<ol> <li>Click on the <code>Run</code> button to start the integration.</li> <li>Execute the generated <code>curl</code> commands to add a key-value pair.    <pre><code>   curl -X POST http://localhost:8080/cache/add \\\n-H \"Content-Type: application/json\" \\\n-d '{\"key\": \"BI\", \"value\": \"Ballerina Integrator is an AI-assisted integration platform.\"}' </code></pre></li> <li>Execute the generated <code>curl</code> command to get the value of the key.    <pre><code>   curl http://localhost:8080/cache/get?key=BI\n</code></pre></li> <li>The response will be the value of the key <code>BI</code> stored in the Redis server.    <pre><code>Ballerina Integrator is an AI-assisted integration platform.%\n</code></pre></li> </ol>"},{"location":"learn/integration-ai/#step-7-stop-the-integration","title":"Step 7: Stop the integration","text":"<ol> <li>Click on the <code>Stop</code> button to stop the integration.</li> <li>Stop the Redis server by running the following command:    <pre><code>docker stop some-redis\n</code></pre></li> </ol>"},{"location":"learn/message-routing/","title":"Content-based message routing","text":"<p>In this tutorial, you'll create a service that allows users to reserve appointments at various hospitals. Requests will be directed to the appropriate hospital based on the request payload's content. To accomplish this, you\u2019ll build a REST service with a single resource in Ballerina Integrator extension. The resource will handle user requests, identify the hospital endpoint based on the hospital ID, forward the request to the specified hospital service to make the reservation, and return the reservation details.</p> <p>Here\u2019s an overview of the process flow.</p> <p></p> <ol> <li>Receive a request with a JSON payload similar to the following.     ReservationRequest.json<pre><code>{\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"hospital_id\": \"grandoak\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre></li> <li> <p>Extract the <code>hospital_id</code> field and select the corresponding hospital service endpoint.</p> <ul> <li>grandoak -&gt; http://localhost:9090/grandoak/categories</li> <li>clemency -&gt; http://localhost:9090/clemency/categories</li> <li>pinevalley -&gt; http://localhost:9090/pinevalley/categories </li> </ul> </li> <li> <p>Forward the request to the selected hospital service and retrieve the response which will be similar to the following.     ReservationResponse.json<pre><code>{\n\"appointmentNumber\": 8,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patientName\": \"John Doe\",\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></p> </li> </ol>"},{"location":"learn/message-routing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your machine.</li> </ul>"},{"location":"learn/message-routing/#implementation","title":"Implementation","text":"<p>Follow the steps below to implement the message routing service.</p>"},{"location":"learn/message-routing/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>MessageRouting</code>.</li> <li>Select Project Directory and click on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.</li> </ol>"},{"location":"learn/message-routing/#step-2-create-an-http-service","title":"Step 2: Create an HTTP service.","text":"<ol> <li>In the design view, click on the <code>Add Artifact</code> button.</li> <li>Select <code>HTTP Service</code> under the <code>Integration as API</code> category.</li> <li>Select the <code>+ Listeners</code> option from the <code>Listeners</code> dropdown to add a new listener.</li> <li>Enter the listener name as <code>healthListener</code>, <code>8290</code> as the port and click on the <code>Save</code> button. </li> <li>Add the service base path as <code>/healthcare</code> and select the <code>Design from Scratch</code> option as the <code>The contract of the service</code>.</li> <li>Click on the <code>Create</code> button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/message-routing/#step-3-define-types","title":"Step 3: Define types","text":"<ol> <li>Click on the <code>Add Artifacts</code> button and select <code>Type</code> in the <code>Other Artifacts</code> section.</li> <li>Click on <code>+ Add Type</code> to add a new type</li> <li>Add the <code>Record Name</code> as <code>ReservationRequest</code> and paste the following JSON payload. Select <code>Make Separate Record Definitions</code> and click on the <code>Import</code> button.    <pre><code> {\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"hospital_id\": \"grandoak\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre></li> <li>Repeat the above steps to add a new type named <code>ReservationResponse</code> with the following JSON payload.     <pre><code>{\n\"appointmentNumber\": 8,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patientName\": \"John Doe\",\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> <li>The final Type diagram will look like below.    </li> </ol>"},{"location":"learn/message-routing/#step-4-add-connectors-s","title":"Step 4: Add connectors s","text":"<ol> <li>Navigate to design view and click on the <code>Add Artifacts</code> button and select <code>Connection</code> in the <code>Other Artifacts</code> section.</li> <li>Search and select the <code>HTTP Client</code> connector.</li> <li>Enter the connector name as <code>grandOakEp</code>, URL as <code>\"http://localhost:9090/grandoak/categories\"</code>.</li> <li>Click on the <code>Save</code> button to create the new connector with the specified configurations. </li> <li> <p>Repeat the above steps to add connectors for the <code>clemency</code> and <code>pinevalley</code> hospitals with the following configurations.</p> Connector Name URL clemencyEp <code>\"http://localhost:9090/clemency/categories\"</code> pineValleyEp <code>\"http://localhost:9090/pinevalley/categories\"</code> </li> <li> <p>The final connectors will look like below.    </p> </li> </ol> HTTP Connector<p>To learn more about HTTP client, see Ballerina HTTP Client. See supported advanced client configurations in the HTTP Client Configurations.</p>"},{"location":"learn/message-routing/#step-5-add-a-resource-method","title":"Step 5: Add a resource method","text":"<ol> <li>The service will have a default resource named <code>greeting</code> with the <code>GET</code> method. Click on three dots appear in front of the <code>/healthCare</code> service resource and select <code>Edit</code> from menu.</li> <li>Then click the edit button in front of <code>/greeting</code> resource to edit the resource.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>categories/[string category]/reserve</code>.</li> <li>Add a payload parameter named <code>reservation</code> to the resource of type <code>ReservationRequest</code>.</li> <li>Change the 201 response return type to <code>ReservationResponse</code>.</li> <li>Add a new response of type <code>HttpNotFound</code> under the responses.</li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations.    </li> </ol>"},{"location":"learn/message-routing/#step-6-add-the-routing-logic","title":"Step 6: Add the routing logic","text":"<ol> <li>Click on the <code>categories/[string category]/reserve</code> resource to navigate to the resource implementation designer view.</li> <li>Delete the default <code>Return</code> action from the resource.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Declare Variable</code> from the node panel on the left. This variable will be used to store the request payload for the hospital service.</li> <li>Change the variable name to <code>hospitalRequset</code>, type as <code>json</code> and expression as below and click <code>Save</code>.     <pre><code>{\n    patient: reservation.patient.toJson(),\n    doctor: reservation.doctor,\n    hospital: reservation.hospital,\n    appointment_date: reservation.appointment_date\n}\n</code></pre></li> <li>Add <code>If</code> from the node panel after <code>hospitalRequest</code> variable. Enter the conditions as <code>If</code> <code>Else If</code> blocks as below for each hospital.<ul> <li>grandOak -&gt; <code>reservation.hospital_id == \"grandoak\"</code></li> <li>clemency -&gt; <code>reservation.hospital_id == \"clemency\"</code></li> <li>pineValley -&gt; <code>reservation.hospital_id == \"pinevalley\"</code> </li> </ul> </li> <li>Select the <code>grandOakEP</code> condition true path \u2795 sign and select <code>grandOakEP</code> connector from the node panel. </li> <li> <p>Select <code>post</code> from the dropdown. Then, fill in the required fields with the values given below and click <code>Save</code>.</p> Field Value Variable Name <code>oakEPResponse</code> Variable Type <code>ReservationResponse</code> Resource Path <code>string `/${category}/reserve`</code> message <code>hospitalRequset</code> </li> <li> <p>Click on the \u2795 sign again and select <code>Return</code> from the node panel. Select the <code>oakEPResponse</code> variable from the dropdown and click <code>Save</code>.     </p> </li> <li>The steps above will add the routing logic for the <code>grandoak</code> hospital. A variable named <code>oakEPResponse</code> will store the response from the <code>grandoak</code> hospital service. The response will be returned to the client.</li> <li> <p>Repeat the 7,8,9 steps for the <code>clemency</code> and <code>pinevalley</code> hospitals with the following configurations.</p> <p>clemency:</p> Field Value Variable Name <code>clemencyEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>string `/${category}/reserve`</code> message <code>hospitalRequset</code> <p>pinevalley:</p> Field Value Variable Name <code>pineValleyEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>string `/${category}/reserve`</code> message <code>hospitalRequset</code> </li> <li> <p>For the else condition, click on the <code>If</code> condition <code>Else</code> path \u2795 sign and add a <code>Return</code> from the node panel. Enter <code>http:NOT_FOUND</code> as the value and click <code>Save</code>.             </p> </li> <li>The final design will look like below.            </li> </ol>"},{"location":"learn/message-routing/#step-7-run-the-service","title":"Step 7: Run the service","text":"<ol> <li>Start the backend service by executing the following command in a terminal.     <pre><code>docker run --name hospital-backend -p 9090:9090 -d anuruddhal/kola-hospital-backend\n</code></pre></li> <li>Click on the <code>Run</code> on the run button in the top right corner to run the service.</li> <li>The service will start and the service will be available at <code>http://localhost:8290/healthcare/categories/[category]/reserve</code>.</li> <li>Click on the <code>Try it</code> button to open the embedded HTTP client.</li> <li>Replace the <code>{category}</code> with <code>surgery</code> in the resource path and enter the following JSON payload in the request body and click on the \u25b6\ufe0f button to send the request.     <pre><code>{\n\"patient\":{\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital_id\": \"grandoak\",\n\"hospital\": \"grand oak community hospital\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre> </li> <li>The response will be similar to the following.    <pre><code>{\n\"appointmentNumber\": 1,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> <li>Optionally, you can test the service using curl command as below.    <pre><code> curl -X POST \"http://localhost:8290/healthcare/categories/surgery/reserve\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n \"patient\": {\n \"name\": \"John Doe\",\n \"dob\": \"1940-03-19\",\n \"ssn\": \"234-23-525\",\n \"address\": \"California\",\n \"phone\": \"8770586755\",\n \"email\": \"johndoe@gmail.com\"\n },\n \"doctor\": \"thomas collins\",\n \"hospital_id\": \"grandoak\",\n \"hospital\": \"grand oak community hospital\",\n \"appointment_date\": \"2023-10-02\"\n }'\n</code></pre></li> </ol>"},{"location":"learn/message-routing/#step-8-stop-the-integration","title":"Step 8: Stop the integration","text":"<ol> <li>Click on the <code>Stop</code> button to stop the integration.</li> <li>Stop the hospital backend server by running the following command:    <pre><code>docker stop hospital-backend\n</code></pre></li> </ol>"},{"location":"learn/message-transformation/","title":"Message transformation","text":""},{"location":"learn/message-transformation/#overview","title":"Overview","text":"<p>This guide explains how to create a simple integration to convert a JSON payload to an XML payload using Ballerina Integrator. An HTTP service with a single resource (<code>toXml</code>) will be created to accept a JSON payload and return the XML representation of the payload. </p>"},{"location":"learn/message-transformation/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Create Integration</code> button.</li> <li>Enter the project name as <code>JsonToXml</code>.</li> <li>Select project directory location by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create Integration</code> button to create the integration project.    </li> </ol>"},{"location":"learn/message-transformation/#step-2-create-a-http-service","title":"Step 2: Create a HTTP service.","text":"<ol> <li>In the design view, click on the <code>Add Artifact</code> button.</li> <li>Select <code>HTTP Service</code> under the <code>Integration as API</code> category.</li> <li>Select the <code>Create and use the default HTTP listener</code> option from the <code>Listener</code> dropdown.</li> <li>Select <code>Design from Scratch</code> option as the <code>The contract of the service</code>.</li> <li>Specify the <code>Service base path</code> as <code>/convert</code>.</li> <li>Click on the <code>Create</code> button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/message-transformation/#step-3-update-the-resource-method","title":"Step 3: Update the resource method","text":"<ol> <li>The service will have a default resource named <code>greeting</code> with the <code>GET</code> method. Click on three dots appear in front of the <code>/convert</code> service resource and select <code>Edit</code> from menu.</li> <li>Then click the edit button in front of <code>/greeting</code> resource. </li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>toXml</code>.</li> <li>Add a payload parameter named <code>input</code> to the resource of type <code>json</code>. </li> <li>Change the 201 response return type to <code>xml</code>.</li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations.     </li> </ol> <p>Resource Method</p> <p>To learn more about resources, see Ballerina Resources.</p>"},{"location":"learn/message-transformation/#step-4-add-the-transformation-logic","title":"Step 4: Add the transformation logic","text":"<ol> <li>Click on the <code>toXml</code> resource to navigate to the resource implementation designer view.</li> <li>Delete the default <code>Return</code> action from the resource.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Function Call</code> from the node panel.</li> <li>Search for <code>json to xml</code> and select the <code>fromJson</code> function from the suggestions.</li> <li>Change the <code>Variable Name</code> to <code>xmlResult</code>, <code>Variable Type</code> as <code>xml</code> and <code>JsonValue</code> to <code>input</code>.</li> <li>Click on the <code>Save</code> button to add the function call to the resource.     </li> <li>Add a new node after the <code>fromJson</code> function call and select <code>Return</code> from the node panel.</li> <li>Select the <code>xmlResult</code> variable from the dropdown and click <code>Save</code>.     </li> </ol> <p>JSON to XML Conversion</p> <p>To learn more about json to xml conversion, see Ballerina JSON to XML conversion.</p>"},{"location":"learn/message-transformation/#step-5-run-the-integration","title":"Step 5: Run the integration","text":"<ol> <li>Click on the <code>Run</code> button in the top-right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:9090/convert</code>.</li> <li>Click on the <code>Try it</code> button to open the embedded HTTP client.</li> <li>Enter the JSON payload in the request body and click on the \u25b6\ufe0f button to send the request.     <pre><code>{\n\"name\": \"John\",\n\"age\": 30,\n\"car\": \"Honda\"\n}\n</code></pre></li> <li>The response will be an XML representation of the JSON payload. <code>&lt;root&gt;         &lt;name&gt;John&lt;/name&gt;         &lt;age&gt;30&lt;/age&gt;         &lt;car&gt;Honda&lt;/car&gt;     &lt;/root&gt;</code> </li> <li>Additionally, the service can be tested using tools like Postman or curl by sending a POST request with a JSON payload to the service endpoint.    <pre><code>curl -X POST \"http://localhost:9090/convert/toXml\" -H \"Content-Type: application/json\" -d '{\"name\":\"John\", \"age\":30, \"car\":\"Honda\"}'\n</code></pre></li> </ol>"},{"location":"learn/natural-functions/","title":"Natural Functions","text":"<p>In this tutorial, you will learn how to use natural functions in Ballerina Integrator, which allow the function to contain instructions in natural language.  Such a function is evaluated at runtime with a call to an LLM. The example uses a natural function to analyze blog content to suggest a category and rate it based on predefined criteria.</p> Natural Programming<p>To learn more about Ballerina natural programming library module, see natural programming.</p>"},{"location":"learn/natural-functions/#implementation","title":"Implementation","text":"<p>Follow the steps below to implement the integration.</p>"},{"location":"learn/natural-functions/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>NaturalProgramming</code>.</li> <li>Select Project Directory and click on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.</li> </ol>"},{"location":"learn/natural-functions/#step-2-define-types","title":"Step 2: Define Types","text":"<ol> <li>Click on the <code>Add Artifacts</code> button and select <code>Type</code> in the <code>Other Artifacts</code> section.</li> <li>Click on <code>+ Add Type</code> to add a new type.</li> <li>Add the <code>Record Name</code> as <code>Blog</code> and paste the following JSON payload. Select <code>Is Closed Record</code> and click on the <code>Import</code> button.     <pre><code>{\n\"title\": \"Tips for Growing a Beautiful Garden\",\n\"content\": \"Spring is the perfect time to start your garden. Begin by preparing your soil with organic compost and ensure proper drainage. Choose plants suitable for your climate zone, and remember to water them regularly. Don't forget to mulch to retain moisture and prevent weeds.\"\n}\n</code></pre></li> <li>Add another type with the <code>Record Name</code> as <code>Review</code> and paste the following JSON payload. Select <code>Is Closed Record</code> and click on the <code>Import</code> button.     <pre><code>{\n\"name\": \"Gardening\",\n\"rating\": 5\n}\n</code></pre></li> <li>The types are now available in the project. <code>Blog</code> and <code>Review</code> are the types that represent the blog content and review respectively. </li> </ol>"},{"location":"learn/natural-functions/#step-3-create-an-http-service","title":"Step 3: Create an HTTP service.","text":"<ol> <li>In the design view, click on the <code>Add Artifact</code> button.</li> <li>Select <code>HTTP Service</code> under the <code>Integration as API</code> category.</li> <li>Select the <code>Create and use the default HTTP listener</code> option from the <code>Listener</code> dropdown.</li> <li>Add the service base path as <code>/blogs</code> and select the <code>Design from Scratch</code> option as the <code>The contract of the service</code>.</li> <li>Click on the <code>Create</code> button to create the new service with the specified configurations. </li> </ol>"},{"location":"learn/natural-functions/#step-4-add-a-natural-function","title":"Step 4: Add a Natural Function","text":"<ol> <li>Click on the <code>Add Artifact</code> button and select <code>Natural Function</code> under the <code>Other Artifacts</code> category.</li> <li>Add the function name as <code>reviewBlog</code>, input parameter as <code>blog</code> of type <code>Blog</code>, return type of <code>Review</code> and click on the <code>Create</code> button. </li> <li>Click on the <code>Edit</code> button to add the function logic.</li> <li>Add the following prompt to the function and click on the <code>Save</code> button.     <pre><code>You are an expert content reviewer for a blog site that \n    categorizes posts under the following categories: \"Gardening\", \"Sports\", \"Health\", \"Technology\", \"Travel\"\n\n    Your tasks are:\n    1. Suggest a suitable category for the blog from exactly the specified categories. \n       If there is no match, use null.\n\n    2. Rate the blog post on a scale of 1 to 10 based on the following criteria:\n    - **Relevance**: How well the content aligns with the chosen category.\n    - **Depth**: The level of detail and insight in the content.\n    - **Clarity**: How easy it is to read and understand.\n    - **Originality**: Whether the content introduces fresh perspectives or ideas.\n    - **Language Quality**: Grammar, spelling, and overall writing quality.\n\nHere is the blog post content:\n\n    Title: ${blog.title}\n    Content: ${blog.content}\n</code></pre></li> </ol>"},{"location":"learn/natural-functions/#step-5-update-the-resource-method","title":"Step 5: Update the resource method","text":"<ol> <li>The service will have a default resource named <code>greeting</code> with the <code>GET</code> method. Click on three dots appear in front of the <code>/convert</code> service resource and select <code>Edit</code> from menu.</li> <li>Then click the edit button in front of <code>/greeting</code> resource.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>review</code>.</li> <li>Add a payload parameter named <code>blog</code> to the resource of type <code>Blog</code>.</li> <li>Change the 201 response return type to <code>Review</code>.</li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations. </li> </ol>"},{"location":"learn/natural-functions/#step-6-implement-resource-logic","title":"Step 6: Implement resource logic","text":"<ol> <li>Click on the <code>review</code> resource to navigate to the resource implementation designer view.</li> <li>Delete the default <code>Return</code> action from the resource.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Call Function Call</code> from the node panel.</li> <li>Select the <code>reviewBlog</code> function from the suggestions.</li> <li>Change the <code>Variable Name</code> to <code>review</code>, <code>Variable Type</code> as <code>Review</code> and <code>Blog</code> to <code>blog</code> and click on the <code>Save</code> button.   </li> <li>Add a new node after the <code>reviewBlog</code> function call and select <code>Return</code> from the node panel.</li> <li>Select the <code>reviewResult</code> variable from the dropdown and click <code>Save</code>. </li> <li>The resource implementation is now complete. The function <code>reviewBlog</code> is called with the blog content as input and the review is returned as the response.</li> </ol>"},{"location":"learn/natural-functions/#step-7-configure-model-for-natural-function","title":"Step 7: Configure model for natural function","text":"<ol> <li>Press <code>Ctrl + Shift + P</code> on Windows and Linux, or <code>shift + \u2318 + P</code> on a Mac and type <code>&gt;Ballerina: Configure default model for natural functions</code> to configure the default model for natural functions.  </li> </ol>"},{"location":"learn/natural-functions/#step-8-run-the-integration","title":"Step 8: Run the integration","text":"<p>Response May Vary</p> <p>Since this integration involves an LLM (Large Language Model) call, the response values may not always be identical across different executions.</p> <ol> <li>Click on the <code>Run</code> button in the top-right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:9090/blogs</code>.</li> <li>Click on the <code>Try it</code> button to open the embedded HTTP client.</li> <li>Enter the blog content in the request body and click on the \u25b6\ufe0f button to send the request.     <pre><code>{\n\"title\": \"The Healthy Maven\",\n\"content\": \"For those who want a 360-degree approach to self-care, with advice for betterment in the workplace, home, gym, and on the go, look no further. The Healthy Maven offers recipes for every type of meal under the sun (salads, sides, soups, and more), DIY tips (you\u2019ll learn how to make your own yoga mat spray), and quick workouts. If you like where all this is going, there\u2019s a supplementary podcast run by blogger Davida with guest wellness experts.\"\n}\n</code></pre></li> <li>The response will be a review of the blog content with the category and rating.     <pre><code>{\n\"name\": \"Health\",\n\"rating\": 8\n}\n</code></pre></li> <li>The blog content is analyzed by the natural function to suggest a category and rate it based on predefined criteria.     </li> </ol>"},{"location":"learn/service-orchestration/","title":"Service orchestration","text":"<p>In this tutorial, you\u2019ll create a service to process appointment requests for hospitals. The service will call multiple backend services sequentially, using data from each call to inform the next. This approach integrates several services into one, known as service orchestration. To implement this, you\u2019ll build a REST service with a single resource in Ballerina Integrator extension and then run the service. The resource will receive user requests, make the necessary backend calls, and respond with the appointment details.</p> <p>The flow is as follows.</p> <ol> <li>The user sends an appointment request to the service.     <pre><code>  {\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\",\n\"cardNo\": \"7844481124110331\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital_id\": \"grandoaks\",\n\"hospital\": \"grand oak community hospital\",\n\"appointment_date\": \"2024-11-06\"\n}\n</code></pre></li> <li>Extract necessary details from the request (e.g., hospital, patient, doctor, etc.) and make a call to the hospital backend service to request an appointment. A response similar to the following will be returned from the hospital backend service on success.      <pre><code>  {\n\"appointmentNumber\": 1,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000\n},\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> <li>Use the hospital ID and the appointment number and call the hospital backend service to retrieve the fee for the appointment. The response will be similar to the following.     <pre><code>  {\n\"patientName\": \"John Doe\",\n\"doctorName\": \"thomas collins\",\n\"actualFee\": \"7000\"\n}\n</code></pre></li> <li>Finally, call the payment backend service to make the payment and retrieve the reservation status.    <pre><code>  {\n\"appointmentNo\": 2,\n\"doctorName\": \"thomas collins\",\n\"patient\": \"John Doe\",\n\"actualFee\": 7000,\n\"discount\": 20,\n\"discounted\": 5600.0,\n\"paymentID\": \"f130e2ed-a34e-4434-9b40-6a0a8054ee6b\",\n\"status\": \"settled\"\n}\n</code></pre></li> </ol>"},{"location":"learn/service-orchestration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on the machine.</li> </ul>"},{"location":"learn/service-orchestration/#implementation","title":"Implementation","text":"<p>Follow the steps below to implement the service orchestration.</p>"},{"location":"learn/service-orchestration/#step-1-create-a-new-integration-project","title":"Step 1: Create a new integration project.","text":"<ol> <li>Click on the Ballerina Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>ServiceOrchestration</code>.</li> <li>Select project directory location by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.</li> </ol>"},{"location":"learn/service-orchestration/#step-2-create-an-http-service","title":"Step 2: Create an HTTP service.","text":"<ol> <li>In the design view, click on the <code>Add Artifact</code> button.</li> <li>Select <code>HTTP Service</code> under the <code>Integration as API</code> category.</li> <li>Select the <code>+ Listeners</code> option from the <code>Listeners</code> dropdown to add a new listener.</li> <li>Enter the listener name as <code>healthListener</code>, <code>8290</code> as the port and click on the <code>Save</code> button.</li> <li>Add the service base path as <code>/healthcare</code> and select the <code>Design from Scratch</code> option as the <code>The contract of the service</code>.</li> <li>Click on the <code>Create</code> button to create the new service with the specified configurations. </li> </ol>"},{"location":"learn/service-orchestration/#step-3-define-types","title":"Step 3: Define types","text":"<ol> <li>Click on the <code>Add Artifacts</code> button and select <code>Type</code> in the <code>Other Artifacts</code> section.     </li> <li> <p>Click on <code>+ Add Type</code> to add a new type  Generate record types corresponding to the response from the hospital backend service by providing a sample of the expected JSON payload. The values are given below.</p> Type Name Sample JSON value Make Separate Record Definition Record ReservationRequest <code>{\"patient\":{\"name\":\"John Doe\",\"dob\":\"1940-03-19\",\"ssn\":\"234-23-525\",\"address\":\"California\",\"phone\":\"8770586755\",\"email\":\"johndoe@gmail.com\",\"cardNo\":\"7844481124110331\"},\"doctor\":\"thomas collins\",\"hospital_id\":\"grandoaks\",\"hospital\":\"grand oak community hospital\",\"appointment_date\":\"2024-11-06\"}</code> \u2611\ufe0f Record ReservationStatus <code>{\"appointmentNo\":1, \"doctorName\":\"thomas collins\", \"patient\":\"John Doe\", \"actualFee\":7000.0, \"discount\":20, \"discounted\":5600.0, \"paymentID\":\"e560ea82-1c42-4972-a471-af5c1ad4995f\", \"status\":\"settled\"}</code> \u2611\ufe0f Record Appointment <code>{\"appointmentNumber\":12345,\"doctor\":{\"name\":\"Dr. Alice Carter\",\"hospital\":\"Green Valley Hospital\",\"category\":\"Cardiology\",\"availability\":\"Mon-Fri, 9 AM - 5 PM\",\"fee\":200},\"patientName\":\"Emma Johnson\",\"hospital\":\"Green Valley Hospital\",\"confirmed\":true,\"appointmentDate\":\"2024-11-20T10:00:00\"}</code> \u2611\ufe0f Record Fee <code>{\"patientName\":\"Emma Johnson\",\"doctorName\":\"Dr. Alice Carter\",\"actualFee\":\"150.00\"}</code> </li> <li> <p>The final types will look like the following.   </p> </li> </ol>"},{"location":"learn/service-orchestration/#step-4-add-connections","title":"Step 4: Add connections","text":"<ol> <li>Navigate to design view and click on the <code>Add Artifacts</code> button and select <code>Connection</code> in the <code>Other Artifacts</code> section.</li> <li>Search and select the <code>HTTP Client</code> connector.</li> <li>Enter the connector name as <code>hospitalEp</code>, URL as <code>http://localhost:9090</code> and click on the <code>Save</code> button. </li> <li>Add another connector for the payment backend service with the URL <code>http://localhost:9090/healthcare/payments</code> and the name <code>paymentEp</code>.   </li> </ol> HTTP Connector<p>To learn more about HTTP client, see Ballerina HTTP Client. See supported client configurations in the HTTP Client Configurations.</p>"},{"location":"learn/service-orchestration/#step-5-design-the-resource","title":"Step 5: Design the resource","text":"<ol> <li>The service will have a default resource named <code>greeting</code> with the <code>GET</code> method. Click on three dots appear in front of the <code>/healthCare</code> service resource and select <code>Edit</code> from menu.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>categories/[string category]/reserve</code>.</li> <li>Add a payload parameter named <code>reservation</code> to the resource of type <code>ReservationRequest</code>.</li> <li>Change the 201 response return type to <code>ReservationStatus</code>.</li> <li>Add a new response of type <code>HttpNotFound</code> under the responses.  </li> <li>Click on the <code>Save</code> button to save the resource.  </li> </ol>"},{"location":"learn/service-orchestration/#step-6-make-the-appointment-request","title":"Step 6: Make the appointment request","text":"<ol> <li>Click on the <code>categories/[string category]/reserve</code> resource to navigate to the resource implementation designer view.</li> <li>Delete the default <code>Return</code> action from the resource.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Declare Variable</code> from the node panel on the left. This variable will be used to store the request payload for the hospital service.</li> <li>Change the variable name to <code>hospitalRequest</code>, type as <code>json</code> and expression as below.     <pre><code>     {\n     patient:{\n         name: reservation.patient.name,\n         dob: reservation.patient.dob,\n         ssn: reservation.patient.ssn,\n         address: reservation.patient.address,\n         phone: reservation.patient.phone,\n         email: reservation.patient.email\n      },\n     doctor: reservation.doctor,\n     hospital: reservation.hospital,\n     appointment_date: reservation.appointment_date\n    }\n</code></pre></li> <li>Click on the <code>Save</code> button to add the variable.  </li> <li> <p>Click \u2795 sign and select <code>hospitalServicesEp</code> connector from the node panel and select <code>post</code> from the dropdown. Then, fill in the required fields with the values given below and click <code>Save</code>.</p> Field Value Variable Name <code>appointment</code> Variable Type <code>Appointment</code> Resource Path <code>string `/${reservation.hospital_id}/categories/${category}/reserve`</code> message <code>hospitalRequest</code> </li> <li> <p>The connector action will look like the following.  </p> </li> </ol>"},{"location":"learn/service-orchestration/#step-7-get-the-fee","title":"Step 7: Get the fee","text":"<ol> <li>Declare an <code>int</code>  variable named <code>appointmentNumber</code> with expression <code>appointment.appointmentNumber</code> after the hospital service request. </li> <li>Let's add another connector invocation to get the fee for the appointment. Click on the \u2795 sign and select <code>hospitalServicesEp</code> connector from the node panel.  </li> <li> <p>Select <code>get</code> from the dropdown. Then, fill in the required fields with the values given below and click <code>Save</code>.</p> Field Value Variable Name <code>fee</code> Variable Type <code>Fee</code> Resource Path <code>string `/${reservation.hospital_id}/categories/appointments/${appointmentNumber}/fee`</code> <p></p> </li> </ol>"},{"location":"learn/service-orchestration/#step-8-make-the-payment","title":"Step 8: Make the payment","text":"<ol> <li>Declare a <code>decimal</code> type variable named <code>actualFee</code> with expression <code>check decimal:fromString(fee.actualFee)</code> after the fee request. </li> <li>Create another new to prepare the payment request. Click on the \u2795 sign and select <code>Declare Variable</code> from the node panel. Add a variable named <code>paymentRequest</code> with the type <code>json</code> and expression as below.    <pre><code>{\n  appointmentNumber: appointmentNumber,\n  doctor: appointment.doctor.toJson(),\n  patient: check hospitalRequest.patient,\n  fee: actualFee,\n  confirmed: false,\n  card_number: reservation.patient.cardNo\n }\n</code></pre> </li> <li>Let's add another connector action to make the payment. Click on the \u2795 sign and select <code>paymentEP</code> connector from the node panel. Select <code>post</code> from the dropdown. </li> <li> <p>Then, fill in the required fields with the values given below and click <code>Save</code>.</p> Field Value Variable Name <code>status</code> Variable Type <code>ReservationStatus</code> Resource Path <code>\"/\"</code> message <code>paymentRequest</code> </li> <li> <p>Click on the \u2795 sign and select <code>Return</code> from the node panel. Add the <code>status</code> variable to the return node.</p> </li> <li>The final integration will look like the following.  </li> </ol>"},{"location":"learn/service-orchestration/#step-9-run-the-service","title":"Step 9: Run the service","text":"<ol> <li>Click on the <code>Run</code> button to start the service.</li> <li>Start the backend service by executing the following command in a terminal.     <pre><code>docker run --name hospital-backend -p 9090:9090 -d anuruddhal/kola-hospital-backend\n</code></pre></li> <li>Click on the <code>Run</code>  on the run button (\u25b6\ufe0f) in the top right corner to run the service.</li> <li>The service will start and the service will be available at <code>http://localhost:8290/healthcare/categories/[category]/reserve</code>.</li> <li>Click on the <code>Try it</code> button to open the embedded HTTP client.</li> <li>Replace the <code>{category}</code> with <code>surgery</code> in the resource path and enter the following JSON payload in the request body and click on the \u25b6\ufe0f button to send the request.     <pre><code>    {\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\",\n\"cardNo\": \"7844481124110331\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital_id\": \"grandoak\",\n\"hospital\": \"grand oak community hospital\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre></li> <li>The response will be similar to the following.    <pre><code> {\n\"appointmentNo\": 1,\n\"doctorName\": \"thomas collins\",\n\"patient\": \"John Doe\",\n\"actualFee\": 7000,\n\"discount\": 20,\n\"discounted\": 5600,\n\"paymentID\": \"b219c4ad-5365-4a22-ae35-048bb8e570e7\",\n\"status\": \"settled\"\n}\n</code></pre> </li> <li>You can also test the service using the curl command.    <pre><code> curl -X POST \"http://localhost:8290/healthcare/categories/surgery/reserve\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n   \"patient\": {\n     \"name\": \"John Doe\",\n     \"dob\": \"1940-03-19\",\n     \"ssn\": \"234-23-525\",\n     \"address\": \"California\",\n     \"phone\": \"8770586755\",\n     \"email\": \"johndoe@gmail.com\",\n     \"cardNo\": \"7844481124110331\"\n   },\n   \"doctor\": \"thomas collins\",\n   \"hospital_id\": \"grandoak\",\n   \"hospital\": \"grand oak community hospital\",\n   \"appointment_date\": \"2023-10-02\"\n }'\n</code></pre></li> </ol>"},{"location":"learn/service-orchestration/#step-10-stop-the-integration","title":"Step 10: Stop the integration","text":"<ol> <li>Click on the <code>Stop</code> button to stop the integration or press <code>shift</code> + <code>F5</code>.</li> <li>Stop the hospital backend server by running the following command:    <pre><code>docker stop hospital-backend\n</code></pre></li> </ol>"},{"location":"roadmap/language-support/","title":"Ballerina language support in low-code development","text":"<p>The Ballerina Integrator development environment provides an opinionated representation of the Ballerina language and its ecosystem, leveraging Ballerina\u2019s core features to create a streamlined low-code experience. All configurations are serialized directly into Ballerina code\u2014there is no intermediate representation\u2014ensuring the source code remains the single source of truth. </p> <p>This document offers a high-level overview of Ballerina language features, discusses the differences and limitations between pro-code and low-code development, and outlines the roadmap for aligning more advanced pro-code capabilities with the low-code environment in future releases.</p>"},{"location":"roadmap/language-support/#low-code-scope-and-limitations","title":"Low-code scope and limitations","text":"<p>The Ballerina Integrator low-code environment is designed to streamline development by abstracting complex Ballerina features and providing an intuitive visual experience. However, this simplification has certain constraints. Some advanced language features and custom configurations are not supported in low-code mode. For greater flexibility and full access to Ballerina\u2019s capabilities, developers can switch to the pro-code view when needed.</p>"},{"location":"roadmap/language-support/#core-language-features","title":"Core language features","text":"Language Feature Availability Notes Functions Yes Some function signature combinations (such as rest parameters and default value arguments) are not supported. Switch to pro-code view for advanced signature patterns. Types Yes Configurables Yes Listeners Yes Supported listener types are listed in Note 1. Service Declaration Yes User-defined methods are not supported in the low-code view. Switch to pro-code view to use this feature. Global Variables/Constants No Only specific types (such as connectors) are available. Support for other types will be introduced in the September 2025 release. Workers No Support for workers will be available in the September 2025 release. Note 1<p>The current version supports the following service type creation:</p> <ul> <li>HTTP, GraphQL, and gRPC protocol listeners  </li> <li>Messaging connectors (Kafka, RabbitMQ)  </li> <li>GitHub event triggers  </li> <li>FTP and Directory service listeners  </li> </ul> <p>Additional listener types will be introduced in the September 2025 release.   Other service types can be created in the pro-code view, though limited low-code support will be available in the service designer for these.</p>"},{"location":"roadmap/language-support/#supported-statements","title":"Supported statements","text":"Statement Availability Note Variable definition statement Yes Only simple type binding (single variable statements) is supported. Assignment statement Yes Only simple type binding (single variable statements) is supported. If statement Yes While statement Yes Foreach statement Yes Only simple type binding (single variable statements) is supported. Break statement Yes Continue statement Yes Fail Yes Panic Yes Fork statements Yes Wait statements Yes Do-on-Fail (Error handler) Yes Lock September 2025 Transaction statement September 2025 Retry and Retry-transaction September 2025 Match statement September 2025 Worker interaction statements September 2025 Query Actions September 2025"},{"location":"roadmap/language-support/#supported-expressions","title":"Supported expressions","text":"<p>Expressions are supported in the low-code view. Users can enter expressions in relevant fields within forms and other UI elements. Helper tools guide users through creating valid and efficient expressions.</p>"},{"location":"roadmap/language-support/#types","title":"Types","text":"<p>Users can create custom types in the low-code view using the Type Designer. However, please note the following limitation:</p> <ul> <li>Table type creation: Not currently supported in the low-code view. This feature will be available in the September 2025 release.</li> </ul>"},{"location":"roadmap/language-support/#platform-features","title":"Platform features","text":""},{"location":"roadmap/language-support/#dependency-management","title":"Dependency management","text":"<p>Ballerina uses modules to manage dependencies and relies on Ballerina Central to download them. In the low-code view, users can add dependencies to a project by selecting the necessary connectors, types, or constructs from the UI. This automatically includes the required dependencies in the Ballerina project.</p> <p>For manual dependency management, users can switch to the pro-code view, open the <code>Ballerina.toml</code> file, and specify any additional dependencies. Enhanced support for managing dependencies within the low-code view is planned for future releases.</p>"},{"location":"roadmap/language-support/#bal-persistence-support","title":"Bal persistence support","text":"<p>Bal Persistence is not currently supported in the low-code view. To use this feature, switch to the pro-code view. Support for Bal Persistence in the low-code environment will be introduced in future releases.</p>"},{"location":"roadmap/overview/","title":"Features and roadmap","text":"<p>This document gives a broad overview of Ballerina Integrator's current features and future roadmap, emphasizing key capabilities available now and upcoming enhancements planned for future releases. Note that the roadmap might change and may not include all planned features.</p>"},{"location":"roadmap/overview/#current-features","title":"Current features","text":""},{"location":"roadmap/overview/#low-code-capabilities","title":"Low-code capabilities","text":"<ul> <li> <p>Architecture diagram    Enables visualization of the overall integration architecture, including endpoints, SaaS applications, and other key actors.</p> </li> <li> <p>Service designer    Offers a low-code environment for creating various components of an integration, such as invitations or service definitions.</p> </li> <li> <p>Flow diagram    Provides a fully low-code interface for designing and orchestrating integration logic, including flow controls and branching.</p> </li> <li> <p>Sequence diagram    Illustrates the interactions between multiple actors over a timeline, ensuring clarity in complex workflows.</p> </li> <li> <p>GraphQL creator    Simplifies the visualization and creation of GraphQL services, reducing coding overhead.</p> </li> <li> <p>Data mapping    Allows you to visualize and configure data transformations between different data sources and formats.</p> </li> <li> <p>Type diagrams    Displays schemas and their relationships, enabling easy creation and editing of types and data structures.</p> </li> </ul>"},{"location":"roadmap/overview/#integration-capabilities","title":"Integration capabilities","text":"<ul> <li> <p>Automation</p> <ul> <li>Create automation: Streamline repetitive tasks and processes with an integrated automation engine.</li> </ul> </li> <li> <p>API integration</p> <ul> <li>HTTP: Leverage HTTP-based services for direct data exchange.  </li> <li>GraphQL: Harness the flexibility of GraphQL for structured data queries and mutations.  </li> <li>gRPC: Enable high-performance communication with remote services using the gRPC protocol.</li> </ul> </li> <li> <p>Event integrations</p> <ul> <li>Kafka: Integrate with Apache Kafka for robust, event-driven data streaming.  </li> <li>RabbitMQ: Connect to RabbitMQ queues for reliable message handling.  </li> <li>GitHub: Automate workflows in response to GitHub events (e.g., push, pull requests).</li> </ul> </li> <li> <p>File integrations</p> <ul> <li>FTP Transfer files securely to and from FTP servers.  </li> <li>Directory service: Manage file-based operations in local or remote directories.</li> </ul> </li> </ul>"},{"location":"roadmap/overview/#connection-capabilities","title":"Connection capabilities","text":"<ul> <li> <p>Open-source connectors   Leverage over 100 open-source connectors (powered by the Ballerina language) to integrate with a wide range of systems and SaaS applications.  </p> </li> <li> <p>OpenAPI-based connectors   Seamlessly integrate with more than 100 services using OpenAPI-based connectors, simplifying the creation of robust, standards-compliant integrations.</p> </li> </ul>"},{"location":"roadmap/overview/#ai-capabilities","title":"AI capabilities","text":"<ul> <li>Scaffolding code generation   Kickstart your integration with a natural language prompt as our AI automatically identifies the required entry points, connectors, and libraries. Build your v0 in seconds and get straight to innovation.  </li> <li>Project chat   Transform your project with our AI-powered chat that intuitively understands your entire integration\u2014from connectors to libraries. With a single prompt, unleash rapid, context-aware modifications across all components for a truly dynamic development experience.  </li> <li>Test generation   Automatically generate comprehensive tests based on your API contract to slash development time. Ensure reliable integration performance with minimal effort.  </li> <li>AI datamapper   Transform your data with a single click by uploading any specifications or unstructured data, letting our AI handle the auto mapping. Enjoy seamless data transformation that simplifies your workflow.  </li> <li>Next node(s) prediction   Accelerate development as our AI implicitly suggests the next possible nodes based on your integration context. Experience a faster, more intuitive development process.  </li> <li>Prompt-based inline nodes generation   Generate inline nodes swiftly using explicit prompts tailored to your needs. Enhance your development speed with precise, on-demand node creation. </li> </ul>"},{"location":"roadmap/overview/#roadmap","title":"Roadmap","text":""},{"location":"roadmap/overview/#march-2025","title":"March 2025","text":""},{"location":"roadmap/overview/#integration-capabilities_1","title":"Integration capabilities","text":"<ul> <li>Scheduled task capabilities    Automate recurring processes and tasks by scheduling integrations at specified intervals.</li> </ul>"},{"location":"roadmap/overview/#ai-capabilities_1","title":"AI capabilities","text":"<ul> <li>Agentic AI integration    Create autonomous AI agents that can perform tasks and orchestrate complex workflows directly within your integration flows.  </li> <li>RAG integration     Leverage our Retrieval Augmented Generation (RAG) tools to transform raw data into intelligent, contextual outputs. Seamlessly integrating with your data sources, RAG enhances your app\u2019s capability to provide precise, informed responses. </li> </ul>"},{"location":"roadmap/overview/#cloud-enhancements","title":"Cloud enhancements","text":"<ul> <li>Devant integration    A robust toolset for deploying and hosting integrations on the Devant platform and cloud environments.</li> </ul>"},{"location":"roadmap/overview/#september-2025","title":"September 2025","text":""},{"location":"roadmap/overview/#integration-enhancements","title":"Integration enhancements","text":"<ul> <li> <p>GraphQL    Introduce SDL-based low-code integration for connection creation and editing, streamlining GraphQL-based services.</p> </li> <li> <p>gRPC    Provide proto-file-based low-code integration and connection creation, enabling high-performance communication patterns.</p> </li> <li> <p>AsyncAPI    Extend low-code capabilities for event-driven integrations using AsyncAPI-based definitions.</p> </li> </ul>"},{"location":"roadmap/overview/#ballerina-features","title":"Ballerina features","text":"<ul> <li>Pro-code to low-code alignment    Align advanced Ballerina language features with low-code representations, ensuring seamless transition between pro-code and low-code development.    See Ballerina language features for more details.</li> <li>Dependency management    Introduce low-code editing capabilities for managing dependencies and repositories within Ballerina-based projects.</li> <li>Ballerina persistence support    Enhance low-code support for Ballerina persistence features, enabling simplified data storage and retrieval operations.</li> </ul>"},{"location":"roadmap/overview/#low-code-diagram-features","title":"Low-code diagram features","text":"<ul> <li> <p>Concurrency nodes    Add low-code support for concurrency constructs such as Locks, Workers, and Worker Messaging statements.</p> </li> <li> <p>Transactional nodes    Facilitate complex transaction handling with Transaction and Retry statements in a low-code manner.</p> </li> </ul>"},{"location":"roadmap/overview/#connections","title":"Connections","text":"<ul> <li> <p>OpenAPI specification-based connections    Simplify connection creation directly from OpenAPI specifications, reducing manual configuration.</p> </li> <li> <p>Connection config enhancements    Enhance the low-code editing experience for connection configuration data, making it more intuitive and efficient.</p> </li> </ul>"},{"location":"roadmap/overview/#additional-graphical-features","title":"Additional graphical features","text":"<ul> <li> <p>XSD-based type creation    Allow type creation from XSD schemas to accelerate structured data definitions.</p> </li> <li> <p>JSON schema-based type creation    Enable quick generation of types from JSON schemas for streamlined data handling.</p> </li> </ul>"},{"location":"roadmap/overview/#testing-enhancements","title":"Testing enhancements","text":"<ul> <li>Low-code tools for mock services and connections    Provide specialized tools to easily create and manage mock services and connections, improving test coverage and reliability.</li> </ul>"}]}