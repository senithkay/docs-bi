{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WSO2 Kola Documentation","text":"<p>WSO2 Kola is a comprehensive integration solution that simplifies your digital transformation journey.</p> <p>It streamlines connectivity among applications, services, data, and the cloud using a user-friendly low-code graphical design experience.</p>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.</p>"},{"location":"deploy/choreo/","title":"Deploy in Choreo Devant","text":""},{"location":"deploy/observability-tracing/","title":"Observability","text":""},{"location":"deploy/observability-tracing/#opentelemetry","title":"OpenTelemetry","text":""},{"location":"deploy/observability-tracing/#prometheus","title":"Prometheus","text":""},{"location":"deploy/observability-tracing/#jaeger-tracing","title":"Jaeger Tracing","text":""},{"location":"deploy/observability-tracing/#datadog","title":"Datadog","text":""},{"location":"deploy/wso2-icp/","title":"Deploy in WSO2 Integration Control Plane (ICP)","text":""},{"location":"develop/entrypoint/","title":"Entrypoint","text":"<p>Ballerina Integrator provides a set of built-in entry points to expose services. These entry points are used to expose services to the outside world.  The following section describes the entry points supported in Ballerina Integrator and how to create them.</p>"},{"location":"develop/entrypoint/#services","title":"Services","text":"<p>Following service types are supported in Ballerina Integrator:</p>"},{"location":"develop/entrypoint/#http-service","title":"HTTP Service","text":"<p>HTTP service is a network-accessible API that is defined by a set of resources and methods.  To start your integration with an HTTP service, click on the <code>HTTP Service</code> Button in the <code>Service Type</code> section. HTTP service can be designed using Service Designer or by importing an OpenAPI Specification (OAS) file to set it up quickly.</p> <ol> <li> <p>Design From Scratch </p> <ul> <li>Select the <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>HelloWorldService</code>, path as <code>/hello</code> and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button.</li> <li>This will create a new service with the name <code>HelloWorldService</code> and the path <code>/hello</code> on port <code>9090</code>.</li> <li>You can now design the service by adding resources and methods to it.</li> </ul> </li> <li> <p>Import OpenAPI Specification</p> <ul> <li>Select the <code>Import OpenAPI Specification</code> option.</li> <li>Click on the <code>Choose File</code> button and select the OAS file.</li> <li>Click on the <code>Create Service</code> button.</li> <li>This will create a new service with the details specified in the OAS file.</li> <li>You can now design the service by editing resources and methods to it.</li> </ul> </li> </ol>"},{"location":"develop/entrypoint/#graphql-service","title":"GraphQL Service","text":""},{"location":"develop/entrypoint/#tasks","title":"Tasks","text":""},{"location":"develop/entrypoint/#triggers","title":"Triggers","text":""},{"location":"develop/installation/","title":"Installation","text":""},{"location":"develop/installation/#install-vscode-and-bi-plugin","title":"Install VSCode and BI plugin","text":"<p>Install Visual Studio Code and the Ballerina Integrator plugin.</p>"},{"location":"develop/installation/#install-ballerina","title":"Install Ballerina","text":"<p>Download and install the Ballerina distribution.</p>"},{"location":"develop/nodes/","title":"Nodes","text":""},{"location":"develop/nodes/#if","title":"If","text":""},{"location":"develop/nodes/#switch","title":"Switch","text":""},{"location":"develop/nodes/#foreach","title":"Foreach","text":""},{"location":"develop/projects/","title":"Projects","text":""},{"location":"develop/projects/#project-creation","title":"Project Creation","text":"<p>Projects are created by the <code>create</code> command of the <code>project</code> plugin. The command creates a new project directory and initializes it with a <code>project.yaml</code> file. The <code>project.yaml</code> file contains the project configuration.</p> <pre><code>$ ballerina project create &lt;project-name&gt;\n</code></pre>"},{"location":"develop/projects/#project-overview","title":"Project Overview","text":"<p>Projects are the basic building blocks of Ballerina. A project is a directory that contains a Ballerina package. A project can contain multiple Ballerina files, tests, and resources. The project directory structure is as follows:</p>"},{"location":"develop/working-with-types/","title":"Working with Types","text":""},{"location":"develop/working-with-types/#records","title":"Records","text":""},{"location":"develop/working-with-types/#import-xml","title":"Import XML","text":""},{"location":"develop/working-with-types/#import-json","title":"Import JSON","text":""},{"location":"develop/working-with-types/#import-csv","title":"Import CSV","text":""},{"location":"develop/working-with-types/#import-yaml","title":"Import YAML","text":""},{"location":"get-started/introduction/","title":"Introduction","text":"<p>This quick start guide gets you started with the WSO2 Kola, in just few minutes.</p> <p>In this guide, you will download the WSO2 Kola, create a simple integration, and run it.</p>"},{"location":"get-started/key-concepts/","title":"Key Concepts","text":"<p>WSO2 Ballerina Composer is an all-in-one integration solution that simplifies digital transformation by offering a powerful, configuration-driven approach. It enables developers to visually create integration solutions using an intuitive, low-code graphical interface, making the process faster and more accessible.</p>"},{"location":"get-started/key-concepts/#entrypoint","title":"Entrypoint","text":"<p>An entry point refers to the place in the code where the execution of a integration begins. It is the first function or method that is called when the program starts running.  In Ballerina Composer, there are 3 types of entry points:</p> <ol> <li>Service: A service is a network-accessible API that is defined by a set of resources and methods. Start your integration with a HTTP service.</li> <li>Automation: Triggers integration with a task. Perfect for scheduled or one-time jobs.</li> <li>Trigger: Initiate your integration with a Trigger. Best for event-driven actions from external sources.</li> </ol>"},{"location":"get-started/key-concepts/#connections","title":"Connections","text":"<p>Connections are used to connect to external systems and services. They are used to interact with external systems and services, such as databases, APIs, and messaging systems.  Ballerina Composer provides a wide range of connectors that can be used to connect to various systems and services.</p>"},{"location":"get-started/key-concepts/#functions","title":"Functions","text":"<p>Functions are reusable code blocks that can be called from different parts of the integration. They are used to perform specific tasks or calculations.</p>"},{"location":"get-started/key-concepts/#types","title":"Types","text":"<p>Types are used to define the structure of data in Ballerina Composer. They are used to define the shape of the data that is passed between different components of the integration.</p>"},{"location":"get-started/key-concepts/#configurations","title":"Configurations","text":"<p>Configurations are used to define the settings and parameters of the integration. They are used to configure the behavior of the integration and its components.</p>"},{"location":"get-started/quick-start-guide/","title":"Quick Start Guide","text":""},{"location":"get-started/quick-start-guide/#step-1-download-the-visual-studio-code-vscode-ide","title":"Step 1: Download the Visual Studio Code (VSCode) IDE.","text":"<p>Download and install the Visual Studio Code IDE from here.</p>"},{"location":"get-started/quick-start-guide/#step-2-install-the-kola-plugin","title":"Step 2: Install the Kola plugin.","text":"<ol> <li>Open the Visual Studio Code IDE.</li> <li>Go to the Extensions view by clicking on the extension icon on the sidebar or pressing <code>Ctrl + Shift + X</code> on Windows and Linux, or <code>shift + \u2318 + X</code> on a Mac.</li> <li>Search for <code>Kola</code> in the Extensions view search box.</li> <li>Click on the <code>Install</code> button to install the Ballerina Composer plugin. </li> <li>This will install Kola, KolaB extension to the Visual Studio Code IDE.  </li> </ol>"},{"location":"get-started/quick-start-guide/#step-3-setup-kola-for-the-first-time","title":"Step 3: Setup Kola for the first time.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.    </li> <li>Click on the <code>Setup</code> button.</li> <li>The setup wizard will install and configure the Ballerina distribution required for Kola.</li> <li>Click on the <code>Restart VSCode</code> button to complete the setup.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-4-create-a-new-integration-project","title":"Step 4: Create a new Integration Project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>HelloWorld</code>.</li> <li>Select Project Directory by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-4-create-an-integration-service","title":"Step 4: Create an Integration Service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option. </li> <li>Enter the service name as <code>HelloWorldService</code>, path as <code>/hello</code>, and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-5-design-the-integration","title":"Step 5: Design the Integration.","text":"<ol> <li>Now that you have created the service, you can design the integration by adding resources and methods to it. The generated service will have a default resource named <code>greeting</code> with a <code>GET</code> method.</li> <li>Click on the <code>greeting</code> resource to view the resource details. Let's modify the resource to invoke the <code>HelloWorld</code> API endpoint.</li> <li>Hover to the arrow after start and click the <code>+</code> button to add a new action to the resource.</li> <li>Select <code>Add Connection</code> from the node panel on the left. </li> <li>Select <code>HTTP Connection</code> as the connection type.</li> <li>Change the variable name to <code>externalEP</code>.</li> <li> <p>Add the URL <code>https://apis.wso2.com</code> to the connection URL field and click <code>Save</code>.    </p> </li> <li> <p>Click the <code>+</code> button again and select <code>Connections</code>-&gt;<code>externalEP</code>-&gt;<code>Get</code> from the node panel.</p> </li> <li> <p>Enter the path <code>/zvdz/mi-qsg/v1.0</code> in the URL field and click <code>Save</code>.    </p> </li> <li> <p>Click on the <code>+</code> button again and select <code>Return</code> from the node panel.</p> </li> <li>Select the <code>value</code> variable from the dropdown and click <code>Save</code>. This step will return the response from the <code>HelloWorld</code> API endpoint.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-6-run-the-integration","title":"Step 6: Run the Integration.","text":"<ol> <li>Click on the <code>Run</code> on the run button at top right corner to run the integration.</li> <li>The integration will be compiled and started in the embedded Ballerina runtime.</li> <li>Once the integration is started, you can access the service by navigating to <code>http://localhost:9090/hello/greeting</code> in your web browser.</li> </ol>"},{"location":"learn/ei-patterns/","title":"Enterprise Integration Patterns","text":""},{"location":"learn/tutorials/","title":"Tutorials","text":""},{"location":"learn/use-cases/","title":"Ballerina Integrator Use Cases","text":""},{"location":"references/references/","title":"References","text":""}]}