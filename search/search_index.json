{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Kola is a comprehensive integration solution that simplifies your digital transformation journey. The Kola extension for Visual Studio Code (Kola for VS Code) enables developers to utilize the popular Visual Studio Code editor for integration development, enhancing the overall experience. This AI-assisted development environment offers a faster, customizable, and more intuitive experience, boosting productivity in integration development.                     Kola provides a range of features that streamline coding tasks, enhance code quality, and reduce time spent on error-prone processes. By leveraging AI capabilities, Kola empowers developers to focus on high-value tasks, accelerating digital transformation efforts.                      Quick Start Guide &gt; <p>                             Get started with Kola by running a simple integration use case in your local environment.                         </p> Low-code integration development <p>                             Kola provides a streamlined, user-friendly environment for building integrations with minimal coding, opening up integration tasks to both experienced developers and those new to coding. Here\u2019s how Kola\u2019s low-code capabilities simplify the integration development process:                         </p> <ul> <li>Design Visually: Kola\u2019s interface allows users to visually design integrations, making it easy to create and manage integration flows.</li> <li>Pre-built connectors: Kola offers a range of pre-built connectors that simplify the process of connecting to various systems and services.</li> <li>Reuse components: Kola enables users to create reusable components that can be shared across multiple integrations, reducing development time and effort.</li> <li>Automate testing: Kola provides automated testing capabilities that help users identify and resolve issues early in the development process.</li> <li>AI-assisted development: Kola\u2019s AI capabilities provide intelligent suggestions and recommendations that help users write code more efficiently and accurately.</li> </ul> AI-assisted development <p>                             Kola empowers developers by using AI to streamline coding tasks, enhance code quality, and reduce time spent on error-prone processes. Here\u2019s how Kola\u2019s AI capabilities make a difference:                         </p> <ul> <li>Code Suggestions and Autocompletion: Kola\u2019s AI offers context-aware suggestions, helping developers complete code faster and accurately with real-time prompts for methods, properties, or configurations.</li> <li>Error Detection and Fix Recommendations: AI actively detects errors and suggests fixes, preventing bugs early and improving code quality, reducing extensive debugging needs.</li> <li>Pattern Recognition and Code Optimization: Kola\u2019s AI identifies code patterns and suggests optimizations, improving performance and helping standardize code across teams.</li> <li>Natural Language Code Search and Commands: Developers can use natural language to search for code snippets or methods, reducing time spent on documentation and speeding up onboarding.</li> <li>Smart Refactoring and Code Restructuring: Kola\u2019s AI offers refactoring options, enabling confident code restructuring for a cleaner, maintainable codebase.</li> </ul> Leverage the Power of Ballerina <p>                             Kola to take advantage of a language purpose-built for integration development, allowing developers to handle cloud-native, API-driven integrations with simplicity and efficiency. Ballerina, the foundation of Kola, empowers developers with:                         </p> <ul> <li>Integration-Centric Syntax: Ballerina\u2019s syntax is designed for integration, minimizing boilerplate and enabling clear, concise logic with constructs like workers, channels, and error handling for API orchestration and data transformation.</li> <li>Cloud-Native and API-First Design: Ballerina supports cloud protocols like HTTP, WebSocket, gRPC, and Kafka, enabling seamless API interactions for microservices and API-first strategies.</li> <li>Visual Flow Representation: Ballerina\u2019s graphical view lets developers visualize integrations, offering an overview of data flow and logic essential for complex workflows.</li> <li>In-Built Observability and Resilience: Ballerina includes observability features, with distributed tracing, metrics, and logging for effective monitoring and debugging.</li> <li>Unified Data Handling and Transformations: Ballerina simplifies data handling with easy syntax for data transformations, reducing complexity in diverse data integrations.</li> <li>Built-In Testing and Deployment Tools: Ballerina includes tools for testing and deployment, ensuring scalable, reliable integrations in cloud environments.</li> </ul>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.</p>"},{"location":"build/docker/","title":"Build as a Docker image","text":"<p>This guide explains how to build an integration as a Docker image.</p> <ol> <li>Navigate to the Visualizer view by clicking on the Home icon (\ud83c\udfe0) on the sidebar.</li> <li>Click on the <code>Build</code> button in the top right corner of the Visualizer view.</li> <li> <p>Select <code>Docker Image</code> from the dropdown.      </p> </li> <li> <p>The integration will be built as a Docker image and the image will be available in the local Docker registry.</p> </li> </ol>"},{"location":"build/jar/","title":"Build an executable JAR","text":"<p>This guide explains how to build an integration as an executable JAR file.</p> <ol> <li>Navigate to the Visualizer view by clicking on the Home icon (\ud83c\udfe0) on the sidebar.</li> <li>Click on the <code>Build</code> button in the top right corner of the Visualizer view.</li> <li> <p>Select <code>Executable JAR</code> from the dropdown.      </p> </li> <li> <p>The integration will be built as an executable JAR and the JAR file will be available in the <code>target\\bin</code> directory of the project.</p> </li> </ol>"},{"location":"get-started/key-concepts/","title":"Key Concepts","text":"<p>WSO2 Ballerina Composer is an all-in-one integration solution that simplifies digital transformation by offering a powerful, configuration-driven approach. It enables developers to visually create integration solutions using an intuitive, low-code graphical interface, making the process faster and more accessible.</p>"},{"location":"get-started/key-concepts/#entrypoint","title":"Entrypoint","text":"<p>An entry point refers to the place in the code where the execution of a integration begins. It is the first function or method that is called when the program starts running.  In Ballerina Composer, there are 3 types of entry points:</p> <ol> <li>Service: A service is a network-accessible API that is defined by a set of resources and methods. Start your integration with a HTTP service.</li> <li>Automation: Triggers integration with a task. Perfect for scheduled or one-time jobs.</li> <li>Trigger: Initiate your integration with a Trigger. Best for event-driven actions from external sources.</li> </ol>"},{"location":"get-started/key-concepts/#connections","title":"Connections","text":"<p>Connections are used to connect to external systems and services. They are used to interact with external systems and services, such as databases, APIs, and messaging systems.  Ballerina Composer provides a wide range of connectors that can be used to connect to various systems and services.</p>"},{"location":"get-started/key-concepts/#functions","title":"Functions","text":"<p>Functions are reusable code blocks that can be called from different parts of the integration. They are used to perform specific tasks or calculations.</p>"},{"location":"get-started/key-concepts/#types","title":"Types","text":"<p>Types are used to define the structure of data in Ballerina Composer. They are used to define the shape of the data that is passed between different components of the integration.</p>"},{"location":"get-started/key-concepts/#configurations","title":"Configurations","text":"<p>Configurations are used to define the settings and parameters of the integration. They are used to configure the behavior of the integration and its components.</p>"},{"location":"get-started/quick-start-guide/","title":"Quick Start Guide","text":""},{"location":"get-started/quick-start-guide/#overview","title":"Overview","text":"<p>In this guide, you'll build a simple integration using the Kola plugin for Visual Studio Code. You'll create an HTTP service with a single resource named <code>greeting</code> that invokes the public Hello World API endpoint and returns the response.</p> <p></p>"},{"location":"get-started/quick-start-guide/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>Download and install the Visual Studio Code.</p>"},{"location":"get-started/quick-start-guide/#step-2-create-a-profile-in-visual-studio-code","title":"Step 2: Create a profile in Visual Studio Code.","text":"<ol> <li>Open the Visual Studio Code.</li> <li>Navigate to Settings-&gt;Profile-&gt;Profiles.</li> <li>Click on New Profile dropdown and select Create Profile.</li> <li>Enter the profile name as <code>Kola</code> and click Create.</li> <li>Click on the \u2714\ufe0f sign in front of the <code>Kola</code> profile to select the profile.  </li> </ol> <p>Profile</p> <p>To learn more about profiles, see Visual Studio Code Profiles.</p>"},{"location":"get-started/quick-start-guide/#step-3-install-the-kola-extension","title":"Step 3: Install the Kola extension.","text":"<ol> <li>Go to the Extensions view by clicking on the extension icon on the sidebar or pressing <code>Ctrl + Shift + X</code> on Windows and Linux, or <code>shift + \u2318 + X</code> on a Mac.</li> <li>Search for <code>Kola</code> in the Extensions view search box.</li> <li>Click on the <code>Install</code> button to install the <code>Kola</code> extension.    </li> <li>This will install Kola, KolaB extension to the Visual Studio Code IDE.</li> </ol>"},{"location":"get-started/quick-start-guide/#step-4-setup-kola-for-the-first-time","title":"Step 4: Setup Kola for the first time.","text":"<ol> <li>Click on the Kola icon on the sidebar.   </li> <li>Click on the <code>Set Up Kola</code> button.</li> <li>The setup wizard will install and configure the Ballerina distribution required for Kola.</li> <li>Click on the <code>Restart VSCode</code> button to complete the setup.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-5-create-a-new-integration-project","title":"Step 5: Create a new integration project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the Integration Name as <code>HelloWorld</code>.</li> <li>Select Project Directory by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-6-create-an-integration-service","title":"Step 6: Create an Integration Service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option. </li> <li>Enter the service name as <code>HelloWorldService</code>, path as <code>/hello</code>, and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-7-design-the-integration","title":"Step 7: Design the Integration.","text":"<ol> <li>Now that you have created the service, you can design the integration by adding resources and methods to it. The generated service will have a default resource named <code>greeting</code> with a <code>GET</code> method.</li> <li>Click on the <code>greeting</code> resource to view the resource details. Let's modify the resource to invoke the <code>HelloWorld</code> API endpoint.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Add Connection</code> from the node panel on the left. </li> <li>Select <code>HTTP Connection</code> as the connection type.</li> <li>Change the variable name to <code>externalEP</code>.</li> <li> <p>Add the URL <code>https://apis.wso2.com</code> to the connection URL field and click <code>Save</code>.    </p> </li> <li> <p>Click the \u2795 button again and select <code>Connections</code>-&gt;<code>externalEP</code>-&gt;<code>Get</code> from the node panel.</p> </li> <li> <p>Enter the path <code>/zvdz/mi-qsg/v1.0</code> in the URL field and click <code>Save</code>.    </p> </li> <li> <p>Click on the \u2795 button again and select <code>Return</code> from the node panel.</p> </li> <li>Select the <code>value</code> variable from the dropdown and click <code>Save</code>. This step will return the response from the <code>HelloWorld</code> API endpoint.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-8-run-the-integration","title":"Step 8: Run the Integration.","text":"<ol> <li>Click on the <code>Run</code> button at top right corner to run the integration.</li> <li>The integration will be compiled and started in the embedded Ballerina runtime.</li> <li>Once the integration is started, you can access the service by navigating to <code>http://localhost:9090/hello/greeting</code> in your web browser.</li> </ol>"},{"location":"learn/message-routing/","title":"Message Routing","text":"<p>In this tutorial, you'll create a service that allows users to reserve appointments at various hospitals. Requests will be directed to the appropriate hospital based on the request payload's content. To accomplish this, you\u2019ll build a REST service with a single resource in Visual Studio Code using the Ballerina Swan Lake extension. The resource will handle user requests, identify the hospital endpoint based on the hospital ID, forward the request to the specified hospital service to make the reservation, and return the reservation details.</p> <p>Here\u2019s an overview of the process flow.</p> <p></p> <ol> <li>Receive a request with a JSON payload similar to the following.     ReservationRequest.json<pre><code>{\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"doctor\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"hospital_id\": \"grandoak\",\n\"appointment_date\": \"2023-10-02\"\n}\n</code></pre></li> <li> <p>Extract the <code>hospital_id</code> field and select the corresponding hospital service endpoint.</p> <ul> <li>grandoak -&gt; http://localhost:9090/grandoak/categories</li> <li>clemency -&gt; http://localhost:9090/clemency/categories</li> <li>pinevalley -&gt; http://localhost:9090/pinevalley/categories </li> </ul> </li> <li> <p>Forward the request to the selected hospital service and retrieve the response which will be similar to the following.     ReservationResponse.json<pre><code>{\n\"appointmentNumber\": 8,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></p> </li> </ol>"},{"location":"learn/message-routing/#prerequisites","title":"Prerequisites","text":"<ol> <li>Download the JAR file for the backend service and execute the following command to start the service.</li> <li>Install the latest Ballerina Swan Lake version.</li> </ol>"},{"location":"learn/message-routing/#implementation","title":"Implementation","text":"<p>Follow the steps below to implement the message routing service.</p>"},{"location":"learn/message-routing/#step-1-create-a-new-integration-project","title":"Step 1: Create a new Integration Project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>MessageRouting</code>.</li> <li>Select Project Directory and click on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.</li> </ol>"},{"location":"learn/message-routing/#step-2-create-an-integration-service","title":"Step 2: Create an Integration Service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>HealthCare</code>, path as <code>/healthcare</code>, and <code>8290</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/message-routing/#step-3-define-types","title":"Step 3: Define types","text":"<ol> <li>Click on the <code>Add Construct</code> button and select <code>Type</code>.</li> <li>Select <code>Import a JSON</code> from the Type dropdown.</li> <li>Generate record types corresponding to the response from the hospital backend service by providing a sample of the expected JSON payload.     <pre><code>{\n\"appointmentNumber\": 1,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> <li>Click on the <code>Create Type</code> button to create the new type with the specified configurations. </li> </ol>"},{"location":"learn/message-routing/#step-3-add-connectors","title":"Step 3: Add connectors","text":"<ol> <li>Navigate to design view and click on the <code>Add Connector</code> button.</li> <li>Search and select the <code>HTTP</code> connector.</li> <li>Enter the connector name as <code>grandOakEP</code>, URL as <code>http://localhost:9090/grandoak/categories</code>, and config as <code>{}</code>.</li> <li>Click on the <code>Create Connector</code> button to create the new connector with the specified configurations. </li> <li> <p>Repeat the above steps to add connectors for the <code>clemency</code> and <code>pinevalley</code> hospitals with the following configurations.</p> Connector Name URL Config grandOakEP http://localhost:9090/grandoak/categories <code>{}</code> clemencyEP http://localhost:9090/clemency/categories <code>{}</code> pineValleyEP http://localhost:9090/pinevalley/categories <code>{}</code> </li> <li> <p>The final connectors will look like below.    </p> </li> </ol> HTTP Connector<p>To learn more about HTTP client, see Ballerina HTTP Client. See supported client configurations in the HTTP Client Configurations.</p>"},{"location":"learn/message-routing/#step-3-add-a-resource-method","title":"Step 3: Add a resource method","text":"<ol> <li>The service will be generated with a default resource named <code>greeting</code>. Click on the service to view and update the resource details.</li> <li>Click on three dots appear in front of the <code>greeting</code> resource and select edit to view and update the resource details.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>categories/[string category]/reserve</code></li> <li>Add a payload parameter named <code>reservation</code> to the resource of type <code>ReservationRequest</code>.</li> <li>Change the 201 response return type to <code>ReservationResponse</code>.</li> <li>Add a new response of type <code>HttpNotFound</code> under the responses.</li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations.    </li> </ol>"},{"location":"learn/message-routing/#step-4-add-the-routing-logic","title":"Step 4: Add the routing logic","text":"<ol> <li>Click on the <code>categories/[string category]/reserve</code> resource to navigate to the resource implementation designer view.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Variable</code> from the node panel on the left. This variable will be used to store the request payload for the hospital service.</li> <li>Change the variable name to <code>hospitalRequset</code>, type as <code>json</code> and expression:     <pre><code>     {\n     patient: reservation.patient.toJson(),\n     doctor: reservation.doctor,\n     hospital: reservation.hospital,\n     appointment_date: reservation.appointment_date\n    }\n</code></pre></li> <li>Select <code>If</code> from the node panel on the left.</li> <li>Enter the conditions as <code>If</code> <code>Else If</code> blocks as below for each hospital id and press <code>Save</code>.  conditions:<ul> <li>grandOak -&gt; <code>reservation.hospital_id == \"grandoak\"</code></li> <li>clemency -&gt; <code>reservation.hospital_id == \"clemency\"</code></li> <li>pineValley -&gt; <code>reservation.hospital_id == \"pinevalley\"</code> </li> </ul> </li> <li>Select the <code>grandOakEP</code> condition true path \u2795 sign and select <code>grandOakEP</code> connector from the node panel. </li> <li> <p>Select <code>Post</code> from the dropdown. Then fill the required fields with values given below and click <code>Save</code>.</p> Field Value Variable Name <code>oakEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>/[category]/reserve</code> message <code>hospitalRequset</code> </li> <li> <p>Click on the \u2795 sign again and select <code>Return</code> from the node panel. Select the <code>epReponse</code> variable from the dropdown and click <code>Save</code>.</p> </li> <li> <p>Repeat the 7,8,9 steps for the <code>clemency</code> and <code>pinevalley</code> hospitals with the following configurations.</p> <p>clemency:</p> Field Value Variable Name <code>clemncyEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>/[category]/reserve</code> message <code>hospitalRequset</code> <p>pinevalley:</p> Field Value Variable Name <code>pineValleyEPResponse</code> Variable Type <code>ReserveResponse</code> Resource Path <code>/[category]/reserve</code> message <code>hospitalRequset</code> </li> <li> <p>For the else condition, click on the <code>If</code> condition <code>Else</code> path \u2795 sign and add a <code>Return</code> from the node panel. Enter <code>http:NOT_FOUND</code> as the value and click <code>Save</code>.             </p> </li> <li>The final design will look like below.            </li> </ol>"},{"location":"learn/message-routing/#step-5-run-the-service","title":"Step 5: Run the service","text":"<ol> <li>Start the backend service by executing the following command.     <pre><code>$ bal run hospitalservice.jar\n</code></pre></li> <li>Click on the <code>Run</code> on the run button in the top right corner to run the service.</li> <li>The service will start and the service will be available at <code>http://localhost:8290/healthcare/categories/[category]/reserve</code>.</li> <li>Use a tool like Postman to send a POST request to the service with the following payload.    <pre><code> curl -X POST \"http://localhost:8290/healthcare/categories/surgery/reserve\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n \"patient\": {\n \"name\": \"John Doe\",\n \"dob\": \"1940-03-19\",\n \"ssn\": \"234-23-525\",\n \"address\": \"California\",\n \"phone\": \"8770586755\",\n \"email\": \"johndoe@gmail.com\"\n },\n \"doctor\": \"thomas collins\",\n \"hospital_id\": \"grandoak\",\n \"hospital\": \"grand oak community hospital\",\n \"appointment_date\": \"2023-10-02\"\n }'\n</code></pre></li> <li>The response will be similar to the following.     <pre><code>{\n\"appointmentNumber\": 1,\n\"doctor\": {\n\"name\": \"thomas collins\",\n\"hospital\": \"grand oak community hospital\",\n\"category\": \"surgery\",\n\"availability\": \"9.00 a.m - 11.00 a.m\",\n\"fee\": 7000.0\n},\n\"patient\": {\n\"name\": \"John Doe\",\n\"dob\": \"1940-03-19\",\n\"ssn\": \"234-23-525\",\n\"address\": \"California\",\n\"phone\": \"8770586755\",\n\"email\": \"johndoe@gmail.com\"\n},\n\"hospital\": \"grand oak community hospital\",\n\"confirmed\": false,\n\"appointmentDate\": \"2023-10-02\"\n}\n</code></pre></li> </ol>"},{"location":"learn/message-transformation/","title":"Message Transformation","text":""},{"location":"learn/message-transformation/#overview","title":"Overview","text":"<p>This guide explains how to create a simple integration to convert a JSON payload to an XML payload using the Kola. An HTTP service with a single resource (<code>toXml</code>) will be created to accept a JSON payload and return the XML representation of the payload. </p>"},{"location":"learn/message-transformation/#step-1-create-a-new-integration-project","title":"Step 1: Create a new Integration Project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>JsonToXml</code>.</li> <li>Select Project Directory by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.    </li> </ol>"},{"location":"learn/message-transformation/#step-2-create-an-integration-service","title":"Step 2: Create an Integration Service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>JsonToXml</code>, path as <code>/convert</code>, and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/message-transformation/#step-3-update-the-resource-method","title":"Step 3: Update the resource method","text":"<ol> <li>Click on three dots appear in front of the <code>greeting</code> resource and select edit to view and update the resource details.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>toXml</code></li> <li>Add a payload parameter named <code>input</code> to the resource of type <code>json</code>. </li> <li>Change the 200 response return type to <code>xml</code>.</li> <li>Add a new response of type <code>HttpBadRequest</code> under the responses. </li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations.     </li> </ol> <p>Resource Method</p> <p>To learn more about resources, see Ballerina Resources.</p>"},{"location":"learn/message-transformation/#step-4-add-the-transformation-logic","title":"Step 4: Add the transformation logic","text":"<ol> <li>Click on the <code>toXml</code> resource to navigate to the resource implementation designer view.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Variable</code> from the node panel on the left.</li> <li>Change the variable name to <code>xmlData</code>, type as <code>xml | ()</code> and expression to <code>check xmldata:fromJson(input)</code>.    </li> </ol> <p>JSON to XML Conversion</p> <p>To learn more about json to xml conversion, see Ballerina JSON to XML conversion.</p>"},{"location":"learn/message-transformation/#step-5-error-handling","title":"Step 5: Error handling","text":"<ol> <li>Click on the \u2795 button again and select <code>If</code> from the node panel.</li> <li>Enter the condition as <code>xmlData is xml</code> and press <code>Save</code>.    </li> <li>Click on the <code>If</code> condition true(<code>xmlData is xml</code>)  path \u2795 sign and add a <code>Return</code> from the node panel.</li> <li>Select the <code>xmlData</code> variable from the dropdown and click <code>Save</code>.    </li> <li>Click on the <code>If</code> condition <code>Else</code> path \u2795 sign and add another <code>Return</code> from the node panel.</li> <li>Enter <code>http:BadRequest</code> as the value and click <code>Save</code>.    </li> <li>The final design will look like below.            </li> <li>The final code will look like below. The source view can be accessed by clicking on the <code>&lt;/&gt;</code> button in the top right corner.    <pre><code>import ballerina/http;\nimport ballerina/xmldata;\n\nservice /convert on new http:Listener(9090) {\n\n    function init() returns error? {\n    }\n\n    resource function post toXml(@http:Payload json input) returns xml|http:InternalServerError|http:BadRequest {\n        do {\n\n            xml? xmlData = check xmldata:fromJson(input);\n            if xmlData is xml {\n                return xmlData;\n            } else {\n                return http:BAD_REQUEST;\n            }\n\n        } on fail error e {\n            return http:INTERNAL_SERVER_ERROR;\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"learn/message-transformation/#step-6-run-the-integration","title":"Step 6: Run the integration","text":"<ol> <li>Click on the <code>Run</code> on the run button in the top right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:9090/convert</code>.</li> <li>The service can be tested using a tool like Postman or curl by sending a POST request with a JSON payload to the service endpoint.    <pre><code>curl -X POST \"http://localhost:9090/convert/toXml\" -H \"Content-Type: application/json\" -d '{\"name\":\"John\", \"age\":30, \"car\":\"Honda\"}'\n</code></pre></li> <li>The response will be an XML representation of the JSON payload. <code>&lt;root&gt;         &lt;name&gt;John&lt;/name&gt;         &lt;age&gt;30&lt;/age&gt;         &lt;car&gt;Honda&lt;/car&gt;     &lt;/root&gt;</code></li> </ol>"},{"location":"roadmap/language-support/","title":"Supported Ballerina language features","text":"<p>This document provides a high-level overview of the Ballerina language features that are supported in the Kola low code environment.  </p>"},{"location":"roadmap/language-support/#core-language-features","title":"Core Language Features","text":"Language Feature Availability Note Functions Yes A limited set of function signature syntax is supported. Service Declaration Yes A limited set of Service declaration syntax is supported. Types Yes Readonly entity relationship diagram available. Editing capabilities will be available in the M4. Configurables Yes Listeners Yes A limited set of Listeners are supported. See Note 1. Global Variables/Contests No Will be available in the M5. Workers No Will be available in the M4. Note1<p>M3 Supports the following service types.</p> <ol> <li>HTTP Service</li> <li>Messaging connectors (Kafka, RabbitMQ, NATS, MQTT, JMS, ASB)</li> <li>GitHub Events Trigger</li> <li>Salesforce Events Trigger</li> </ol>"},{"location":"roadmap/language-support/#supported-statements","title":"Supported Statements","text":"Statement Availability Note Variable Definition Statement M3 Only simple type binding (single variable statements) is supported in M3. Assignment Statement M3 Only simple type binding (single variable statements) is supported in M3. If Statement M3 While Statement M3 Foreach Statement M3 Only simple type binding (single variable statements) is supported in M3. Break Statement M3 Continue Statement M3 Fail M3 Panic M3 Lock M4 Fork Statements M4 Wait Statements M4 Do-on-Fail (Error handling) M4 Transaction Statement M4 Retry and Retry-Transaction M4 Match Statement M4 Worker Interaction Statements M5"},{"location":"roadmap/roadmap/","title":"Roadmap","text":"<p>This document provides a high-level overview of the Kola roadmap. The roadmap is subject to change and may not include all the features that are planned for future releases.</p>"},{"location":"roadmap/roadmap/#milestone-4-m4","title":"Milestone 4 (M4)","text":""},{"location":"roadmap/roadmap/#service-view-enhancements","title":"Service View Enhancements","text":"<ul> <li>GraphQL Service Designer \u2013 Enables the creation of GraphQL services within a low-code-friendly environment.</li> </ul>"},{"location":"roadmap/roadmap/#low-code-diagram-features","title":"Low-Code Diagram Features","text":"<ul> <li>Concurrency Nodes \u2013 Adds support for Fork, Wait, and Lock statements.</li> <li>Transactional Nodes \u2013 Includes Transaction and Retry statements for enhanced transaction handling.</li> </ul>"},{"location":"roadmap/roadmap/#expression-editor-enhancements","title":"Expression Editor Enhancements","text":"<ul> <li>Inline Data Mapper \u2013 Visualize expressions as data mappings.</li> </ul>"},{"location":"roadmap/roadmap/#ballerina-language-features","title":"Ballerina Language Features","text":"<ul> <li>Type Editing Support \u2013 Allows editing/updating for types such as Records and Enums.</li> </ul>"},{"location":"roadmap/roadmap/#testing-enhancements","title":"Testing Enhancements","text":"<ul> <li>Test Visualization \u2013 Visualizes test flows for better understanding.</li> <li>AI-Assisted Test Generation \u2013 Supports automated test creation with AI assistance.</li> </ul>"},{"location":"roadmap/roadmap/#connections","title":"Connections","text":"<ul> <li>OpenAPI Specification-Based Connections \u2013 Facilitates creating connections directly from OpenAPI specifications.</li> </ul>"},{"location":"roadmap/roadmap/#milestone-5-m5-alpha","title":"Milestone 5 (M5 - Alpha)","text":""},{"location":"roadmap/roadmap/#visual-debugging-capabilities","title":"Visual Debugging Capabilities","text":"<ul> <li>Flow Debugging with Visual Breakpoints \u2013 Debug integration flows with breakpoints and visualize intermediate values.</li> </ul>"},{"location":"roadmap/roadmap/#additional-graphical-features","title":"Additional Graphical Features","text":"<ul> <li>XSD-Based Type Creation \u2013 Allows type creation from XSD schemas.</li> </ul>"},{"location":"roadmap/roadmap/#testing-enhancements_1","title":"Testing Enhancements","text":"<ul> <li>Low-Code Tools for Mock Services and Connections \u2013 Provides tools tailored for creating mock services and connections.</li> </ul>"},{"location":"roadmap/roadmap/#other-features","title":"Other Features","text":"<ul> <li>ICP 2.0 Integration \u2013 Offers a comprehensive toolset for monitoring integration metrics, logs, and traces, as well as managing integration writing in Kola.</li> <li>Choreo Integration \u2013 Provides a robust toolset for deploying and hosting integrations on the Choreo platform and Cloud.</li> </ul>"}]}