{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Kola is a comprehensive integration solution that simplifies your digital transformation journey. The Kola extension for Visual Studio Code (Kola for VS Code) enables developers to utilize the popular Visual Studio Code editor for integration development, enhancing the overall experience. This AI-assisted development environment offers a faster, customizable, and more intuitive experience, boosting productivity in integration development.                     Kola provides a range of features that streamline coding tasks, enhance code quality, and reduce time spent on error-prone processes. By leveraging AI capabilities, Kola empowers developers to focus on high-value tasks, accelerating digital transformation efforts.                      Quick Start Guide <p>                             Get started with Kola by running a simple integration use case in your local environment.                         </p> Low-code integration development <p>                             Kola provides a streamlined, user-friendly environment for building integrations with minimal coding, opening up integration tasks to both experienced developers and those new to coding. Here\u2019s how Kola\u2019s low-code capabilities simplify the integration development process:                         </p> <ul> <li>Design Visually: Kola\u2019s interface allows users to visually design integrations, making it easy to create and manage integration flows.</li> <li>Pre-built connectors: Kola offers a range of pre-built connectors that simplify the process of connecting to various systems and services.</li> <li>Reuse components: Kola enables users to create reusable components that can be shared across multiple integrations, reducing development time and effort.</li> <li>Automate testing: Kola provides automated testing capabilities that help users identify and resolve issues early in the development process.</li> <li>AI-assisted development: Kola\u2019s AI capabilities provide intelligent suggestions and recommendations that help users write code more efficiently and accurately.</li> </ul> AI-assisted development <p>                             Kola empowers developers by using AI to streamline coding tasks, enhance code quality, and reduce time spent on error-prone processes. Here\u2019s how Kola\u2019s AI capabilities make a difference:                         </p> <ul> <li>Code Suggestions and Autocompletion: The AI in Kola for VS Code provides context-aware suggestions, helping developers complete lines of code or entire blocks accurately. These real-time prompts assist in selecting the best methods, properties, or configurations, which can significantly speed up the coding process.</li> <li>Error Detection and Fix Recommendations: AI continuously analyzes the code as it's written, flagging potential errors or inconsistencies and suggesting fixes. This proactive error handling helps prevent bugs and enhances code quality, enabling developers to correct issues early, reducing the need for extensive debugging.</li> <li>Pattern Recognition and Code Optimization: By recognizing patterns in the code, Kola\u2019s AI suggests optimizations, streamlining performance or even recommending best practices. This can be particularly useful for new developers or teams looking to standardize code across projects.</li> <li>Natural Language Code Search and Commands: Kola\u2019s AI allows developers to use natural language to search for code snippets, methods, or libraries, reducing the time spent manually browsing documentation or previous code. This also enables quicker onboarding, as developers can intuitively ask questions or search within the IDE.</li> <li>Smart Refactoring and Code Restructuring: As applications evolve, restructuring code becomes critical. Kola\u2019s AI offers intelligent refactoring options, enabling developers to restructure code confidently without breaking functionality. This minimizes technical debt and makes the codebase cleaner and more maintainable.</li> </ul> Leverage the Power of Ballerina <p>                             Kola to take advantage of a language purpose-built for integration development, allowing developers to handle cloud-native, API-driven integrations with simplicity and efficiency. Ballerina, the foundation of Kola, empowers developers with:                         </p> <ul> <li>Integration-Centric Syntax: Ballerina\u2019s intuitive syntax is tailored for integration, minimizing boilerplate code and enabling developers to write integration logic in a clear, concise way. With constructs like workers, channels, and error handling, Ballerina is ideal for tasks like API orchestration and data transformation.</li> <li>Cloud-Native and API-First Design: Ballerina is built for the cloud, supporting protocols such as HTTP, WebSocket, gRPC, and Kafka, which are crucial for microservices and cloud-based architectures. This design enables seamless API interactions, making Ballerina ideal for modern API-first strategies.</li> <li>Visual Flow Representation: Ballerina\u2019s graphical representation lets developers visualize integrations as they code, creating a bridge between code and design. This visual approach offers a flow-based overview of data movement and logic, essential for understanding complex workflows.</li> <li>In-Built Observability and Resilience: Ballerina provides observability features out of the box, allowing developers to monitor integrations with distributed tracing, metrics, and logging\u2014key tools for maintaining and debugging in distributed environments.</li> <li>Unified Data Handling and Transformations: Ballerina simplifies data handling by offering easy syntax for defining data transformations and mappings, reducing complexity when integrating diverse data sources in integration workflows.</li> <li>Built-In Testing and Deployment Tools: Ballerina includes testing and deployment automation, streamlining validation and deployment in cloud environments. These tools ensure reliable, scalable integrations, even across diverse infrastructures.</li> </ul>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.</p>"},{"location":"build/docker/","title":"Build as a Docker image","text":"<p>This guide explains how to build an integration as a Docker image.</p> <ol> <li>Navigate to the Visualizer view by clicking on the Home icon (\ud83c\udfe0) on the sidebar.</li> <li>Click on the <code>Build</code> button in the top right corner of the Visualizer view.</li> <li> <p>Select <code>Docker Image</code> from the dropdown.      </p> </li> <li> <p>The integration will be built as a Docker image and the image will be available in the local Docker registry.</p> </li> </ol>"},{"location":"build/jar/","title":"Build an executable JAR","text":"<p>This guide explains how to build an integration as an executable JAR file.</p> <ol> <li>Navigate to the Visualizer view by clicking on the Home icon (\ud83c\udfe0) on the sidebar.</li> <li>Click on the <code>Build</code> button in the top right corner of the Visualizer view.</li> <li> <p>Select <code>Executable JAR</code> from the dropdown.      </p> </li> <li> <p>The integration will be built as an executable JAR and the JAR file will be available in the <code>target\\bin</code> directory of the project.</p> </li> </ol>"},{"location":"get-started/key-concepts/","title":"Key Concepts","text":"<p>WSO2 Ballerina Composer is an all-in-one integration solution that simplifies digital transformation by offering a powerful, configuration-driven approach. It enables developers to visually create integration solutions using an intuitive, low-code graphical interface, making the process faster and more accessible.</p>"},{"location":"get-started/key-concepts/#entrypoint","title":"Entrypoint","text":"<p>An entry point refers to the place in the code where the execution of a integration begins. It is the first function or method that is called when the program starts running.  In Ballerina Composer, there are 3 types of entry points:</p> <ol> <li>Service: A service is a network-accessible API that is defined by a set of resources and methods. Start your integration with a HTTP service.</li> <li>Automation: Triggers integration with a task. Perfect for scheduled or one-time jobs.</li> <li>Trigger: Initiate your integration with a Trigger. Best for event-driven actions from external sources.</li> </ol>"},{"location":"get-started/key-concepts/#connections","title":"Connections","text":"<p>Connections are used to connect to external systems and services. They are used to interact with external systems and services, such as databases, APIs, and messaging systems.  Ballerina Composer provides a wide range of connectors that can be used to connect to various systems and services.</p>"},{"location":"get-started/key-concepts/#functions","title":"Functions","text":"<p>Functions are reusable code blocks that can be called from different parts of the integration. They are used to perform specific tasks or calculations.</p>"},{"location":"get-started/key-concepts/#types","title":"Types","text":"<p>Types are used to define the structure of data in Ballerina Composer. They are used to define the shape of the data that is passed between different components of the integration.</p>"},{"location":"get-started/key-concepts/#configurations","title":"Configurations","text":"<p>Configurations are used to define the settings and parameters of the integration. They are used to configure the behavior of the integration and its components.</p>"},{"location":"get-started/quick-start-guide/","title":"Quick Start Guide","text":""},{"location":"get-started/quick-start-guide/#overview","title":"Overview","text":"<p>In this guide, a simple integration will be built using the Kola Integrator plugin for Visual Studio Code. An HTTP service with a single resource (<code>greeting</code>) will be created to invoke the public <code>HelloWorld</code> API endpoint and return the response. </p>"},{"location":"get-started/quick-start-guide/#step-1-download-the-visual-studio-code-vscode-ide","title":"Step 1: Download the Visual Studio Code (VSCode) IDE.","text":"<p>Download and install the Visual Studio Code IDE from here.</p>"},{"location":"get-started/quick-start-guide/#step-2-install-the-kola-vscode-profile","title":"Step 2: Install the Kola VSCode profile.","text":"<ol> <li>Open the Visual Studio Code IDE.</li> <li>Download and unzip the Kola VSCode profile from here.</li> <li>Navigate to Settings-&gt;Profile-&gt;Profiles.</li> <li>Click on Profile dropdown and select <code>Import Profile</code>.</li> <li>Select the extracted Kola VSCode <code>Kola.code-profile</code> profile and click <code>Create</code>.     </li> <li>Navigate to Settings-&gt;Profile and select the <code>Kola</code> profile from the dropdown.</li> </ol>"},{"location":"get-started/quick-start-guide/#step-3-setup-kola-for-the-first-time","title":"Step 3: Setup Kola for the first time.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.    </li> <li>Click on the <code>Setup</code> button.</li> <li>The setup wizard will install and configure the Ballerina distribution required for Kola.</li> <li>Click on the <code>Restart VSCode</code> button to complete the setup.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-4-create-a-new-integration-project","title":"Step 4: Create a new Integration Project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>HelloWorld</code>.</li> <li>Select Project Directory by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-4-create-an-integration-service","title":"Step 4: Create an Integration Service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option. </li> <li>Enter the service name as <code>HelloWorldService</code>, path as <code>/hello</code>, and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-5-design-the-integration","title":"Step 5: Design the Integration.","text":"<ol> <li>Now that you have created the service, you can design the integration by adding resources and methods to it. The generated service will have a default resource named <code>greeting</code> with a <code>GET</code> method.</li> <li>Click on the <code>greeting</code> resource to view the resource details. Let's modify the resource to invoke the <code>HelloWorld</code> API endpoint.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Add Connection</code> from the node panel on the left. </li> <li>Select <code>HTTP Connection</code> as the connection type.</li> <li>Change the variable name to <code>externalEP</code>.</li> <li> <p>Add the URL <code>https://apis.wso2.com</code> to the connection URL field and click <code>Save</code>.    </p> </li> <li> <p>Click the \u2795 button again and select <code>Connections</code>-&gt;<code>externalEP</code>-&gt;<code>Get</code> from the node panel.</p> </li> <li> <p>Enter the path <code>/zvdz/mi-qsg/v1.0</code> in the URL field and click <code>Save</code>.    </p> </li> <li> <p>Click on the \u2795 button again and select <code>Return</code> from the node panel.</p> </li> <li>Select the <code>value</code> variable from the dropdown and click <code>Save</code>. This step will return the response from the <code>HelloWorld</code> API endpoint.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-6-run-the-integration","title":"Step 6: Run the Integration.","text":"<ol> <li>Click on the <code>Run</code> on the run button at top right corner to run the integration.</li> <li>The integration will be compiled and started in the embedded Ballerina runtime.</li> <li>Once the integration is started, you can access the service by navigating to <code>http://localhost:9090/hello/greeting</code> in your web browser.</li> </ol>"},{"location":"learn/connect-database/","title":"Connecting to Redis with Kola","text":"<p>In this guide, you will learn how to connect to a redis server and perform basic operations such as <code>set</code>, <code>get</code>, <code>delete</code>, and <code>exists</code> using the Kola Integrator.</p>"},{"location":"learn/json-xml-transform/","title":"Message Transformation: JSON to XML","text":""},{"location":"learn/json-xml-transform/#overview","title":"Overview","text":"<p>This guide explains how to create a simple integration to convert a JSON payload to an XML payload using the Kola. An HTTP service with a single resource (<code>toXml</code>) will be created to accept a JSON payload and return the XML representation of the payload. </p>"},{"location":"learn/json-xml-transform/#step-1-create-a-new-integration-project","title":"Step 1: Create a new Integration Project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>JsonToXml</code>.</li> <li>Select Project Directory by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.    </li> </ol>"},{"location":"learn/json-xml-transform/#step-2-create-an-integration-service","title":"Step 2: Create an Integration Service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>JsonToXml</code>, path as <code>/convert</code>, and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/json-xml-transform/#step-3-update-the-resource-method","title":"Step 3: Update the resource method","text":"<ol> <li>Click on three dots appear in front of the <code>greeting</code> resource and select edit to view and update the resource details.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>toXml</code></li> <li>Add a payload parameter named <code>input</code> to the resource of type <code>json</code>. </li> <li>Change the 200 response return type to <code>xml</code>.</li> <li>Add a new response of type <code>HttpBadRequest</code> under the responses. </li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations.     </li> </ol> <p>Resource Method</p> <p>To learn more about resources, see Ballerina Resources.</p>"},{"location":"learn/json-xml-transform/#step-4-add-the-transformation-logic","title":"Step 4: Add the transformation logic","text":"<ol> <li>Click on the <code>toXml</code> resource to navigate to the resource implementation designer view.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Variable</code> from the node panel on the left.</li> <li>Change the variable name to <code>xmlData</code>, type as <code>xml | ()</code> and expression to <code>check xmldata:fromJson(input)</code>.    </li> </ol> <p>JSON to XML Conversion</p> <p>To learn more about json to xml conversion, see Ballerina JSON to XML conversion.</p>"},{"location":"learn/json-xml-transform/#step-5-error-handling","title":"Step 5: Error handling","text":"<ol> <li>Click on the \u2795 button again and select <code>If</code> from the node panel.</li> <li>Enter the condition as <code>xmlData is xml</code> and press <code>save</code>.    </li> <li>Click on the <code>If</code> condition true(<code>xmlData is xml</code>)  path \u2795 sign and add a <code>Return</code> from the node panel.</li> <li>Select the <code>xmlData</code> variable from the dropdown and click <code>Save</code>.    </li> <li>Click on the <code>If</code> condition <code>Else</code> path \u2795 sign and add another <code>Return</code> from the node panel.</li> <li>Enter <code>http:BadRequest</code> as the value and click <code>Save</code>.    </li> <li>The final design will look like below.            </li> <li>The final code will look like below. The source view can be accessed by clicking on the <code>&lt;/&gt;</code> button in the top right corner.    <pre><code>import ballerina/http;\nimport ballerina/xmldata;\n\nservice /convert on new http:Listener(9090) {\n\n    function init() returns error? {\n    }\n\n    resource function post toXml(@http:Payload json input) returns xml|http:InternalServerError|http:BadRequest {\n        do {\n\n            xml? xmlData = check xmldata:fromJson(input);\n            if xmlData is xml {\n                return xmlData;\n            } else {\n                return http:BAD_REQUEST;\n            }\n\n        } on fail error e {\n            return http:INTERNAL_SERVER_ERROR;\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"learn/json-xml-transform/#step-6-run-the-integration","title":"Step 6: Run the integration","text":"<ol> <li>Click on the <code>Run</code> on the run button in the top right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:9090/convert</code>.</li> <li>The service can be tested using a tool like Postman or curl by sending a POST request with a JSON payload to the service endpoint.    <pre><code>curl -X POST \"http://localhost:9090/convert/toXml\" -H \"Content-Type: application/json\" -d '{\"name\":\"John\", \"age\":30, \"car\":\"Honda\"}'\n</code></pre></li> <li>The response will be an XML representation of the JSON payload. <code>&lt;root&gt;         &lt;name&gt;John&lt;/name&gt;         &lt;age&gt;30&lt;/age&gt;         &lt;car&gt;Honda&lt;/car&gt;     &lt;/root&gt;</code></li> </ol>"},{"location":"roadmap/language-support/","title":"Supported Ballerina language features","text":"<p>This document provides a high-level overview of the Ballerina language features that are supported in the current release. The Ballerina language is designed to be a general-purpose programming language that supports a wide range of use cases.  The language is designed to be easy to learn and use, with a focus on simplicity and expressiveness.</p>"},{"location":"roadmap/roadmap/","title":"Roadmap","text":"<p>This document provides a high-level overview of the Kola roadmap. The roadmap is subject to change and may not include all the features that are planned for future releases.</p>"}]}