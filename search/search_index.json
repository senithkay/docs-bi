{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WSO2 Kola Documentation","text":"<p>WSO2 Kola is a comprehensive integration solution that simplifies your digital transformation journey.</p> <p>The Kola extension for Visual Studio Code (Kola for VS Code) enables developers to utilize the popular Visual Studio Code editor for integration development, enhancing the overall experience. This AI-assisted development environment offers a faster, customizable, and more intuitive experience, boosting productivity in integration development. Kola provides a range of features that streamline coding tasks, enhance code quality, and reduce time spent on error-prone processes. By leveraging AI capabilities, Kola empowers developers to focus on high-value tasks, accelerating digital transformation efforts.</p>"},{"location":"#low-code-integration-development","title":"Low-code integration development","text":"<p>Kola provides a streamlined, user-friendly environment for building integrations with minimal coding, opening up integration tasks to both experienced developers and those new to coding. Here\u2019s how Kola\u2019s low-code capabilities simplify the integration development process:</p> <ul> <li>Visual Designer Interface: Kola includes visual tools that let developers create integration workflows by simply dragging and dropping pre-built components. This visual builder reduces the need for manual coding, allowing users to connect systems and data sources without extensive syntax knowledge.</li> <li>Pre-Built Connectors and Templates: With an extensive library of connectors and templates, Kola enables users to quickly incorporate common integration patterns and connect to popular systems like databases, cloud services, and enterprise applications. This eliminates repetitive setup work and accelerates development.</li> <li>Parameterized Configurations: Kola\u2019s low-code environment supports easy configuration of workflows using parameters, making it possible to adjust integrations without coding. This flexibility simplifies the process of tailoring integrations to specific use cases while maintaining consistency.</li> <li>AI-Powered Recommendations for Components: Kola leverages AI to suggest components, mappings, and configurations based on the current workflow context. This feature helps guide developers through building integrations efficiently, even if they\u2019re not deeply familiar with the underlying code.</li> <li>Testing and Deployment Automation: The low-code environment integrates testing and deployment tools that enable users to validate integrations quickly and push them to production with minimal manual intervention. Automated testing helps ensure that workflows function as intended, while deployment tools streamline the release process.</li> <li>Collaboration-Friendly Design: Low-code tools in Kola for VS Code promote collaboration between developers and business teams by allowing users with different technical backgrounds to contribute to integration projects. This inclusive approach helps bridge the gap between technical and non-technical team members.</li> <li>Visual design: Kola for VS Code provides a visual design experience that simplifies integration development. By offering these low-code features, Kola for VS Code makes integration development accessible, faster, and more flexible. It enables teams to focus on delivering value through integration rather than getting bogged down in complex coding tasks, ultimately accelerating digital transformation efforts.</li> </ul>"},{"location":"#ai-assisted-development","title":"AI-assisted development","text":"<p>Kola empowers developers by using AI to streamline coding tasks, enhance code quality, and reduce time spent on error-prone processes. Here\u2019s how Kola\u2019s AI capabilities make a difference:</p> <ul> <li>Code Suggestions and Autocompletion: The AI in Kola for VS Code provides context-aware suggestions, helping developers complete lines of code or entire blocks accurately. These real-time prompts assist in selecting the best methods, properties, or configurations, which can significantly speed up the coding process.</li> <li>Error Detection and Fix Recommendations: AI continuously analyzes the code as it's written, flagging potential errors or inconsistencies and suggesting fixes. This proactive error handling helps prevent bugs and enhances code quality, enabling developers to correct issues early, reducing the need for extensive debugging.</li> <li>Pattern Recognition and Code Optimization: By recognizing patterns in the code, Kola\u2019s AI suggests optimizations, streamlining performance or even recommending best practices. This can be particularly useful for new developers or teams looking to standardize code across projects.</li> <li>Natural Language Code Search and Commands: Kola\u2019s AI allows developers to use natural language to search for code snippets, methods, or libraries, reducing the time spent manually browsing documentation or previous code. This also enables quicker onboarding, as developers can intuitively ask questions or search within the IDE.</li> <li>Smart Refactoring and Code Restructuring: As applications evolve, restructuring code becomes critical. Kola\u2019s AI offers intelligent refactoring options, enabling developers to restructure code confidently without breaking functionality. This minimizes technical debt and makes the codebase cleaner and more maintainable.</li> </ul> <p>Together, these AI-driven features in Kola for VS Code create a more efficient, accurate, and productive development experience, reducing the learning curve and enabling developers to focus on high-value tasks rather than repetitive or error-prone coding tasks.</p>"},{"location":"#leverage-the-power-of-ballerina","title":"Leverage the Power of Ballerina","text":"<p>Kola to take advantage of a language purpose-built for integration development, allowing developers to handle cloud-native, API-driven integrations with simplicity and efficiency. Ballerina, the foundation of Kola, empowers developers with:</p> <ul> <li>Integration-Centric Syntax: Ballerina\u2019s syntax is intuitive for integration, reducing the need for boilerplate code and allowing developers to write integration logic clearly and concisely. Its language constructs, like workers, channels, and error handling, are specifically designed for scenarios like API orchestration and data transformation.</li> <li>Cloud-Native and API-First Design: Ballerina is cloud-native by design, meaning that it includes built-in support for modern protocols like HTTP, WebSocket, gRPC, and Kafka, essential for microservices and cloud-based architectures. This enables developers to connect and interact with various APIs, making it ideal for the API-first strategies prevalent in modern enterprises.</li> <li>Visual Flow Representation: Ballerina\u2019s unique graphical representation allows developers to visualize integrations as they code, bridging the gap between code and design. This approach provides a flow-based overview of data movement and logic, which is invaluable for understanding complex workflows.</li> <li>In-Built Observability and Resilience: Ballerina includes observability features, enabling developers to monitor integrations out of the box. This includes support for distributed tracing, metrics, and logging, essential for maintaining and debugging integrations in a distributed environment.</li> <li>Unified Data Handling and Transformations: Ballerina simplifies data handling with straightforward syntax for defining data transformations and mappings, essential in integration workflows where data is frequently transformed between systems. This reduces complexity when integrating heterogeneous data sources.</li> <li>Built-in Testing and Deployment Tools: Ballerina supports testing and deployment automation, making it easy to validate and deploy integrations in cloud environments. By leveraging these tools, developers can ensure reliability and scalability for integrations, even as they deploy them across diverse infrastructures. Integrating Kola with Ballerina brings the best of both worlds: a developer-friendly environment with powerful language features designed to make integration projects easier, faster, and more robust.</li> </ul>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.</p>"},{"location":"deploy/docker/","title":"Deploy in Docker","text":""},{"location":"deploy/vm/","title":"Deploy in VM","text":""},{"location":"develop/entrypoint/","title":"Entrypoint","text":"<p>Ballerina Integrator provides a set of built-in entry points to expose services. These entry points are used to expose services to the outside world.  The following section describes the entry points supported in Ballerina Integrator and how to create them.</p>"},{"location":"develop/entrypoint/#services","title":"Services","text":"<p>Following service types are supported in Ballerina Integrator:</p>"},{"location":"develop/entrypoint/#http-service","title":"HTTP Service","text":"<p>HTTP service is a network-accessible API that is defined by a set of resources and methods.  To start your integration with an HTTP service, click on the <code>HTTP Service</code> Button in the <code>Service Type</code> section. HTTP service can be designed using Service Designer or by importing an OpenAPI Specification (OAS) file to set it up quickly.</p> <ol> <li> <p>Design From Scratch </p> <ul> <li>Select the <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>HelloWorldService</code>, path as <code>/hello</code> and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button.</li> <li>This will create a new service with the name <code>HelloWorldService</code> and the path <code>/hello</code> on port <code>9090</code>.</li> <li>You can now design the service by adding resources and methods to it.</li> </ul> </li> <li> <p>Import OpenAPI Specification</p> <ul> <li>Select the <code>Import OpenAPI Specification</code> option.</li> <li>Click on the <code>Choose File</code> button and select the OAS file.</li> <li>Click on the <code>Create Service</code> button.</li> <li>This will create a new service with the details specified in the OAS file.</li> <li>You can now design the service by editing resources and methods to it.</li> </ul> </li> </ol>"},{"location":"develop/entrypoint/#graphql-service","title":"GraphQL Service","text":""},{"location":"develop/entrypoint/#tasks","title":"Tasks","text":""},{"location":"develop/entrypoint/#triggers","title":"Triggers","text":""},{"location":"develop/nodes/","title":"Nodes","text":""},{"location":"develop/nodes/#if","title":"If","text":""},{"location":"develop/nodes/#switch","title":"Switch","text":""},{"location":"develop/nodes/#foreach","title":"Foreach","text":""},{"location":"develop/working-with-types/","title":"Working with Types","text":""},{"location":"develop/working-with-types/#records","title":"Records","text":""},{"location":"develop/working-with-types/#import-xml","title":"Import XML","text":""},{"location":"develop/working-with-types/#import-json","title":"Import JSON","text":""},{"location":"develop/working-with-types/#import-csv","title":"Import CSV","text":""},{"location":"develop/working-with-types/#import-yaml","title":"Import YAML","text":""},{"location":"get-started/key-concepts/","title":"Key Concepts","text":"<p>WSO2 Ballerina Composer is an all-in-one integration solution that simplifies digital transformation by offering a powerful, configuration-driven approach. It enables developers to visually create integration solutions using an intuitive, low-code graphical interface, making the process faster and more accessible.</p>"},{"location":"get-started/key-concepts/#entrypoint","title":"Entrypoint","text":"<p>An entry point refers to the place in the code where the execution of a integration begins. It is the first function or method that is called when the program starts running.  In Ballerina Composer, there are 3 types of entry points:</p> <ol> <li>Service: A service is a network-accessible API that is defined by a set of resources and methods. Start your integration with a HTTP service.</li> <li>Automation: Triggers integration with a task. Perfect for scheduled or one-time jobs.</li> <li>Trigger: Initiate your integration with a Trigger. Best for event-driven actions from external sources.</li> </ol>"},{"location":"get-started/key-concepts/#connections","title":"Connections","text":"<p>Connections are used to connect to external systems and services. They are used to interact with external systems and services, such as databases, APIs, and messaging systems.  Ballerina Composer provides a wide range of connectors that can be used to connect to various systems and services.</p>"},{"location":"get-started/key-concepts/#functions","title":"Functions","text":"<p>Functions are reusable code blocks that can be called from different parts of the integration. They are used to perform specific tasks or calculations.</p>"},{"location":"get-started/key-concepts/#types","title":"Types","text":"<p>Types are used to define the structure of data in Ballerina Composer. They are used to define the shape of the data that is passed between different components of the integration.</p>"},{"location":"get-started/key-concepts/#configurations","title":"Configurations","text":"<p>Configurations are used to define the settings and parameters of the integration. They are used to configure the behavior of the integration and its components.</p>"},{"location":"get-started/quick-start-guide/","title":"Quick Start Guide","text":""},{"location":"get-started/quick-start-guide/#overview","title":"Overview","text":"<p>In this guide, a simple integration will be built using the Kola Integrator plugin for Visual Studio Code. An HTTP service with a single resource (<code>greeting</code>) will be created to invoke the public <code>HelloWorld</code> API endpoint and return the response. </p>"},{"location":"get-started/quick-start-guide/#step-1-download-the-visual-studio-code-vscode-ide","title":"Step 1: Download the Visual Studio Code (VSCode) IDE.","text":"<p>Download and install the Visual Studio Code IDE from here.</p>"},{"location":"get-started/quick-start-guide/#step-2-install-the-kola-plugin","title":"Step 2: Install the Kola plugin.","text":"<ol> <li>Open the Visual Studio Code IDE.</li> <li>Go to the Extensions view by clicking on the extension icon on the sidebar or pressing <code>Ctrl + Shift + X</code> on Windows and Linux, or <code>shift + \u2318 + X</code> on a Mac.</li> <li>Search for <code>Kola</code> in the Extensions view search box.</li> <li>Click on the <code>Install</code> button to install the Ballerina Composer plugin. </li> <li>This will install Kola, KolaB extension to the Visual Studio Code IDE.  </li> </ol>"},{"location":"get-started/quick-start-guide/#step-3-setup-kola-for-the-first-time","title":"Step 3: Setup Kola for the first time.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.    </li> <li>Click on the <code>Setup</code> button.</li> <li>The setup wizard will install and configure the Ballerina distribution required for Kola.</li> <li>Click on the <code>Restart VSCode</code> button to complete the setup.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-4-create-a-new-integration-project","title":"Step 4: Create a new Integration Project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>HelloWorld</code>.</li> <li>Select Project Directory by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-4-create-an-integration-service","title":"Step 4: Create an Integration Service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option. </li> <li>Enter the service name as <code>HelloWorldService</code>, path as <code>/hello</code>, and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-5-design-the-integration","title":"Step 5: Design the Integration.","text":"<ol> <li>Now that you have created the service, you can design the integration by adding resources and methods to it. The generated service will have a default resource named <code>greeting</code> with a <code>GET</code> method.</li> <li>Click on the <code>greeting</code> resource to view the resource details. Let's modify the resource to invoke the <code>HelloWorld</code> API endpoint.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Add Connection</code> from the node panel on the left. </li> <li>Select <code>HTTP Connection</code> as the connection type.</li> <li>Change the variable name to <code>externalEP</code>.</li> <li> <p>Add the URL <code>https://apis.wso2.com</code> to the connection URL field and click <code>Save</code>.    </p> </li> <li> <p>Click the \u2795 button again and select <code>Connections</code>-&gt;<code>externalEP</code>-&gt;<code>Get</code> from the node panel.</p> </li> <li> <p>Enter the path <code>/zvdz/mi-qsg/v1.0</code> in the URL field and click <code>Save</code>.    </p> </li> <li> <p>Click on the \u2795 button again and select <code>Return</code> from the node panel.</p> </li> <li>Select the <code>value</code> variable from the dropdown and click <code>Save</code>. This step will return the response from the <code>HelloWorld</code> API endpoint.    </li> </ol>"},{"location":"get-started/quick-start-guide/#step-6-run-the-integration","title":"Step 6: Run the Integration.","text":"<ol> <li>Click on the <code>Run</code> on the run button at top right corner to run the integration.</li> <li>The integration will be compiled and started in the embedded Ballerina runtime.</li> <li>Once the integration is started, you can access the service by navigating to <code>http://localhost:9090/hello/greeting</code> in your web browser.</li> </ol>"},{"location":"learn/connect-database/","title":"Working with Databases","text":"<p>In this guide, you will learn how to connect to a database using Kola. Kola provides a set of built-in SQL client libraries that you can use to connect to a database.</p>"},{"location":"learn/json-xml-transform/","title":"Transforming JSON to XML","text":""},{"location":"learn/json-xml-transform/#overview","title":"Overview","text":"<p>This guide explains how to create a simple integration to convert a JSON payload to an XML payload using the Kola. An HTTP service with a single resource (<code>toXml</code>) will be created to accept a JSON payload and return the XML representation of the payload. </p>"},{"location":"learn/json-xml-transform/#step-1-create-a-new-integration-project","title":"Step 1: Create a new Integration Project.","text":"<ol> <li>Click on the Kola Integrator icon on the sidebar.</li> <li>Click on the <code>Create New Integration</code> button.</li> <li>Enter the project name as <code>JsonToXml</code>.</li> <li>Select Project Directory by clicking on the <code>Select Location</code> button.</li> <li>Click on the <code>Create New Integration</code> button to create the integration project.    </li> </ol>"},{"location":"learn/json-xml-transform/#step-2-create-an-integration-service","title":"Step 2: Create an Integration Service.","text":"<ol> <li>In the design view, click on the <code>Add Construct</code> button.</li> <li>Select <code>Service</code> from the menu.</li> <li>Select <code>HTTP Service</code> from the Service Type dropdown.</li> <li>Select <code>Design From Scratch</code> option.</li> <li>Enter the service name as <code>JsonToXml</code>, path as <code>/convert</code>, and <code>9090</code> as the port.</li> <li>Click on the <code>Create Service</code> button to create the new service with the specified configurations.</li> </ol>"},{"location":"learn/json-xml-transform/#step-3-update-the-resource-method","title":"Step 3: Update the resource method","text":"<ol> <li>Click on three dots appear in front of the <code>greeting</code> resource and select edit to view and update the resource details.</li> <li>Change the resource HTTP method to <code>POST</code>.</li> <li>Change the resource name as <code>toXml</code></li> <li>Add a payload parameter named <code>input</code> to the resource of type <code>json</code>. </li> <li>Change the 200 response return type to <code>xml</code>.</li> <li>Add a new response of type <code>HttpBadRequest</code> under the responses. </li> <li>Click on the <code>Save</code> button to update the resource with the specified configurations.     </li> </ol> <p>Resource Method</p> <p>To learn more about resources, see Ballerina Resources.</p>"},{"location":"learn/json-xml-transform/#step-4-add-the-transformation-logic","title":"Step 4: Add the transformation logic","text":"<ol> <li>Click on the <code>toXml</code> resource to navigate to the resource implementation designer view.</li> <li>Hover to the arrow after start and click the \u2795 button to add a new action to the resource.</li> <li>Select <code>Variable</code> from the node panel on the left.</li> <li>Change the variable name to <code>xmlData</code>, type as <code>xml | ()</code> and expression to <code>check xmldata:fromJson(input)</code>.    </li> </ol> <p>JSON to XML Conversion</p> <p>To learn more about json to xml conversion, see Ballerina JSON to XML conversion.</p>"},{"location":"learn/json-xml-transform/#step-5-error-handling","title":"Step 5: Error handling","text":"<ol> <li>Click on the \u2795 button again and select <code>If</code> from the node panel.</li> <li>Enter the condition as <code>xmlData is xml</code> and press <code>save</code>.    </li> <li>Click on the <code>If</code> condition true(<code>xmlData is xml</code>)  path \u2795 sign and add a <code>Return</code> from the node panel.</li> <li>Select the <code>xmlData</code> variable from the dropdown and click <code>Save</code>.    </li> <li>Click on the <code>If</code> condition <code>Else</code> path \u2795 sign and add another <code>Return</code> from the node panel.</li> <li>Enter <code>http:BadRequest</code> as the value and click <code>Save</code>.    </li> <li>The final design will look like below.            </li> <li>The final code will look like below. The source view can be accessed by clicking on the <code>&lt;/&gt;</code> button in the top right corner.    <pre><code>import ballerina/http;\nimport ballerina/xmldata;\n\nservice /convert on new http:Listener(9090) {\n\n    function init() returns error? {\n    }\n\n    resource function post toXml(@http:Payload json input) returns xml|http:InternalServerError|http:BadRequest {\n        do {\n\n            xml? xmlData = check xmldata:fromJson(input);\n            if xmlData is xml {\n                return xmlData;\n            } else {\n                return http:BAD_REQUEST;\n            }\n\n        } on fail error e {\n            return http:INTERNAL_SERVER_ERROR;\n        }\n    }\n}\n</code></pre></li> </ol>"},{"location":"learn/json-xml-transform/#step-6-run-the-integration","title":"Step 6: Run the integration","text":"<ol> <li>Click on the <code>Run</code> on the run button in the top right corner to run the integration.</li> <li>The integration will start and the service will be available at <code>http://localhost:9090/convert</code>.</li> <li>The service can be tested using a tool like Postman or curl by sending a POST request with a JSON payload to the service endpoint.    <pre><code>curl -X POST \"http://localhost:9090/convert/toXml\" -H \"Content-Type: application/json\" -d '{\"name\":\"John\", \"age\":30, \"car\":\"Honda\"}'\n</code></pre></li> <li>The response will be an XML representation of the JSON payload. <code>&lt;root&gt;         &lt;name&gt;John&lt;/name&gt;         &lt;age&gt;30&lt;/age&gt;         &lt;car&gt;Honda&lt;/car&gt;     &lt;/root&gt;</code></li> </ol>"}]}